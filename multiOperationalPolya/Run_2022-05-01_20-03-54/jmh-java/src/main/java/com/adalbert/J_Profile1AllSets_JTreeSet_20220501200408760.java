package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile1AllSets_JTreeSet_20220501200408760 {
	java.util.TreeSet<Double> collection = new java.util.TreeSet<>();
	@Setup(Level.Invocation)
	public void setupJTreeSet() {
		collection = new java.util.TreeSet<>();
		collection.add(76.0);
		collection.add(5.0);
		collection.add(197.0);
		collection.add(77.0);
		collection.add(108.0);
		collection.add(22.0);
		collection.add(130.0);
		collection.add(24.0);
		collection.add(16.0);
		collection.add(117.0);
		collection.add(196.0);
		collection.add(69.0);
		collection.add(88.0);
		collection.add(107.0);
		collection.add(129.0);
		collection.add(129.0);
		collection.add(67.0);
		collection.add(50.0);
		collection.add(15.0);
		collection.add(37.0);
		collection.add(199.0);
		collection.add(84.0);
		collection.add(37.0);
		collection.add(107.0);
		collection.add(38.0);
		collection.add(115.0);
		collection.add(52.0);
		collection.add(178.0);
		collection.add(100.0);
		collection.add(87.0);
		collection.add(15.0);
		collection.add(193.0);
		collection.add(10.0);
		collection.add(30.0);
		collection.add(12.0);
		collection.add(5.0);
		collection.add(107.0);
		collection.add(55.0);
		collection.add(27.0);
		collection.add(132.0);
		collection.add(125.0);
		collection.add(65.0);
		collection.add(131.0);
		collection.add(68.0);
		collection.add(62.0);
		collection.add(177.0);
		collection.add(134.0);
		collection.add(149.0);
		collection.add(49.0);
		collection.add(78.0);
		collection.add(88.0);
		collection.add(59.0);
		collection.add(27.0);
		collection.add(146.0);
		collection.add(70.0);
		collection.add(98.0);
		collection.add(116.0);
		collection.add(152.0);
		collection.add(67.0);
		collection.add(61.0);
		collection.add(131.0);
		collection.add(76.0);
		collection.add(90.0);
		collection.add(85.0);
		collection.add(16.0);
		collection.add(99.0);
		collection.add(107.0);
		collection.add(101.0);
		collection.add(156.0);
		collection.add(93.0);
		collection.add(190.0);
		collection.add(33.0);
		collection.add(101.0);
		collection.add(68.0);
		collection.add(7.0);
		collection.add(1.0);
		collection.add(159.0);
		collection.add(178.0);
		collection.add(48.0);
		collection.add(142.0);
		collection.add(199.0);
		collection.add(110.0);
		collection.add(155.0);
		collection.add(79.0);
		collection.add(71.0);
		collection.add(72.0);
		collection.add(129.0);
		collection.add(36.0);
		collection.add(198.0);
		collection.add(179.0);
		collection.add(131.0);
		collection.add(161.0);
		collection.add(152.0);
		collection.add(157.0);
		collection.add(130.0);
		collection.add(122.0);
		collection.add(95.0);
		collection.add(17.0);
		collection.add(131.0);
		collection.add(35.0);
		collection.add(195.0);
		collection.add(151.0);
		collection.add(121.0);
		collection.add(45.0);
		collection.add(89.0);
		collection.add(194.0);
		collection.add(24.0);
		collection.add(46.0);
		collection.add(67.0);
		collection.add(92.0);
		collection.add(168.0);
		collection.add(111.0);
		collection.add(72.0);
		collection.add(18.0);
		collection.add(119.0);
		collection.add(1.0);
		collection.add(69.0);
		collection.add(90.0);
		collection.add(161.0);
		collection.add(105.0);
		collection.add(141.0);
		collection.add(14.0);
		collection.add(8.0);
		collection.add(169.0);
		collection.add(192.0);
		collection.add(64.0);
		collection.add(197.0);
		collection.add(72.0);
		collection.add(192.0);
		collection.add(84.0);
		collection.add(183.0);
		collection.add(72.0);
		collection.add(165.0);
		collection.add(9.0);
		collection.add(15.0);
		collection.add(173.0);
		collection.add(194.0);
		collection.add(125.0);
		collection.add(76.0);
		collection.add(37.0);
		collection.add(34.0);
		collection.add(184.0);
		collection.add(92.0);
		collection.add(91.0);
		collection.add(77.0);
		collection.add(10.0);
		collection.add(78.0);
		collection.add(84.0);
		collection.add(115.0);
		collection.add(118.0);
		collection.add(54.0);
		collection.add(187.0);
		collection.add(42.0);
		collection.add(92.0);
		collection.add(39.0);
		collection.add(84.0);
		collection.add(47.0);
		collection.add(140.0);
		collection.add(193.0);
		collection.add(93.0);
		collection.add(158.0);
		collection.add(192.0);
		collection.add(55.0);
		collection.add(40.0);
		collection.add(151.0);
		collection.add(70.0);
		collection.add(84.0);
		collection.add(95.0);
		collection.add(196.0);
		collection.add(126.0);
		collection.add(81.0);
		collection.add(194.0);
		collection.add(2.0);
		collection.add(118.0);
		collection.add(159.0);
		collection.add(81.0);
		collection.add(7.0);
		collection.add(28.0);
		collection.add(96.0);
		collection.add(56.0);
		collection.add(41.0);
		collection.add(166.0);
		collection.add(17.0);
		collection.add(124.0);
		collection.add(5.0);
		collection.add(200.0);
		collection.add(155.0);
		collection.add(175.0);
		collection.add(19.0);
		collection.add(14.0);
		collection.add(121.0);
		collection.add(53.0);
		collection.add(89.0);
		collection.add(2.0);
		collection.add(151.0);
		collection.add(36.0);
		collection.add(39.0);
		collection.add(107.0);
		collection.add(53.0);
		collection.add(192.0);
		collection.add(30.0);
		collection.add(195.0);
		collection.add(158.0);
		collection.add(103.0);
		collection.add(74.0);
		collection.add(52.0);
		collection.add(75.0);
		collection.add(160.0);
		collection.add(180.0);
		collection.add(98.0);
		collection.add(163.0);
		collection.add(92.0);
		collection.add(123.0);
		collection.add(127.0);
		collection.add(57.0);
		collection.add(173.0);
		collection.add(124.0);
		collection.add(22.0);
		collection.add(194.0);
		collection.add(166.0);
		collection.add(132.0);
		collection.add(181.0);
		collection.add(183.0);
		collection.add(174.0);
		collection.add(158.0);
		collection.add(35.0);
		collection.add(36.0);
		collection.add(22.0);
		collection.add(54.0);
		collection.add(138.0);
		collection.add(155.0);
		collection.add(84.0);
		collection.add(171.0);
		collection.add(198.0);
		collection.add(49.0);
		collection.add(151.0);
		collection.add(95.0);
		collection.add(179.0);
		collection.add(197.0);
		collection.add(6.0);
		collection.add(55.0);
		collection.add(26.0);
		collection.add(164.0);
		collection.add(139.0);
		collection.add(1.0);
		collection.add(59.0);
		collection.add(93.0);
		collection.add(188.0);
		collection.add(62.0);
		collection.add(52.0);
		collection.add(181.0);
		collection.add(97.0);
		collection.add(101.0);
		collection.add(124.0);
		collection.add(135.0);
		collection.add(60.0);
		collection.add(109.0);
		collection.add(57.0);
		collection.add(82.0);
		collection.add(191.0);
		collection.add(176.0);
		collection.add(16.0);
		collection.add(163.0);
		collection.add(140.0);
		collection.add(141.0);
		collection.add(143.0);
		collection.add(134.0);
		collection.add(105.0);
		collection.add(99.0);
		collection.add(32.0);
		collection.add(149.0);
		collection.add(133.0);
		collection.add(115.0);
		collection.add(126.0);
		collection.add(65.0);
		collection.add(40.0);
		collection.add(62.0);
		collection.add(132.0);
		collection.add(133.0);
		collection.add(1.0);
		collection.add(186.0);
		collection.add(87.0);
		collection.add(168.0);
		collection.add(57.0);
		collection.add(47.0);
		collection.add(113.0);
		collection.add(175.0);
		collection.add(36.0);
		collection.add(99.0);
		collection.add(148.0);
		collection.add(94.0);
		collection.add(74.0);
		collection.add(81.0);
		collection.add(173.0);
		collection.add(10.0);
		collection.add(184.0);
		collection.add(118.0);
		collection.add(14.0);
		collection.add(179.0);
		collection.add(79.0);
		collection.add(195.0);
		collection.add(160.0);
		collection.add(117.0);
		collection.add(171.0);
		collection.add(28.0);
		collection.add(98.0);
		collection.add(47.0);
		collection.add(54.0);
		collection.add(180.0);
		collection.add(72.0);
		collection.add(175.0);
		collection.add(138.0);
		collection.add(26.0);
		collection.add(159.0);
		collection.add(150.0);
		collection.add(186.0);
		collection.add(7.0);
		collection.add(25.0);
		collection.add(44.0);
		collection.add(154.0);
		collection.add(124.0);
		collection.add(115.0);
		collection.add(149.0);
		collection.add(191.0);
		collection.add(4.0);
		collection.add(191.0);
		collection.add(69.0);
		collection.add(34.0);
		collection.add(198.0);
		collection.add(193.0);
		collection.add(4.0);
		collection.add(3.0);
		collection.add(40.0);
		collection.add(136.0);
		collection.add(93.0);
		collection.add(155.0);
		collection.add(6.0);
		collection.add(157.0);
		collection.add(142.0);
		collection.add(150.0);
		collection.add(179.0);
		collection.add(13.0);
		collection.add(1.0);
		collection.add(196.0);
		collection.add(125.0);
		collection.add(190.0);
		collection.add(94.0);
		collection.add(107.0);
		collection.add(39.0);
		collection.add(32.0);
		collection.add(174.0);
		collection.add(24.0);
		collection.add(183.0);
		collection.add(29.0);
		collection.add(84.0);
		collection.add(128.0);
		collection.add(166.0);
		collection.add(198.0);
		collection.add(117.0);
		collection.add(17.0);
		collection.add(35.0);
		collection.add(92.0);
		collection.add(38.0);
		collection.add(33.0);
		collection.add(186.0);
		collection.add(134.0);
		collection.add(165.0);
		collection.add(25.0);
		collection.add(150.0);
		collection.add(130.0);
		collection.add(33.0);
		collection.add(79.0);
		collection.add(106.0);
		collection.add(200.0);
		collection.add(81.0);
		collection.add(51.0);
		collection.add(87.0);
		collection.add(173.0);
		collection.add(91.0);
		collection.add(180.0);
		collection.add(14.0);
		collection.add(131.0);
		collection.add(148.0);
		collection.add(50.0);
		collection.add(47.0);
		collection.add(6.0);
		collection.add(1.0);
		collection.add(102.0);
		collection.add(135.0);
		collection.add(123.0);
		collection.add(154.0);
		collection.add(59.0);
		collection.add(54.0);
		collection.add(138.0);
		collection.add(47.0);
		collection.add(67.0);
		collection.add(177.0);
		collection.add(144.0);
		collection.add(93.0);
		collection.add(31.0);
		collection.add(6.0);
		collection.add(45.0);
		collection.add(198.0);
		collection.add(162.0);
		collection.add(163.0);
		collection.add(142.0);
		collection.add(18.0);
		collection.add(164.0);
		collection.add(133.0);
		collection.add(13.0);
		collection.add(117.0);
		collection.add(148.0);
		collection.add(6.0);
		collection.add(198.0);
		collection.add(96.0);
		collection.add(109.0);
		collection.add(122.0);
		collection.add(38.0);
		collection.add(36.0);
		collection.add(48.0);
		collection.add(148.0);
		collection.add(129.0);
		collection.add(68.0);
		collection.add(150.0);
		collection.add(47.0);
		collection.add(75.0);
		collection.add(171.0);
		collection.add(185.0);
		collection.add(107.0);
		collection.add(11.0);
		collection.add(95.0);
		collection.add(53.0);
		collection.add(78.0);
		collection.add(95.0);
		collection.add(193.0);
		collection.add(120.0);
		collection.add(135.0);
		collection.add(27.0);
		collection.add(94.0);
		collection.add(35.0);
		collection.add(181.0);
		collection.add(107.0);
		collection.add(119.0);
		collection.add(49.0);
		collection.add(76.0);
		collection.add(173.0);
		collection.add(118.0);
		collection.add(30.0);
		collection.add(12.0);
		collection.add(31.0);
		collection.add(177.0);
		collection.add(76.0);
		collection.add(67.0);
		collection.add(178.0);
		collection.add(169.0);
		collection.add(187.0);
		collection.add(12.0);
		collection.add(197.0);
		collection.add(111.0);
		collection.add(197.0);
		collection.add(84.0);
		collection.add(94.0);
		collection.add(155.0);
		collection.add(72.0);
		collection.add(118.0);
		collection.add(30.0);
		collection.add(18.0);
		collection.add(51.0);
		collection.add(184.0);
		collection.add(184.0);
		collection.add(4.0);
		collection.add(172.0);
		collection.add(44.0);
		collection.add(18.0);
		collection.add(45.0);
		collection.add(108.0);
		collection.add(33.0);
		collection.add(51.0);
		collection.add(173.0);
		collection.add(130.0);
		collection.add(61.0);
		collection.add(155.0);
		collection.add(52.0);
		collection.add(156.0);
		collection.add(14.0);
		collection.add(183.0);
		collection.add(181.0);
		collection.add(182.0);
		collection.add(176.0);
		collection.add(2.0);
		collection.add(185.0);
		collection.add(75.0);
		collection.add(182.0);
		collection.add(150.0);
		collection.add(63.0);
		collection.add(138.0);
		collection.add(176.0);
		collection.add(121.0);
		collection.add(78.0);
		collection.add(155.0);
		collection.add(17.0);
		collection.add(3.0);
		collection.add(8.0);
		collection.add(159.0);
		collection.add(117.0);
		collection.add(4.0);
		collection.add(141.0);
		collection.add(158.0);
		collection.add(53.0);
		collection.add(179.0);
		collection.add(60.0);
		collection.add(51.0);
		collection.add(41.0);
		collection.add(139.0);
		collection.add(39.0);
		collection.add(8.0);
		collection.add(7.0);
		collection.add(194.0);
		collection.add(140.0);
		collection.add(145.0);
		collection.add(14.0);
		collection.add(139.0);
		collection.add(185.0);
		collection.add(108.0);
		collection.add(152.0);
		collection.add(188.0);
		collection.add(133.0);
		collection.add(49.0);
		collection.add(44.0);
		collection.add(141.0);
		collection.add(113.0);
		collection.add(108.0);
		collection.add(103.0);
		collection.add(26.0);
		collection.add(45.0);
		collection.add(16.0);
		collection.add(29.0);
		collection.add(35.0);
		collection.add(92.0);
		collection.add(199.0);
		collection.add(37.0);
		collection.add(54.0);
		collection.add(102.0);
		collection.add(152.0);
		collection.add(111.0);
		collection.add(140.0);
		collection.add(11.0);
		collection.add(117.0);
		collection.add(20.0);
		collection.add(16.0);
		collection.add(94.0);
		collection.add(54.0);
		collection.add(50.0);
		collection.add(156.0);
		collection.add(118.0);
		collection.add(195.0);
		collection.add(94.0);
		collection.add(45.0);
		collection.add(154.0);
		collection.add(21.0);
		collection.add(73.0);
		collection.add(97.0);
		collection.add(147.0);
		collection.add(61.0);
		collection.add(55.0);
		collection.add(7.0);
		collection.add(21.0);
		collection.add(177.0);
		collection.add(50.0);
		collection.add(22.0);
		collection.add(51.0);
		collection.add(64.0);
		collection.add(195.0);
		collection.add(165.0);
		collection.add(171.0);
		collection.add(106.0);
		collection.add(165.0);
		collection.add(182.0);
		collection.add(159.0);
		collection.add(192.0);
		collection.add(84.0);
		collection.add(75.0);
		collection.add(123.0);
		collection.add(165.0);
		collection.add(173.0);
		collection.add(20.0);
		collection.add(181.0);
		collection.add(159.0);
		collection.add(187.0);
		collection.add(88.0);
		collection.add(51.0);
		collection.add(184.0);
		collection.add(48.0);
		collection.add(132.0);
		collection.add(150.0);
		collection.add(117.0);
		collection.add(89.0);
		collection.add(200.0);
		collection.add(31.0);
		collection.add(127.0);
		collection.add(105.0);
		collection.add(163.0);
		collection.add(8.0);
		collection.add(129.0);
		collection.add(145.0);
		collection.add(155.0);
		collection.add(11.0);
		collection.add(104.0);
		collection.add(187.0);
		collection.add(194.0);
		collection.add(10.0);
		collection.add(68.0);
		collection.add(79.0);
		collection.add(71.0);
		collection.add(84.0);
		collection.add(194.0);
		collection.add(71.0);
		collection.add(142.0);
		collection.add(110.0);
		collection.add(23.0);
		collection.add(116.0);
		collection.add(22.0);
		collection.add(81.0);
		collection.add(132.0);
		collection.add(55.0);
		collection.add(29.0);
		collection.add(22.0);
		collection.add(174.0);
		collection.add(68.0);
		collection.add(40.0);
		collection.add(51.0);
		collection.add(52.0);
		collection.add(21.0);
		collection.add(12.0);
		collection.add(176.0);
		collection.add(41.0);
		collection.add(85.0);
		collection.add(23.0);
		collection.add(31.0);
		collection.add(102.0);
		collection.add(141.0);
		collection.add(23.0);
		collection.add(30.0);
		collection.add(119.0);
		collection.add(133.0);
		collection.add(80.0);
		collection.add(69.0);
		collection.add(165.0);
		collection.add(6.0);
		collection.add(177.0);
		collection.add(184.0);
		collection.add(99.0);
		collection.add(6.0);
		collection.add(37.0);
		collection.add(90.0);
		collection.add(167.0);
		collection.add(111.0);
		collection.add(58.0);
		collection.add(122.0);
		collection.add(51.0);
		collection.add(35.0);
		collection.add(160.0);
		collection.add(22.0);
		collection.add(195.0);
		collection.add(170.0);
		collection.add(42.0);
		collection.add(166.0);
		collection.add(151.0);
		collection.add(49.0);
		collection.add(196.0);
		collection.add(8.0);
		collection.add(63.0);
		collection.add(5.0);
		collection.add(20.0);
		collection.add(82.0);
		collection.add(170.0);
		collection.add(7.0);
		collection.add(100.0);
		collection.add(94.0);
		collection.add(141.0);
		collection.add(76.0);
		collection.add(136.0);
		collection.add(149.0);
		collection.add(95.0);
		collection.add(150.0);
		collection.add(84.0);
		collection.add(38.0);
		collection.add(132.0);
		collection.add(193.0);
		collection.add(87.0);
		collection.add(162.0);
		collection.add(104.0);
		collection.add(182.0);
		collection.add(94.0);
		collection.add(28.0);
		collection.add(136.0);
		collection.add(185.0);
		collection.add(56.0);
		collection.add(199.0);
		collection.add(51.0);
		collection.add(157.0);
		collection.add(141.0);
		collection.add(102.0);
		collection.add(182.0);
		collection.add(103.0);
		collection.add(122.0);
		collection.add(29.0);
		collection.add(110.0);
		collection.add(67.0);
		collection.add(19.0);
		collection.add(110.0);
		collection.add(193.0);
		collection.add(97.0);
		collection.add(195.0);
		collection.add(38.0);
		collection.add(147.0);
		collection.add(7.0);
		collection.add(192.0);
		collection.add(157.0);
		collection.add(174.0);
		collection.add(19.0);
		collection.add(48.0);
		collection.add(103.0);
		collection.add(49.0);
		collection.add(44.0);
		collection.add(180.0);
		collection.add(91.0);
		collection.add(143.0);
		collection.add(75.0);
		collection.add(154.0);
		collection.add(66.0);
		collection.add(12.0);
		collection.add(93.0);
		collection.add(8.0);
		collection.add(29.0);
		collection.add(54.0);
		collection.add(19.0);
		collection.add(44.0);
		collection.add(100.0);
		collection.add(158.0);
		collection.add(32.0);
		collection.add(162.0);
		collection.add(22.0);
		collection.add(188.0);
		collection.add(198.0);
		collection.add(127.0);
		collection.add(72.0);
		collection.add(98.0);
		collection.add(132.0);
		collection.add(8.0);
		collection.add(35.0);
		collection.add(78.0);
		collection.add(128.0);
		collection.add(30.0);
		collection.add(75.0);
		collection.add(36.0);
		collection.add(185.0);
		collection.add(137.0);
		collection.add(58.0);
		collection.add(37.0);
		collection.add(96.0);
		collection.add(192.0);
		collection.add(86.0);
		collection.add(118.0);
		collection.add(78.0);
		collection.add(116.0);
		collection.add(97.0);
		collection.add(75.0);
		collection.add(45.0);
		collection.add(15.0);
		collection.add(95.0);
		collection.add(145.0);
		collection.add(165.0);
		collection.add(147.0);
		collection.add(163.0);
		collection.add(127.0);
		collection.add(154.0);
		collection.add(178.0);
		collection.add(72.0);
		collection.add(65.0);
		collection.add(29.0);
		collection.add(3.0);
		collection.add(71.0);
		collection.add(181.0);
		collection.add(84.0);
		collection.add(68.0);
		collection.add(157.0);
		collection.add(180.0);
		collection.add(92.0);
		collection.add(13.0);
		collection.add(190.0);
		collection.add(141.0);
		collection.add(126.0);
		collection.add(193.0);
		collection.add(7.0);
		collection.add(198.0);
		collection.add(179.0);
		collection.add(2.0);
		collection.add(163.0);
		collection.add(84.0);
		collection.add(182.0);
		collection.add(176.0);
		collection.add(108.0);
		collection.add(140.0);
		collection.add(164.0);
		collection.add(19.0);
		collection.add(3.0);
		collection.add(102.0);
		collection.add(143.0);
		collection.add(143.0);
		collection.add(94.0);
		collection.add(188.0);
		collection.add(154.0);
		collection.add(149.0);
		collection.add(65.0);
		collection.add(16.0);
		collection.add(65.0);
		collection.add(50.0);
		collection.add(184.0);
		collection.add(142.0);
		collection.add(3.0);
		collection.add(59.0);
		collection.add(124.0);
		collection.add(110.0);
		collection.add(163.0);
		collection.add(112.0);
		collection.add(157.0);
		collection.add(119.0);
		collection.add(196.0);
		collection.add(30.0);
		collection.add(84.0);
		collection.add(131.0);
		collection.add(53.0);
		collection.add(151.0);
		collection.add(150.0);
		collection.add(129.0);
		collection.add(34.0);
		collection.add(82.0);
		collection.add(158.0);
		collection.add(1.0);
		collection.add(172.0);
		collection.add(161.0);
		collection.add(24.0);
		collection.add(100.0);
		collection.add(193.0);
		collection.add(47.0);
		collection.add(91.0);
		collection.add(31.0);
		collection.add(133.0);
		collection.add(159.0);
		collection.add(19.0);
		collection.add(187.0);
		collection.add(152.0);
		collection.add(70.0);
		collection.add(50.0);
		collection.add(149.0);
		collection.add(121.0);
		collection.add(96.0);
		collection.add(48.0);
		collection.add(197.0);
		collection.add(87.0);
		collection.add(74.0);
		collection.add(5.0);
		collection.add(127.0);
		collection.add(176.0);
		collection.add(200.0);
		collection.add(4.0);
		collection.add(99.0);
		collection.add(81.0);
		collection.add(89.0);
		collection.add(16.0);
		collection.add(77.0);
		collection.add(196.0);
		collection.add(144.0);
		collection.add(121.0);
		collection.add(15.0);
		collection.add(146.0);
		collection.add(160.0);
		collection.add(161.0);
		collection.add(176.0);
		collection.add(193.0);
		collection.add(116.0);
		collection.add(129.0);
		collection.add(100.0);
		collection.add(165.0);
		collection.add(82.0);
		collection.add(76.0);
		collection.add(52.0);
		collection.add(181.0);
		collection.add(195.0);
		collection.add(82.0);
		collection.add(196.0);
		collection.add(52.0);
		collection.add(86.0);
		collection.add(51.0);
		collection.add(136.0);
		collection.add(72.0);
		collection.add(190.0);
		collection.add(179.0);
		collection.add(161.0);
		collection.add(156.0);
		collection.add(46.0);
		collection.add(41.0);
		collection.add(101.0);
		collection.add(26.0);
		collection.add(62.0);
		collection.add(45.0);
		collection.add(134.0);
		collection.add(14.0);
		collection.add(62.0);
		collection.add(47.0);
		collection.add(134.0);
		collection.add(150.0);
		collection.add(134.0);
		collection.add(59.0);
		collection.add(187.0);
		collection.add(74.0);
		collection.add(93.0);
		collection.add(20.0);
		collection.add(160.0);
		collection.add(33.0);
		collection.add(10.0);
		collection.add(13.0);
		collection.add(31.0);
		collection.add(149.0);
		collection.add(73.0);
		collection.add(99.0);
		collection.add(82.0);
		collection.add(143.0);
		collection.add(80.0);
		collection.add(52.0);
		collection.add(77.0);
		collection.add(71.0);
		collection.add(185.0);
		collection.add(140.0);
		collection.add(39.0);
		collection.add(158.0);
		collection.add(16.0);
		collection.add(182.0);
		collection.add(135.0);
		collection.add(109.0);
		collection.add(137.0);
		collection.add(44.0);
		collection.add(128.0);
		collection.add(132.0);
		collection.add(10.0);
		collection.add(184.0);
		collection.add(163.0);
		collection.add(83.0);
		collection.add(155.0);
		collection.add(140.0);
		collection.add(166.0);
		collection.add(50.0);
		collection.add(27.0);
		collection.add(65.0);
		collection.add(127.0);
		collection.add(173.0);
		collection.add(102.0);
		collection.add(95.0);
		collection.add(87.0);
		collection.add(112.0);
		collection.add(88.0);
		collection.add(101.0);
		collection.add(18.0);
		collection.add(82.0);
		collection.add(108.0);
		collection.add(106.0);
		collection.add(135.0);
		collection.add(160.0);
		collection.add(94.0);
		collection.add(18.0);
		collection.add(49.0);
		collection.add(90.0);
		collection.add(36.0);
		collection.add(62.0);
		collection.add(89.0);
		collection.add(25.0);
		collection.add(182.0);
		collection.add(137.0);
		collection.add(19.0);
		collection.add(122.0);
		collection.add(8.0);
		collection.add(169.0);
		collection.add(179.0);
		collection.add(198.0);
		collection.add(172.0);
		collection.add(108.0);
		collection.add(192.0);
		collection.add(27.0);
		collection.add(140.0);
		collection.add(52.0);
		collection.add(56.0);
		collection.add(149.0);
		collection.add(116.0);
		collection.add(108.0);
		collection.add(93.0);
		collection.add(168.0);
		collection.add(32.0);
		collection.add(155.0);
		collection.add(103.0);
		collection.add(79.0);
		collection.add(50.0);
		collection.add(181.0);
		collection.add(61.0);
		collection.add(200.0);
		collection.add(122.0);
		collection.add(100.0);
		collection.add(171.0);
		collection.add(78.0);
		collection.add(119.0);
		collection.add(168.0);
		collection.add(67.0);
		collection.add(72.0);
		collection.add(81.0);
		collection.add(33.0);
		collection.add(149.0);
		collection.add(99.0);
		collection.add(141.0);
		collection.add(93.0);
		collection.add(97.0);
		collection.add(36.0);
		collection.add(21.0);
		collection.add(57.0);
		collection.add(24.0);
		collection.add(122.0);
		collection.add(152.0);
		collection.add(39.0);
		collection.add(40.0);
		collection.add(34.0);
		collection.add(14.0);
		collection.add(143.0);
		collection.add(149.0);
		collection.add(113.0);
		collection.add(141.0);
		collection.add(85.0);
		collection.add(57.0);
		collection.add(31.0);
		collection.add(44.0);
		collection.add(132.0);
		collection.add(140.0);
		collection.add(136.0);
		collection.add(52.0);
		collection.add(95.0);
		collection.add(36.0);
		collection.add(70.0);
		collection.add(65.0);
		collection.add(41.0);
		collection.add(52.0);
		collection.add(58.0);
		collection.add(76.0);
		collection.add(106.0);
		collection.add(20.0);
		collection.add(126.0);
		collection.add(21.0);
		collection.add(95.0);
		collection.add(120.0);
		collection.add(129.0);
		collection.add(58.0);
		collection.add(126.0);
		collection.add(128.0);
		collection.add(177.0);
		collection.add(38.0);
		collection.add(142.0);
		collection.add(128.0);
		collection.add(156.0);
		collection.add(10.0);
		collection.add(185.0);
		collection.add(16.0);
		collection.add(185.0);
		collection.add(97.0);
		collection.add(152.0);
		collection.add(2.0);
		collection.add(5.0);
		collection.add(169.0);
		collection.add(135.0);
		collection.add(48.0);
		collection.add(146.0);
		collection.add(187.0);
		collection.add(50.0);
		collection.add(8.0);
		collection.add(117.0);
		collection.add(119.0);
		collection.add(85.0);
		collection.add(200.0);
		collection.add(195.0);
		collection.add(117.0);
		collection.add(53.0);
		collection.add(149.0);
		collection.add(140.0);
		collection.add(42.0);
		collection.add(141.0);
		collection.add(43.0);
		collection.add(41.0);
		collection.add(143.0);
		collection.add(126.0);
		collection.add(151.0);
		collection.add(181.0);
		collection.add(157.0);
		collection.add(198.0);
		collection.add(176.0);
		collection.add(2.0);
		collection.add(193.0);
		collection.add(16.0);
		collection.add(71.0);
		collection.add(121.0);
		collection.add(15.0);
		collection.add(108.0);
		collection.add(44.0);
		collection.add(41.0);
		collection.add(158.0);
		collection.add(88.0);
		collection.add(83.0);
		collection.add(59.0);
		collection.add(63.0);
		collection.add(92.0);
		collection.add(64.0);
		collection.add(82.0);
		collection.add(26.0);
		collection.add(50.0);
		collection.add(109.0);
		collection.add(42.0);
		collection.add(14.0);
		collection.add(12.0);
		collection.add(28.0);
		collection.add(121.0);
		collection.add(20.0);
		collection.add(58.0);
		collection.add(154.0);
		collection.add(159.0);
		collection.add(188.0);
		collection.add(113.0);
		collection.add(159.0);
		collection.add(25.0);
		collection.add(36.0);
		collection.add(99.0);
		collection.add(71.0);
		collection.add(69.0);
		collection.add(80.0);
		collection.add(134.0);
		collection.add(116.0);
		collection.add(35.0);
		collection.add(77.0);
		collection.add(88.0);
		collection.add(115.0);
		collection.add(69.0);
		collection.add(183.0);
		collection.add(102.0);
		collection.add(4.0);
		collection.add(139.0);
		collection.add(157.0);
		collection.add(16.0);
		collection.add(81.0);
		collection.add(187.0);
		collection.add(153.0);
		collection.add(36.0);
		collection.add(140.0);
		collection.add(90.0);
		collection.add(79.0);
		collection.add(110.0);
		collection.add(6.0);
		collection.add(54.0);
		collection.add(64.0);
		collection.add(44.0);
		collection.add(181.0);
		collection.add(137.0);
		collection.add(40.0);
		collection.add(25.0);
		collection.add(117.0);
		collection.add(166.0);
		collection.add(46.0);
		collection.add(82.0);
		collection.add(46.0);
		collection.add(85.0);
		collection.add(6.0);
		collection.add(80.0);
		collection.add(70.0);
		collection.add(114.0);
		collection.add(136.0);
		collection.add(20.0);
		collection.add(134.0);
		collection.add(44.0);
		collection.add(127.0);
		collection.add(54.0);
		collection.add(149.0);
		collection.add(109.0);
		collection.add(124.0);
		collection.add(17.0);
		collection.add(142.0);
		collection.add(155.0);
		collection.add(149.0);
		collection.add(149.0);
		collection.add(89.0);
		collection.add(10.0);
		collection.add(14.0);
		collection.add(112.0);
		collection.add(101.0);
		collection.add(19.0);
		collection.add(25.0);
		collection.add(31.0);
		collection.add(195.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=5)
	@Measurement(time=5,iterations=30)
	public void JTreeSet(Blackhole bh) {
		collection.toArray(new Double[] {169.0,143.0,173.0,119.0,68.0,184.0,180.0});
		bh.consume(collection.remove(116.0));
		bh.consume(collection.contains(18.0));
		collection.toArray(new Double[] {116.0,57.0,7.0,67.0,33.0,109.0,179.0,59.0});
		bh.consume(collection.remove(64.0));
		collection.toArray(new Double[] {48.0,42.0,87.0,148.0,143.0,151.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(200.0,44.0,155.0,6.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(81.0,29.0,138.0,196.0,194.0,171.0,54.0)));
		collection.toArray(new Double[] {174.0,56.0,14.0,74.0,184.0});
		bh.consume(collection.remove(105.0));
		collection.toArray(new Double[] {62.0,13.0,10.0,190.0,200.0,16.0});
		collection.toArray(new Double[] {94.0,155.0,199.0,91.0,121.0,116.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(27.0,126.0,157.0,20.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(32.0,121.0,66.0,11.0,194.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,11.0,83.0)));
		bh.consume(collection.remove(83.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,90.0,115.0,108.0,3.0,38.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(9.0,96.0,173.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(185.0,112.0,19.0,140.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,135.0,151.0,88.0,137.0,110.0,110.0,161.0)));
		collection.toArray(new Double[] {3.0,96.0,19.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(90.0,141.0,110.0)));
		bh.consume(collection.contains(180.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(16.0,66.0,160.0,60.0,173.0,8.0,85.0,178.0,88.0)));
		collection.toArray(new Double[] {42.0,19.0,169.0,48.0,111.0,126.0,91.0,167.0,152.0});
		bh.consume(collection.remove(98.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,65.0,188.0,157.0,75.0,200.0,36.0)));
		bh.consume(collection.add(20.0));
		bh.consume(collection.add(113.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(103.0,152.0,56.0,191.0,77.0,175.0,161.0)));
		bh.consume(collection.remove(55.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(23.0,172.0,11.0,3.0,119.0,51.0,68.0)));
		collection.toArray(new Double[] {32.0,118.0,53.0,189.0,175.0,159.0});
		bh.consume(collection.remove(37.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(104.0,77.0,47.0,195.0,64.0,51.0,40.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(92.0,30.0,130.0,184.0,117.0,84.0,159.0,34.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,193.0,194.0,100.0,170.0,64.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(73.0,58.0,114.0,30.0,18.0,75.0,48.0,31.0)));
		bh.consume(collection.add(173.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(20.0,147.0,184.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,72.0,23.0,24.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(115.0,91.0,133.0,39.0,197.0,145.0)));
		bh.consume(collection.add(129.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(12.0,136.0,18.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,69.0,146.0,41.0,193.0,54.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,11.0,62.0,174.0,121.0,74.0,18.0,111.0)));
		collection.toArray(new Double[] {186.0,139.0,103.0,145.0,113.0,45.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(76.0,130.0,146.0)));
		collection.toArray(new Double[] {59.0,95.0,77.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(113.0,41.0,102.0,51.0,35.0,73.0,183.0,57.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(92.0,34.0,43.0,198.0)));
		bh.consume(collection.remove(69.0));
		collection.toArray(new Double[] {30.0,163.0,196.0,188.0,12.0});
		collection.toArray(new Double[] {10.0,171.0,141.0,108.0,83.0,1.0});
		bh.consume(collection.contains(114.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(20.0,136.0,179.0,117.0,162.0,155.0,37.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(63.0,75.0,130.0,162.0,93.0,49.0,162.0,40.0)));
		collection.toArray(new Double[] {112.0,140.0,68.0,62.0});
		collection.toArray(new Double[] {140.0,53.0,164.0,6.0,45.0,196.0,43.0});
		collection.toArray(new Double[] {72.0,29.0,179.0,82.0,161.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,122.0,142.0,125.0)));
		collection.toArray(new Double[] {43.0,125.0,11.0,63.0});
		bh.consume(collection.add(114.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(142.0,92.0,84.0,122.0,57.0,72.0)));
		bh.consume(collection.remove(122.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,19.0,4.0)));
		bh.consume(collection.contains(136.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(117.0,176.0,122.0,71.0,169.0,178.0,139.0)));
		collection.toArray(new Double[] {156.0,150.0,166.0,49.0,169.0,94.0,195.0,71.0,13.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(73.0,43.0,59.0,45.0,143.0,24.0,107.0,101.0,47.0)));
		collection.toArray(new Double[] {25.0,120.0,92.0,140.0,191.0});
		collection.toArray(new Double[] {93.0,194.0,99.0,143.0,69.0,43.0,36.0,152.0,31.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(58.0,198.0,198.0,80.0,154.0,154.0,19.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(168.0,33.0,175.0,83.0,157.0,32.0,170.0)));
		bh.consume(collection.add(130.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,194.0,186.0,26.0)));
		bh.consume(collection.remove(169.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(126.0,185.0,120.0,150.0)));
		bh.consume(collection.add(170.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(92.0,73.0,110.0,59.0,36.0,90.0,30.0,11.0,26.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,154.0,11.0,152.0,60.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(166.0,24.0,197.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(96.0,19.0,39.0,187.0,139.0,36.0,52.0,46.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,126.0,167.0,63.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(78.0,7.0,146.0,183.0,161.0,30.0)));
		collection.toArray(new Double[] {132.0,86.0,24.0,87.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(73.0,20.0,72.0,192.0,64.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(6.0,107.0,150.0,82.0,117.0,100.0,145.0,11.0,79.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(48.0,148.0,108.0,75.0,139.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,8.0,197.0,150.0,92.0,18.0,64.0)));
		bh.consume(collection.remove(71.0));
		bh.consume(collection.contains(100.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,131.0,54.0,18.0,117.0,125.0,187.0,9.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(19.0,198.0,149.0,8.0,105.0,134.0,102.0,179.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(53.0,199.0,14.0,190.0,153.0,75.0)));
		bh.consume(collection.add(114.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(107.0,40.0,13.0,99.0,140.0,55.0,191.0,20.0,125.0)));
		bh.consume(collection.remove(56.0));
		collection.toArray(new Double[] {37.0,182.0,176.0,182.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(76.0,14.0,200.0,13.0,177.0,186.0)));
		bh.consume(collection.remove(44.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(61.0,5.0,56.0,17.0,200.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,157.0,176.0,55.0,1.0,82.0)));
		bh.consume(collection.contains(159.0));
		bh.consume(collection.contains(165.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,107.0,139.0,55.0,193.0,170.0,94.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(134.0,104.0,46.0,67.0,14.0,9.0,180.0,1.0,180.0)));
		bh.consume(collection.remove(82.0));
		bh.consume(collection.remove(73.0));
		bh.consume(collection.contains(192.0));
		collection.toArray(new Double[] {200.0,130.0,104.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(116.0,18.0,151.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(5.0,157.0,99.0,101.0,121.0,3.0,38.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,100.0,164.0,51.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,187.0,31.0,106.0,25.0,155.0)));
		collection.toArray(new Double[] {190.0,11.0,35.0,185.0,150.0,61.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,158.0,149.0,2.0,1.0,124.0,117.0,88.0,34.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(80.0,82.0,158.0,68.0,170.0,131.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,151.0,109.0,5.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(93.0,13.0,16.0,72.0,177.0,2.0,7.0,54.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(155.0,30.0,127.0,6.0,40.0)));
		collection.toArray(new Double[] {94.0,157.0,63.0,153.0,109.0,133.0,86.0,138.0});
		bh.consume(collection.contains(29.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(159.0,20.0,187.0,135.0,88.0,163.0,14.0)));
		collection.toArray(new Double[] {92.0,89.0,172.0,86.0,136.0,173.0,85.0,155.0});
		bh.consume(collection.contains(31.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,107.0,88.0,115.0,20.0,94.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(133.0,90.0,71.0,36.0,94.0,180.0,34.0,5.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(112.0,157.0,101.0,77.0)));
		bh.consume(collection.remove(94.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(17.0,24.0,97.0,51.0)));
		collection.toArray(new Double[] {145.0,142.0,84.0,188.0,19.0,145.0,16.0});
		collection.toArray(new Double[] {40.0,81.0,147.0});
		bh.consume(collection.remove(31.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(60.0,69.0,137.0)));
		bh.consume(collection.contains(164.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(195.0,65.0,51.0,112.0,75.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,142.0,110.0,32.0,35.0,52.0,141.0,63.0,72.0)));
		bh.consume(collection.contains(117.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,77.0,172.0,171.0)));
		bh.consume(collection.remove(115.0));
		bh.consume(collection.contains(149.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,68.0,63.0)));
		bh.consume(collection.remove(80.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,80.0,12.0,184.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,12.0,52.0,22.0,7.0)));
		collection.toArray(new Double[] {200.0,178.0,176.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(45.0,29.0,195.0,136.0,63.0,134.0,200.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(182.0,189.0,166.0,1.0,127.0)));
		collection.toArray(new Double[] {99.0,18.0,135.0,94.0,180.0,44.0,188.0,175.0});
		bh.consume(collection.remove(159.0));
		collection.toArray(new Double[] {110.0,102.0,142.0,194.0,134.0});
		collection.toArray(new Double[] {102.0,79.0,124.0,56.0});
		collection.toArray(new Double[] {41.0,100.0,197.0,34.0});
		bh.consume(collection.add(101.0));
		collection.toArray(new Double[] {191.0,153.0,60.0,127.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(169.0,128.0,12.0,107.0,4.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,19.0,166.0,38.0,119.0,14.0,98.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(12.0,8.0,140.0,162.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,5.0,14.0,31.0)));
		bh.consume(collection.contains(185.0));
		bh.consume(collection.remove(36.0));
		bh.consume(collection.contains(156.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(179.0,94.0,33.0,154.0,180.0,97.0,72.0)));
		collection.toArray(new Double[] {104.0,184.0,132.0,72.0});
		bh.consume(collection.contains(142.0));
		bh.consume(collection.remove(76.0));
		bh.consume(collection.remove(102.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(150.0,31.0,187.0,163.0,143.0,184.0)));
		collection.toArray(new Double[] {47.0,107.0,112.0,141.0,73.0,45.0,74.0,78.0});
		collection.toArray(new Double[] {40.0,8.0,71.0,60.0,190.0,78.0,106.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(104.0,176.0,27.0,46.0,97.0,181.0)));
		bh.consume(collection.contains(4.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,5.0,126.0)));
		bh.consume(collection.remove(185.0));
		bh.consume(collection.remove(77.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,155.0,111.0,132.0,191.0,193.0,148.0,136.0)));
		bh.consume(collection.remove(138.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(67.0,34.0,199.0,54.0,170.0,134.0,46.0)));
		bh.consume(collection.contains(39.0));
		collection.toArray(new Double[] {11.0,162.0,132.0,37.0,169.0,138.0,34.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(132.0,93.0,67.0,164.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(45.0,15.0,81.0,146.0,140.0)));
		collection.toArray(new Double[] {147.0,52.0,38.0,59.0});
		collection.toArray(new Double[] {114.0,74.0,68.0,96.0,158.0,40.0,112.0,51.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(76.0,12.0,92.0)));
		collection.toArray(new Double[] {96.0,98.0,58.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(110.0,193.0,195.0,182.0,135.0,84.0,9.0,12.0,91.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(199.0,8.0,2.0,159.0)));
		bh.consume(collection.add(116.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,85.0,124.0,64.0,149.0,143.0,94.0,73.0,171.0)));
		bh.consume(collection.remove(4.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,128.0,144.0,159.0,1.0,83.0,123.0,75.0,114.0)));
		bh.consume(collection.add(29.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(83.0,150.0,94.0,1.0,194.0,45.0,12.0,102.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(109.0,12.0,114.0,176.0)));
		bh.consume(collection.remove(99.0));
		bh.consume(collection.remove(102.0));
		bh.consume(collection.contains(74.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(165.0,69.0,48.0,140.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(62.0,39.0,129.0,136.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(148.0,91.0,143.0,134.0,47.0)));
		collection.toArray(new Double[] {63.0,54.0,154.0,63.0,149.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(163.0,171.0,190.0,95.0,15.0,68.0,56.0,118.0)));
		collection.toArray(new Double[] {35.0,191.0,50.0,64.0,88.0,170.0,191.0,150.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(197.0,9.0,195.0)));
		bh.consume(collection.add(72.0));
		collection.toArray(new Double[] {77.0,108.0,16.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,156.0,24.0,138.0,75.0,59.0)));
		bh.consume(collection.add(72.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,101.0,73.0,24.0,54.0,78.0,149.0,89.0)));
		bh.consume(collection.contains(168.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,51.0,190.0,157.0,153.0,150.0,117.0,160.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(33.0,128.0,169.0,179.0,159.0,175.0,58.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(188.0,190.0,115.0,127.0,23.0,53.0,107.0,74.0)));
		collection.toArray(new Double[] {165.0,154.0,184.0,17.0,61.0,134.0});
		bh.consume(collection.remove(107.0));
		bh.consume(collection.contains(123.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(60.0,93.0,46.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(137.0,117.0,51.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(22.0,105.0,94.0,62.0,36.0,162.0,48.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(61.0,111.0,89.0,170.0,25.0,59.0,11.0,108.0,114.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(59.0,176.0,90.0)));
		bh.consume(collection.contains(119.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(170.0,151.0,66.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(171.0,20.0,50.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(74.0,156.0,185.0,61.0,195.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(19.0,25.0,163.0,153.0,33.0,75.0)));
		collection.toArray(new Double[] {157.0,150.0,129.0,12.0,183.0,61.0,85.0,77.0});
		bh.consume(collection.contains(187.0));
		bh.consume(collection.remove(34.0));
		bh.consume(collection.contains(134.0));
		bh.consume(collection.remove(154.0));
		collection.toArray(new Double[] {156.0,111.0,55.0,22.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(188.0,195.0,14.0)));
		bh.consume(collection.remove(68.0));
		collection.toArray(new Double[] {120.0,118.0,13.0,200.0,105.0,16.0,5.0,168.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(90.0,16.0,175.0,97.0,38.0)));
		collection.toArray(new Double[] {165.0,9.0,158.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(152.0,58.0,167.0,99.0,60.0,161.0,78.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(182.0,131.0,100.0,37.0,42.0)));
		collection.toArray(new Double[] {163.0,82.0,73.0,198.0,26.0,39.0,55.0,154.0,69.0});
		bh.consume(collection.contains(51.0));
		bh.consume(collection.remove(48.0));
		collection.toArray(new Double[] {131.0,126.0,159.0,80.0,73.0,12.0,128.0,41.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(91.0,200.0,114.0,27.0,76.0,75.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(113.0,68.0,91.0,42.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,121.0,186.0,84.0,150.0,6.0)));
		collection.toArray(new Double[] {130.0,147.0,6.0,141.0,88.0,194.0,29.0,118.0,154.0});
		bh.consume(collection.remove(59.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(141.0,9.0,4.0,96.0,84.0,61.0,59.0,106.0,30.0)));
		bh.consume(collection.add(74.0));
		bh.consume(collection.add(165.0));
		collection.toArray(new Double[] {41.0,88.0,25.0,30.0,100.0});
		bh.consume(collection.remove(131.0));
		collection.toArray(new Double[] {123.0,153.0,196.0,164.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(41.0,4.0,143.0,85.0)));
		collection.toArray(new Double[] {163.0,92.0,81.0,96.0,46.0,161.0,184.0,199.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(25.0,34.0,184.0,149.0,102.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(36.0,34.0,160.0,40.0)));
		collection.toArray(new Double[] {49.0,151.0,186.0,142.0,89.0});
		collection.toArray(new Double[] {87.0,143.0,176.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(8.0,32.0,179.0,28.0)));
		collection.toArray(new Double[] {151.0,69.0,107.0,11.0,184.0,157.0,73.0});
		bh.consume(collection.remove(92.0));
		collection.toArray(new Double[] {25.0,77.0,94.0,147.0,57.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(74.0,89.0,166.0,56.0,117.0,132.0,8.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(139.0,113.0,67.0,130.0,142.0,154.0,169.0)));
		bh.consume(collection.contains(151.0));
		collection.toArray(new Double[] {6.0,104.0,74.0,143.0,115.0,177.0,15.0,120.0,66.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(57.0,66.0,133.0,36.0,37.0,45.0,163.0,139.0,11.0)));
		collection.toArray(new Double[] {164.0,102.0,120.0,84.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,43.0,95.0,97.0,65.0,120.0,24.0)));
		collection.toArray(new Double[] {172.0,147.0,89.0,92.0,176.0,112.0,124.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(200.0,120.0,131.0)));
		bh.consume(collection.remove(48.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(100.0,32.0,199.0,54.0,77.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(97.0,166.0,28.0,24.0,167.0,51.0)));
		collection.toArray(new Double[] {150.0,37.0,113.0,174.0,141.0,22.0,196.0,151.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,86.0,83.0,147.0)));
		bh.consume(collection.remove(26.0));
		bh.consume(collection.remove(89.0));
		bh.consume(collection.contains(68.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(158.0,83.0,147.0,51.0)));
		bh.consume(collection.remove(64.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(152.0,6.0,160.0,91.0,77.0)));
		bh.consume(collection.contains(132.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,50.0,100.0,111.0,56.0,107.0,101.0,98.0)));
		bh.consume(collection.remove(108.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(192.0,174.0,19.0,194.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(167.0,98.0,68.0,61.0,186.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(54.0,130.0,143.0,135.0,164.0,191.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,53.0,181.0,116.0,185.0,89.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,147.0,142.0,79.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,22.0,171.0,145.0,156.0,94.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(160.0,200.0,158.0,199.0,59.0,8.0)));
		bh.consume(collection.remove(131.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(109.0,63.0,63.0,65.0,134.0,56.0,99.0,168.0,166.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,124.0,27.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(93.0,107.0,104.0,82.0,56.0)));
		collection.toArray(new Double[] {130.0,151.0,34.0,152.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(17.0,26.0,74.0)));
		collection.toArray(new Double[] {107.0,127.0,188.0,109.0,18.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,98.0,159.0,2.0,147.0,31.0,28.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(120.0,57.0,41.0,188.0,51.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,111.0,79.0,186.0,86.0,149.0,138.0,124.0,121.0)));
		bh.consume(collection.add(95.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,142.0,7.0,90.0,166.0,119.0)));
		collection.toArray(new Double[] {73.0,173.0,10.0,26.0,190.0,98.0,158.0,17.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,121.0,190.0,140.0,174.0,137.0,156.0,124.0,17.0)));
		bh.consume(collection.contains(136.0));
		collection.toArray(new Double[] {144.0,76.0,120.0,34.0,116.0,80.0,40.0,158.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(12.0,116.0,161.0)));
		bh.consume(collection.remove(93.0));
		bh.consume(collection.remove(65.0));
		bh.consume(collection.remove(11.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(102.0,31.0,111.0,150.0,78.0,86.0,180.0,174.0)));
		bh.consume(collection.remove(109.0));
		collection.toArray(new Double[] {128.0,13.0,160.0,89.0,149.0,148.0,130.0});
		collection.toArray(new Double[] {72.0,39.0,145.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(27.0,1.0,117.0,101.0,113.0,103.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(49.0,176.0,44.0,166.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,174.0,169.0,4.0,70.0,54.0,200.0,105.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(83.0,67.0,157.0)));
		collection.toArray(new Double[] {143.0,152.0,5.0,124.0,137.0,159.0,133.0,99.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(70.0,39.0,120.0,28.0,57.0,12.0,17.0)));
		bh.consume(collection.remove(109.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(110.0,21.0,21.0,104.0,46.0,6.0,51.0,91.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,29.0,173.0,165.0)));
		collection.toArray(new Double[] {52.0,86.0,60.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(62.0,22.0,67.0,62.0)));
		collection.toArray(new Double[] {136.0,54.0,149.0,26.0,103.0,45.0,195.0,158.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(113.0,106.0,99.0,69.0,134.0,142.0,49.0,184.0)));
		collection.toArray(new Double[] {90.0,14.0,140.0,77.0,70.0,26.0});
		collection.toArray(new Double[] {89.0,184.0,38.0,138.0});
		bh.consume(collection.remove(71.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(135.0,194.0,193.0,133.0,38.0)));
		bh.consume(collection.remove(75.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,17.0,108.0,139.0,145.0,77.0,83.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,111.0,140.0,5.0,69.0,156.0)));
		collection.toArray(new Double[] {89.0,100.0,145.0,58.0,84.0,130.0});
		bh.consume(collection.remove(109.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(84.0,193.0,54.0,200.0,131.0,146.0,200.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(34.0,83.0,184.0,182.0,50.0,58.0,143.0,68.0,25.0)));
		bh.consume(collection.add(129.0));
		bh.consume(collection.remove(151.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(136.0,105.0,152.0,186.0,131.0,98.0,188.0,106.0)));
		bh.consume(collection.remove(193.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(140.0,151.0,70.0,88.0,159.0,82.0,80.0,164.0,172.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(102.0,37.0,135.0,41.0,124.0,162.0,147.0,192.0)));
		bh.consume(collection.remove(19.0));
		bh.consume(collection.remove(2.0));
		bh.consume(collection.remove(108.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,79.0,148.0,123.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(159.0,165.0,184.0,166.0,72.0,90.0,164.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(10.0,121.0,78.0,126.0,193.0,51.0,152.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,41.0,22.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(38.0,194.0,149.0,28.0,106.0,91.0,2.0)));
		collection.toArray(new Double[] {3.0,131.0,113.0,16.0,153.0,176.0,164.0,4.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(94.0,77.0,128.0,91.0)));
		bh.consume(collection.remove(163.0));
		bh.consume(collection.contains(170.0));
		bh.consume(collection.remove(90.0));
		bh.consume(collection.contains(191.0));
		bh.consume(collection.remove(3.0));
		bh.consume(collection.remove(4.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(84.0,43.0,151.0,35.0,38.0,84.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(53.0,49.0,138.0,19.0,10.0,76.0,168.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(137.0,21.0,99.0,89.0,168.0,132.0,23.0,39.0)));
		collection.toArray(new Double[] {168.0,29.0,49.0,157.0,47.0,110.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(180.0,147.0,91.0)));
		bh.consume(collection.contains(158.0));
		bh.consume(collection.add(36.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(111.0,66.0,110.0,40.0,45.0,183.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(18.0,78.0,117.0,105.0,17.0,45.0,8.0,177.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(167.0,27.0,149.0,182.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(184.0,78.0,82.0,58.0,200.0,84.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(171.0,18.0,189.0,80.0,163.0,51.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(15.0,11.0,167.0,172.0,120.0,10.0,33.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,68.0,197.0,158.0,72.0,112.0)));
		bh.consume(collection.contains(161.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(12.0,94.0,32.0,115.0,120.0,70.0)));
		bh.consume(collection.add(75.0));
		collection.toArray(new Double[] {51.0,101.0,79.0,128.0,200.0,19.0,31.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(112.0,131.0,121.0,119.0)));
		bh.consume(collection.remove(138.0));
		collection.toArray(new Double[] {104.0,167.0,125.0,199.0,32.0,123.0,97.0,45.0});
		collection.toArray(new Double[] {162.0,112.0,35.0});
		collection.toArray(new Double[] {172.0,149.0,169.0});
		collection.toArray(new Double[] {42.0,6.0,132.0,78.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(4.0,33.0,95.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,112.0,99.0,121.0,141.0,73.0,192.0)));
		collection.toArray(new Double[] {174.0,117.0,183.0});
		bh.consume(collection.remove(7.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,28.0,8.0,60.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(80.0,108.0,146.0,197.0,47.0)));
		collection.toArray(new Double[] {170.0,187.0,160.0,82.0,12.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(83.0,179.0,51.0,168.0,32.0,30.0,55.0,157.0,119.0)));
		bh.consume(collection.remove(111.0));
		bh.consume(collection.add(96.0));
		collection.toArray(new Double[] {25.0,155.0,159.0,125.0,28.0,54.0,173.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(105.0,74.0,166.0,77.0,147.0,10.0,96.0,1.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(37.0,83.0,76.0,159.0,99.0,171.0,18.0,57.0)));
		collection.toArray(new Double[] {133.0,56.0,144.0,41.0});
		bh.consume(collection.remove(154.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(3.0,77.0,90.0,118.0,51.0,90.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(102.0,67.0,187.0,92.0,191.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(177.0,198.0,48.0,125.0,8.0,133.0,200.0)));
		collection.toArray(new Double[] {44.0,12.0,130.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(165.0,48.0,92.0,31.0,73.0,52.0,155.0,147.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(192.0,123.0,50.0,173.0,109.0,157.0,137.0,123.0,140.0)));
		bh.consume(collection.contains(161.0));
		bh.consume(collection.remove(142.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,57.0,97.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(96.0,66.0,188.0,162.0,113.0,98.0,190.0,37.0,67.0)));
		bh.consume(collection.contains(10.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,78.0,134.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,173.0,62.0,95.0)));
		collection.toArray(new Double[] {116.0,18.0,54.0,116.0});
		collection.toArray(new Double[] {149.0,119.0,38.0,129.0,9.0,60.0});
		collection.toArray(new Double[] {114.0,27.0,93.0,128.0,83.0,104.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(108.0,120.0,168.0,49.0,168.0,129.0,132.0)));
		collection.toArray(new Double[] {188.0,153.0,194.0,197.0,183.0,158.0,110.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,65.0,176.0)));
		collection.toArray(new Double[] {76.0,156.0,79.0,19.0,13.0,87.0,150.0,170.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,112.0,126.0,74.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(13.0,118.0,67.0,130.0,113.0,17.0)));
		bh.consume(collection.remove(102.0));
		bh.consume(collection.remove(56.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(147.0,164.0,135.0,149.0,128.0)));
		bh.consume(collection.contains(163.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(26.0,75.0,136.0,98.0,87.0,137.0,53.0)));
		bh.consume(collection.remove(86.0));
		collection.toArray(new Double[] {124.0,120.0,158.0,9.0,62.0,160.0,112.0,87.0,22.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(60.0,57.0,194.0,175.0,85.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(198.0,45.0,78.0,112.0)));
		bh.consume(collection.contains(114.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,178.0,110.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(38.0,137.0,129.0,69.0)));
		bh.consume(collection.remove(129.0));
		bh.consume(collection.contains(43.0));
		collection.toArray(new Double[] {82.0,189.0,167.0});
		bh.consume(collection.remove(50.0));
		bh.consume(collection.remove(59.0));
		bh.consume(collection.remove(172.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(121.0,62.0,23.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(4.0,88.0,153.0)));
		collection.toArray(new Double[] {42.0,87.0,184.0,140.0,182.0,156.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(85.0,103.0,89.0,133.0,159.0,125.0,127.0)));
		collection.toArray(new Double[] {77.0,68.0,15.0,141.0,36.0,180.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(71.0,80.0,183.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(149.0,174.0,110.0,170.0,103.0,159.0,87.0,136.0)));
		bh.consume(collection.contains(57.0));
		bh.consume(collection.remove(27.0));
		bh.consume(collection.remove(50.0));
		collection.toArray(new Double[] {118.0,68.0,63.0,6.0,167.0});
		collection.toArray(new Double[] {149.0,154.0,120.0,115.0,99.0,157.0,17.0,95.0,97.0});
		collection.toArray(new Double[] {149.0,175.0,185.0,9.0,61.0,60.0,16.0,47.0,198.0});
		bh.consume(collection.remove(46.0));
		collection.toArray(new Double[] {105.0,75.0,38.0,190.0,74.0,36.0,113.0,125.0});
		collection.toArray(new Double[] {44.0,110.0,137.0,181.0,66.0,110.0,7.0,29.0,134.0});
		bh.consume(collection.remove(133.0));
		bh.consume(collection.contains(95.0));
		collection.toArray(new Double[] {16.0,155.0,78.0,85.0,147.0});
		collection.toArray(new Double[] {108.0,45.0,106.0,142.0,110.0,2.0,90.0,200.0});
		bh.consume(collection.remove(151.0));
		bh.consume(collection.remove(52.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(54.0,6.0,6.0,29.0,15.0,122.0,132.0)));
		bh.consume(collection.remove(52.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(10.0,169.0,115.0,169.0,40.0)));
		bh.consume(collection.remove(100.0));
		collection.toArray(new Double[] {18.0,164.0,150.0,46.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(166.0,71.0,190.0,162.0,108.0)));
		collection.toArray(new Double[] {30.0,21.0,168.0,25.0,117.0,118.0,148.0,85.0,105.0});
		bh.consume(collection.remove(95.0));
		bh.consume(collection.contains(113.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(162.0,67.0,27.0,56.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(23.0,81.0,86.0,118.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(83.0,190.0,1.0,40.0)));
		collection.toArray(new Double[] {134.0,119.0,141.0,37.0,128.0,176.0,154.0,44.0,40.0});
		bh.consume(collection.remove(173.0));
		bh.consume(collection.contains(165.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(159.0,128.0,14.0)));
		bh.consume(collection.remove(27.0));
		bh.consume(collection.remove(94.0));
		collection.toArray(new Double[] {188.0,67.0,100.0,99.0,124.0,102.0,97.0,157.0});
		collection.toArray(new Double[] {131.0,172.0,116.0,151.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(23.0,125.0,59.0,17.0,64.0,78.0,70.0,129.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(38.0,154.0,12.0,176.0,98.0,18.0,133.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(6.0,23.0,117.0,18.0,133.0,102.0,11.0)));
		collection.toArray(new Double[] {166.0,9.0,160.0,95.0,72.0,105.0,4.0,175.0,199.0});
		collection.toArray(new Double[] {117.0,79.0,115.0,3.0,43.0,52.0,164.0,193.0,171.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(166.0,124.0,37.0,151.0)));
		collection.toArray(new Double[] {177.0,5.0,74.0,192.0,183.0,166.0,152.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(103.0,29.0,32.0,38.0)));
		collection.toArray(new Double[] {108.0,46.0,60.0,139.0,90.0,93.0,177.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(127.0,97.0,107.0,16.0,71.0)));
		collection.toArray(new Double[] {147.0,76.0,19.0,124.0,34.0,172.0,47.0,175.0});
		bh.consume(collection.contains(28.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(35.0,153.0,74.0,191.0,18.0,186.0,167.0,98.0)));
	}
}
