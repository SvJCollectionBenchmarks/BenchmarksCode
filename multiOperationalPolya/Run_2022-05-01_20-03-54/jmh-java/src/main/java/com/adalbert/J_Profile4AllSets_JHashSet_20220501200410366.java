package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile4AllSets_JHashSet_20220501200410366 {
	java.util.HashSet<Double> collection = new java.util.HashSet<>();
	@Setup(Level.Invocation)
	public void setupJHashSet() {
		collection = new java.util.HashSet<>();
		collection.add(68.0);
		collection.add(150.0);
		collection.add(62.0);
		collection.add(155.0);
		collection.add(29.0);
		collection.add(196.0);
		collection.add(198.0);
		collection.add(44.0);
		collection.add(120.0);
		collection.add(96.0);
		collection.add(90.0);
		collection.add(116.0);
		collection.add(67.0);
		collection.add(74.0);
		collection.add(31.0);
		collection.add(129.0);
		collection.add(90.0);
		collection.add(70.0);
		collection.add(136.0);
		collection.add(156.0);
		collection.add(80.0);
		collection.add(117.0);
		collection.add(181.0);
		collection.add(22.0);
		collection.add(72.0);
		collection.add(70.0);
		collection.add(182.0);
		collection.add(180.0);
		collection.add(89.0);
		collection.add(88.0);
		collection.add(200.0);
		collection.add(156.0);
		collection.add(169.0);
		collection.add(20.0);
		collection.add(96.0);
		collection.add(14.0);
		collection.add(115.0);
		collection.add(119.0);
		collection.add(80.0);
		collection.add(99.0);
		collection.add(33.0);
		collection.add(34.0);
		collection.add(57.0);
		collection.add(176.0);
		collection.add(116.0);
		collection.add(72.0);
		collection.add(146.0);
		collection.add(109.0);
		collection.add(100.0);
		collection.add(49.0);
		collection.add(111.0);
		collection.add(36.0);
		collection.add(12.0);
		collection.add(132.0);
		collection.add(99.0);
		collection.add(106.0);
		collection.add(20.0);
		collection.add(153.0);
		collection.add(105.0);
		collection.add(71.0);
		collection.add(70.0);
		collection.add(186.0);
		collection.add(90.0);
		collection.add(111.0);
		collection.add(66.0);
		collection.add(141.0);
		collection.add(194.0);
		collection.add(187.0);
		collection.add(191.0);
		collection.add(42.0);
		collection.add(73.0);
		collection.add(6.0);
		collection.add(56.0);
		collection.add(48.0);
		collection.add(32.0);
		collection.add(198.0);
		collection.add(121.0);
		collection.add(184.0);
		collection.add(200.0);
		collection.add(196.0);
		collection.add(15.0);
		collection.add(181.0);
		collection.add(55.0);
		collection.add(186.0);
		collection.add(53.0);
		collection.add(26.0);
		collection.add(84.0);
		collection.add(7.0);
		collection.add(11.0);
		collection.add(92.0);
		collection.add(140.0);
		collection.add(47.0);
		collection.add(54.0);
		collection.add(21.0);
		collection.add(45.0);
		collection.add(189.0);
		collection.add(52.0);
		collection.add(155.0);
		collection.add(38.0);
		collection.add(129.0);
		collection.add(45.0);
		collection.add(90.0);
		collection.add(86.0);
		collection.add(54.0);
		collection.add(163.0);
		collection.add(139.0);
		collection.add(37.0);
		collection.add(146.0);
		collection.add(160.0);
		collection.add(44.0);
		collection.add(134.0);
		collection.add(81.0);
		collection.add(139.0);
		collection.add(48.0);
		collection.add(65.0);
		collection.add(146.0);
		collection.add(169.0);
		collection.add(119.0);
		collection.add(163.0);
		collection.add(39.0);
		collection.add(32.0);
		collection.add(195.0);
		collection.add(144.0);
		collection.add(179.0);
		collection.add(106.0);
		collection.add(15.0);
		collection.add(83.0);
		collection.add(110.0);
		collection.add(118.0);
		collection.add(20.0);
		collection.add(144.0);
		collection.add(112.0);
		collection.add(72.0);
		collection.add(57.0);
		collection.add(117.0);
		collection.add(127.0);
		collection.add(115.0);
		collection.add(132.0);
		collection.add(27.0);
		collection.add(165.0);
		collection.add(109.0);
		collection.add(117.0);
		collection.add(30.0);
		collection.add(127.0);
		collection.add(79.0);
		collection.add(37.0);
		collection.add(196.0);
		collection.add(100.0);
		collection.add(183.0);
		collection.add(105.0);
		collection.add(148.0);
		collection.add(108.0);
		collection.add(173.0);
		collection.add(130.0);
		collection.add(14.0);
		collection.add(180.0);
		collection.add(21.0);
		collection.add(106.0);
		collection.add(16.0);
		collection.add(118.0);
		collection.add(121.0);
		collection.add(125.0);
		collection.add(110.0);
		collection.add(114.0);
		collection.add(38.0);
		collection.add(122.0);
		collection.add(179.0);
		collection.add(190.0);
		collection.add(8.0);
		collection.add(85.0);
		collection.add(185.0);
		collection.add(108.0);
		collection.add(71.0);
		collection.add(54.0);
		collection.add(188.0);
		collection.add(89.0);
		collection.add(90.0);
		collection.add(4.0);
		collection.add(61.0);
		collection.add(127.0);
		collection.add(110.0);
		collection.add(131.0);
		collection.add(31.0);
		collection.add(40.0);
		collection.add(173.0);
		collection.add(106.0);
		collection.add(5.0);
		collection.add(19.0);
		collection.add(165.0);
		collection.add(15.0);
		collection.add(124.0);
		collection.add(24.0);
		collection.add(88.0);
		collection.add(138.0);
		collection.add(134.0);
		collection.add(114.0);
		collection.add(113.0);
		collection.add(38.0);
		collection.add(125.0);
		collection.add(96.0);
		collection.add(20.0);
		collection.add(72.0);
		collection.add(139.0);
		collection.add(101.0);
		collection.add(124.0);
		collection.add(172.0);
		collection.add(81.0);
		collection.add(41.0);
		collection.add(109.0);
		collection.add(157.0);
		collection.add(110.0);
		collection.add(46.0);
		collection.add(82.0);
		collection.add(92.0);
		collection.add(28.0);
		collection.add(52.0);
		collection.add(103.0);
		collection.add(59.0);
		collection.add(174.0);
		collection.add(74.0);
		collection.add(6.0);
		collection.add(20.0);
		collection.add(157.0);
		collection.add(124.0);
		collection.add(32.0);
		collection.add(143.0);
		collection.add(160.0);
		collection.add(111.0);
		collection.add(161.0);
		collection.add(36.0);
		collection.add(90.0);
		collection.add(182.0);
		collection.add(154.0);
		collection.add(100.0);
		collection.add(11.0);
		collection.add(13.0);
		collection.add(104.0);
		collection.add(112.0);
		collection.add(149.0);
		collection.add(156.0);
		collection.add(145.0);
		collection.add(40.0);
		collection.add(79.0);
		collection.add(27.0);
		collection.add(174.0);
		collection.add(148.0);
		collection.add(149.0);
		collection.add(149.0);
		collection.add(20.0);
		collection.add(166.0);
		collection.add(11.0);
		collection.add(149.0);
		collection.add(197.0);
		collection.add(99.0);
		collection.add(183.0);
		collection.add(100.0);
		collection.add(148.0);
		collection.add(177.0);
		collection.add(75.0);
		collection.add(169.0);
		collection.add(20.0);
		collection.add(88.0);
		collection.add(113.0);
		collection.add(174.0);
		collection.add(66.0);
		collection.add(114.0);
		collection.add(193.0);
		collection.add(28.0);
		collection.add(135.0);
		collection.add(81.0);
		collection.add(193.0);
		collection.add(105.0);
		collection.add(66.0);
		collection.add(32.0);
		collection.add(165.0);
		collection.add(74.0);
		collection.add(22.0);
		collection.add(179.0);
		collection.add(163.0);
		collection.add(184.0);
		collection.add(156.0);
		collection.add(29.0);
		collection.add(94.0);
		collection.add(168.0);
		collection.add(50.0);
		collection.add(2.0);
		collection.add(23.0);
		collection.add(152.0);
		collection.add(10.0);
		collection.add(82.0);
		collection.add(58.0);
		collection.add(137.0);
		collection.add(192.0);
		collection.add(57.0);
		collection.add(124.0);
		collection.add(153.0);
		collection.add(61.0);
		collection.add(42.0);
		collection.add(200.0);
		collection.add(174.0);
		collection.add(157.0);
		collection.add(50.0);
		collection.add(129.0);
		collection.add(132.0);
		collection.add(126.0);
		collection.add(75.0);
		collection.add(149.0);
		collection.add(118.0);
		collection.add(13.0);
		collection.add(24.0);
		collection.add(157.0);
		collection.add(133.0);
		collection.add(96.0);
		collection.add(197.0);
		collection.add(196.0);
		collection.add(197.0);
		collection.add(28.0);
		collection.add(166.0);
		collection.add(66.0);
		collection.add(154.0);
		collection.add(158.0);
		collection.add(70.0);
		collection.add(28.0);
		collection.add(176.0);
		collection.add(12.0);
		collection.add(142.0);
		collection.add(81.0);
		collection.add(9.0);
		collection.add(180.0);
		collection.add(165.0);
		collection.add(27.0);
		collection.add(24.0);
		collection.add(69.0);
		collection.add(76.0);
		collection.add(197.0);
		collection.add(156.0);
		collection.add(12.0);
		collection.add(36.0);
		collection.add(73.0);
		collection.add(71.0);
		collection.add(58.0);
		collection.add(43.0);
		collection.add(130.0);
		collection.add(35.0);
		collection.add(131.0);
		collection.add(166.0);
		collection.add(194.0);
		collection.add(173.0);
		collection.add(41.0);
		collection.add(149.0);
		collection.add(56.0);
		collection.add(108.0);
		collection.add(52.0);
		collection.add(175.0);
		collection.add(167.0);
		collection.add(67.0);
		collection.add(79.0);
		collection.add(140.0);
		collection.add(103.0);
		collection.add(155.0);
		collection.add(82.0);
		collection.add(164.0);
		collection.add(113.0);
		collection.add(145.0);
		collection.add(182.0);
		collection.add(188.0);
		collection.add(57.0);
		collection.add(162.0);
		collection.add(51.0);
		collection.add(162.0);
		collection.add(134.0);
		collection.add(113.0);
		collection.add(121.0);
		collection.add(39.0);
		collection.add(49.0);
		collection.add(100.0);
		collection.add(40.0);
		collection.add(160.0);
		collection.add(108.0);
		collection.add(53.0);
		collection.add(142.0);
		collection.add(98.0);
		collection.add(14.0);
		collection.add(117.0);
		collection.add(159.0);
		collection.add(88.0);
		collection.add(116.0);
		collection.add(62.0);
		collection.add(151.0);
		collection.add(177.0);
		collection.add(118.0);
		collection.add(111.0);
		collection.add(64.0);
		collection.add(54.0);
		collection.add(8.0);
		collection.add(88.0);
		collection.add(2.0);
		collection.add(198.0);
		collection.add(147.0);
		collection.add(167.0);
		collection.add(134.0);
		collection.add(118.0);
		collection.add(185.0);
		collection.add(133.0);
		collection.add(51.0);
		collection.add(169.0);
		collection.add(46.0);
		collection.add(143.0);
		collection.add(111.0);
		collection.add(199.0);
		collection.add(24.0);
		collection.add(54.0);
		collection.add(159.0);
		collection.add(172.0);
		collection.add(36.0);
		collection.add(30.0);
		collection.add(74.0);
		collection.add(67.0);
		collection.add(156.0);
		collection.add(102.0);
		collection.add(88.0);
		collection.add(184.0);
		collection.add(172.0);
		collection.add(5.0);
		collection.add(49.0);
		collection.add(129.0);
		collection.add(182.0);
		collection.add(169.0);
		collection.add(124.0);
		collection.add(15.0);
		collection.add(43.0);
		collection.add(187.0);
		collection.add(91.0);
		collection.add(66.0);
		collection.add(51.0);
		collection.add(172.0);
		collection.add(126.0);
		collection.add(82.0);
		collection.add(192.0);
		collection.add(53.0);
		collection.add(34.0);
		collection.add(94.0);
		collection.add(119.0);
		collection.add(45.0);
		collection.add(153.0);
		collection.add(196.0);
		collection.add(114.0);
		collection.add(26.0);
		collection.add(155.0);
		collection.add(68.0);
		collection.add(68.0);
		collection.add(145.0);
		collection.add(38.0);
		collection.add(59.0);
		collection.add(162.0);
		collection.add(38.0);
		collection.add(23.0);
		collection.add(91.0);
		collection.add(157.0);
		collection.add(97.0);
		collection.add(188.0);
		collection.add(29.0);
		collection.add(129.0);
		collection.add(84.0);
		collection.add(96.0);
		collection.add(92.0);
		collection.add(46.0);
		collection.add(44.0);
		collection.add(50.0);
		collection.add(37.0);
		collection.add(95.0);
		collection.add(2.0);
		collection.add(64.0);
		collection.add(19.0);
		collection.add(182.0);
		collection.add(60.0);
		collection.add(92.0);
		collection.add(96.0);
		collection.add(15.0);
		collection.add(55.0);
		collection.add(60.0);
		collection.add(36.0);
		collection.add(7.0);
		collection.add(187.0);
		collection.add(94.0);
		collection.add(157.0);
		collection.add(177.0);
		collection.add(57.0);
		collection.add(187.0);
		collection.add(95.0);
		collection.add(156.0);
		collection.add(64.0);
		collection.add(94.0);
		collection.add(33.0);
		collection.add(73.0);
		collection.add(59.0);
		collection.add(99.0);
		collection.add(113.0);
		collection.add(158.0);
		collection.add(84.0);
		collection.add(109.0);
		collection.add(128.0);
		collection.add(78.0);
		collection.add(30.0);
		collection.add(87.0);
		collection.add(111.0);
		collection.add(161.0);
		collection.add(143.0);
		collection.add(57.0);
		collection.add(147.0);
		collection.add(141.0);
		collection.add(55.0);
		collection.add(149.0);
		collection.add(76.0);
		collection.add(118.0);
		collection.add(94.0);
		collection.add(109.0);
		collection.add(30.0);
		collection.add(64.0);
		collection.add(114.0);
		collection.add(8.0);
		collection.add(26.0);
		collection.add(131.0);
		collection.add(117.0);
		collection.add(42.0);
		collection.add(108.0);
		collection.add(80.0);
		collection.add(68.0);
		collection.add(159.0);
		collection.add(95.0);
		collection.add(66.0);
		collection.add(176.0);
		collection.add(114.0);
		collection.add(187.0);
		collection.add(9.0);
		collection.add(149.0);
		collection.add(122.0);
		collection.add(175.0);
		collection.add(24.0);
		collection.add(181.0);
		collection.add(27.0);
		collection.add(4.0);
		collection.add(104.0);
		collection.add(35.0);
		collection.add(152.0);
		collection.add(4.0);
		collection.add(146.0);
		collection.add(185.0);
		collection.add(44.0);
		collection.add(187.0);
		collection.add(198.0);
		collection.add(11.0);
		collection.add(192.0);
		collection.add(78.0);
		collection.add(145.0);
		collection.add(78.0);
		collection.add(94.0);
		collection.add(42.0);
		collection.add(22.0);
		collection.add(51.0);
		collection.add(150.0);
		collection.add(127.0);
		collection.add(87.0);
		collection.add(12.0);
		collection.add(90.0);
		collection.add(162.0);
		collection.add(8.0);
		collection.add(18.0);
		collection.add(87.0);
		collection.add(8.0);
		collection.add(66.0);
		collection.add(161.0);
		collection.add(29.0);
		collection.add(147.0);
		collection.add(170.0);
		collection.add(108.0);
		collection.add(182.0);
		collection.add(200.0);
		collection.add(78.0);
		collection.add(14.0);
		collection.add(196.0);
		collection.add(168.0);
		collection.add(64.0);
		collection.add(37.0);
		collection.add(197.0);
		collection.add(114.0);
		collection.add(173.0);
		collection.add(18.0);
		collection.add(108.0);
		collection.add(2.0);
		collection.add(69.0);
		collection.add(139.0);
		collection.add(90.0);
		collection.add(156.0);
		collection.add(187.0);
		collection.add(27.0);
		collection.add(23.0);
		collection.add(153.0);
		collection.add(171.0);
		collection.add(25.0);
		collection.add(44.0);
		collection.add(94.0);
		collection.add(99.0);
		collection.add(182.0);
		collection.add(70.0);
		collection.add(153.0);
		collection.add(97.0);
		collection.add(139.0);
		collection.add(14.0);
		collection.add(140.0);
		collection.add(146.0);
		collection.add(102.0);
		collection.add(148.0);
		collection.add(170.0);
		collection.add(107.0);
		collection.add(61.0);
		collection.add(119.0);
		collection.add(79.0);
		collection.add(80.0);
		collection.add(188.0);
		collection.add(133.0);
		collection.add(26.0);
		collection.add(25.0);
		collection.add(179.0);
		collection.add(25.0);
		collection.add(32.0);
		collection.add(8.0);
		collection.add(2.0);
		collection.add(66.0);
		collection.add(168.0);
		collection.add(11.0);
		collection.add(189.0);
		collection.add(28.0);
		collection.add(1.0);
		collection.add(144.0);
		collection.add(79.0);
		collection.add(140.0);
		collection.add(111.0);
		collection.add(85.0);
		collection.add(85.0);
		collection.add(75.0);
		collection.add(195.0);
		collection.add(189.0);
		collection.add(118.0);
		collection.add(76.0);
		collection.add(77.0);
		collection.add(16.0);
		collection.add(165.0);
		collection.add(40.0);
		collection.add(2.0);
		collection.add(132.0);
		collection.add(184.0);
		collection.add(78.0);
		collection.add(74.0);
		collection.add(109.0);
		collection.add(96.0);
		collection.add(111.0);
		collection.add(141.0);
		collection.add(82.0);
		collection.add(171.0);
		collection.add(163.0);
		collection.add(68.0);
		collection.add(46.0);
		collection.add(103.0);
		collection.add(46.0);
		collection.add(179.0);
		collection.add(70.0);
		collection.add(72.0);
		collection.add(75.0);
		collection.add(198.0);
		collection.add(20.0);
		collection.add(5.0);
		collection.add(196.0);
		collection.add(110.0);
		collection.add(92.0);
		collection.add(185.0);
		collection.add(65.0);
		collection.add(168.0);
		collection.add(19.0);
		collection.add(156.0);
		collection.add(119.0);
		collection.add(108.0);
		collection.add(36.0);
		collection.add(15.0);
		collection.add(77.0);
		collection.add(121.0);
		collection.add(165.0);
		collection.add(91.0);
		collection.add(100.0);
		collection.add(136.0);
		collection.add(25.0);
		collection.add(40.0);
		collection.add(109.0);
		collection.add(122.0);
		collection.add(34.0);
		collection.add(181.0);
		collection.add(177.0);
		collection.add(4.0);
		collection.add(4.0);
		collection.add(63.0);
		collection.add(41.0);
		collection.add(32.0);
		collection.add(159.0);
		collection.add(24.0);
		collection.add(170.0);
		collection.add(151.0);
		collection.add(137.0);
		collection.add(130.0);
		collection.add(82.0);
		collection.add(95.0);
		collection.add(146.0);
		collection.add(121.0);
		collection.add(69.0);
		collection.add(9.0);
		collection.add(142.0);
		collection.add(199.0);
		collection.add(52.0);
		collection.add(22.0);
		collection.add(42.0);
		collection.add(32.0);
		collection.add(79.0);
		collection.add(74.0);
		collection.add(197.0);
		collection.add(131.0);
		collection.add(151.0);
		collection.add(44.0);
		collection.add(51.0);
		collection.add(166.0);
		collection.add(95.0);
		collection.add(19.0);
		collection.add(130.0);
		collection.add(165.0);
		collection.add(70.0);
		collection.add(125.0);
		collection.add(157.0);
		collection.add(172.0);
		collection.add(47.0);
		collection.add(92.0);
		collection.add(183.0);
		collection.add(172.0);
		collection.add(53.0);
		collection.add(155.0);
		collection.add(175.0);
		collection.add(187.0);
		collection.add(85.0);
		collection.add(130.0);
		collection.add(136.0);
		collection.add(91.0);
		collection.add(86.0);
		collection.add(52.0);
		collection.add(82.0);
		collection.add(34.0);
		collection.add(2.0);
		collection.add(69.0);
		collection.add(18.0);
		collection.add(133.0);
		collection.add(134.0);
		collection.add(105.0);
		collection.add(14.0);
		collection.add(170.0);
		collection.add(102.0);
		collection.add(173.0);
		collection.add(109.0);
		collection.add(174.0);
		collection.add(137.0);
		collection.add(68.0);
		collection.add(155.0);
		collection.add(197.0);
		collection.add(146.0);
		collection.add(106.0);
		collection.add(104.0);
		collection.add(15.0);
		collection.add(198.0);
		collection.add(164.0);
		collection.add(123.0);
		collection.add(99.0);
		collection.add(130.0);
		collection.add(100.0);
		collection.add(118.0);
		collection.add(109.0);
		collection.add(105.0);
		collection.add(195.0);
		collection.add(115.0);
		collection.add(6.0);
		collection.add(116.0);
		collection.add(80.0);
		collection.add(92.0);
		collection.add(39.0);
		collection.add(105.0);
		collection.add(95.0);
		collection.add(164.0);
		collection.add(25.0);
		collection.add(145.0);
		collection.add(185.0);
		collection.add(123.0);
		collection.add(104.0);
		collection.add(114.0);
		collection.add(47.0);
		collection.add(50.0);
		collection.add(64.0);
		collection.add(199.0);
		collection.add(42.0);
		collection.add(164.0);
		collection.add(130.0);
		collection.add(186.0);
		collection.add(17.0);
		collection.add(63.0);
		collection.add(193.0);
		collection.add(124.0);
		collection.add(47.0);
		collection.add(133.0);
		collection.add(42.0);
		collection.add(47.0);
		collection.add(151.0);
		collection.add(99.0);
		collection.add(5.0);
		collection.add(183.0);
		collection.add(50.0);
		collection.add(195.0);
		collection.add(67.0);
		collection.add(128.0);
		collection.add(82.0);
		collection.add(72.0);
		collection.add(84.0);
		collection.add(44.0);
		collection.add(142.0);
		collection.add(194.0);
		collection.add(49.0);
		collection.add(144.0);
		collection.add(12.0);
		collection.add(2.0);
		collection.add(191.0);
		collection.add(114.0);
		collection.add(129.0);
		collection.add(5.0);
		collection.add(183.0);
		collection.add(52.0);
		collection.add(69.0);
		collection.add(122.0);
		collection.add(124.0);
		collection.add(130.0);
		collection.add(46.0);
		collection.add(132.0);
		collection.add(143.0);
		collection.add(151.0);
		collection.add(89.0);
		collection.add(165.0);
		collection.add(176.0);
		collection.add(113.0);
		collection.add(37.0);
		collection.add(116.0);
		collection.add(18.0);
		collection.add(131.0);
		collection.add(30.0);
		collection.add(165.0);
		collection.add(64.0);
		collection.add(157.0);
		collection.add(138.0);
		collection.add(176.0);
		collection.add(154.0);
		collection.add(73.0);
		collection.add(190.0);
		collection.add(100.0);
		collection.add(97.0);
		collection.add(37.0);
		collection.add(188.0);
		collection.add(38.0);
		collection.add(16.0);
		collection.add(29.0);
		collection.add(132.0);
		collection.add(113.0);
		collection.add(43.0);
		collection.add(113.0);
		collection.add(140.0);
		collection.add(129.0);
		collection.add(6.0);
		collection.add(15.0);
		collection.add(18.0);
		collection.add(82.0);
		collection.add(20.0);
		collection.add(108.0);
		collection.add(137.0);
		collection.add(149.0);
		collection.add(160.0);
		collection.add(11.0);
		collection.add(126.0);
		collection.add(1.0);
		collection.add(152.0);
		collection.add(27.0);
		collection.add(35.0);
		collection.add(3.0);
		collection.add(124.0);
		collection.add(66.0);
		collection.add(185.0);
		collection.add(146.0);
		collection.add(10.0);
		collection.add(104.0);
		collection.add(36.0);
		collection.add(49.0);
		collection.add(189.0);
		collection.add(52.0);
		collection.add(114.0);
		collection.add(119.0);
		collection.add(167.0);
		collection.add(69.0);
		collection.add(32.0);
		collection.add(195.0);
		collection.add(6.0);
		collection.add(155.0);
		collection.add(27.0);
		collection.add(9.0);
		collection.add(92.0);
		collection.add(179.0);
		collection.add(33.0);
		collection.add(98.0);
		collection.add(82.0);
		collection.add(100.0);
		collection.add(18.0);
		collection.add(107.0);
		collection.add(122.0);
		collection.add(105.0);
		collection.add(183.0);
		collection.add(89.0);
		collection.add(119.0);
		collection.add(183.0);
		collection.add(9.0);
		collection.add(105.0);
		collection.add(61.0);
		collection.add(48.0);
		collection.add(2.0);
		collection.add(18.0);
		collection.add(169.0);
		collection.add(159.0);
		collection.add(71.0);
		collection.add(30.0);
		collection.add(121.0);
		collection.add(92.0);
		collection.add(42.0);
		collection.add(104.0);
		collection.add(85.0);
		collection.add(126.0);
		collection.add(96.0);
		collection.add(133.0);
		collection.add(43.0);
		collection.add(167.0);
		collection.add(153.0);
		collection.add(20.0);
		collection.add(32.0);
		collection.add(48.0);
		collection.add(181.0);
		collection.add(120.0);
		collection.add(31.0);
		collection.add(177.0);
		collection.add(24.0);
		collection.add(15.0);
		collection.add(140.0);
		collection.add(95.0);
		collection.add(61.0);
		collection.add(14.0);
		collection.add(120.0);
		collection.add(176.0);
		collection.add(153.0);
		collection.add(87.0);
		collection.add(50.0);
		collection.add(7.0);
		collection.add(111.0);
		collection.add(46.0);
		collection.add(164.0);
		collection.add(125.0);
		collection.add(94.0);
		collection.add(108.0);
		collection.add(11.0);
		collection.add(117.0);
		collection.add(93.0);
		collection.add(197.0);
		collection.add(5.0);
		collection.add(90.0);
		collection.add(71.0);
		collection.add(137.0);
		collection.add(164.0);
		collection.add(103.0);
		collection.add(53.0);
		collection.add(137.0);
		collection.add(60.0);
		collection.add(119.0);
		collection.add(189.0);
		collection.add(4.0);
		collection.add(192.0);
		collection.add(64.0);
		collection.add(114.0);
		collection.add(52.0);
		collection.add(79.0);
		collection.add(39.0);
		collection.add(30.0);
		collection.add(138.0);
		collection.add(125.0);
		collection.add(158.0);
		collection.add(89.0);
		collection.add(23.0);
		collection.add(50.0);
		collection.add(80.0);
		collection.add(27.0);
		collection.add(148.0);
		collection.add(58.0);
		collection.add(174.0);
		collection.add(126.0);
		collection.add(124.0);
		collection.add(79.0);
		collection.add(153.0);
		collection.add(135.0);
		collection.add(10.0);
		collection.add(34.0);
		collection.add(58.0);
		collection.add(166.0);
		collection.add(70.0);
		collection.add(98.0);
		collection.add(108.0);
		collection.add(29.0);
		collection.add(189.0);
		collection.add(145.0);
		collection.add(158.0);
		collection.add(133.0);
		collection.add(35.0);
		collection.add(72.0);
		collection.add(34.0);
		collection.add(68.0);
		collection.add(134.0);
		collection.add(26.0);
		collection.add(32.0);
		collection.add(95.0);
		collection.add(129.0);
		collection.add(15.0);
		collection.add(104.0);
		collection.add(199.0);
		collection.add(121.0);
		collection.add(21.0);
		collection.add(46.0);
		collection.add(196.0);
		collection.add(14.0);
		collection.add(46.0);
		collection.add(196.0);
		collection.add(182.0);
		collection.add(83.0);
		collection.add(26.0);
		collection.add(106.0);
		collection.add(186.0);
		collection.add(162.0);
		collection.add(41.0);
		collection.add(26.0);
		collection.add(41.0);
		collection.add(24.0);
		collection.add(14.0);
		collection.add(24.0);
		collection.add(33.0);
		collection.add(142.0);
		collection.add(129.0);
		collection.add(19.0);
		collection.add(153.0);
		collection.add(200.0);
		collection.add(179.0);
		collection.add(79.0);
		collection.add(135.0);
		collection.add(58.0);
		collection.add(91.0);
		collection.add(113.0);
		collection.add(31.0);
		collection.add(7.0);
		collection.add(1.0);
		collection.add(58.0);
		collection.add(130.0);
		collection.add(17.0);
		collection.add(149.0);
		collection.add(12.0);
		collection.add(165.0);
		collection.add(176.0);
		collection.add(147.0);
		collection.add(161.0);
		collection.add(149.0);
		collection.add(49.0);
		collection.add(194.0);
		collection.add(41.0);
		collection.add(181.0);
		collection.add(95.0);
		collection.add(166.0);
		collection.add(110.0);
		collection.add(129.0);
		collection.add(44.0);
		collection.add(113.0);
		collection.add(93.0);
		collection.add(177.0);
		collection.add(106.0);
		collection.add(141.0);
		collection.add(191.0);
		collection.add(58.0);
		collection.add(73.0);
		collection.add(7.0);
		collection.add(110.0);
		collection.add(3.0);
		collection.add(194.0);
		collection.add(84.0);
		collection.add(166.0);
		collection.add(91.0);
		collection.add(121.0);
		collection.add(52.0);
		collection.add(89.0);
		collection.add(66.0);
		collection.add(62.0);
		collection.add(5.0);
		collection.add(27.0);
		collection.add(144.0);
		collection.add(99.0);
		collection.add(188.0);
		collection.add(16.0);
		collection.add(150.0);
		collection.add(12.0);
		collection.add(127.0);
		collection.add(23.0);
		collection.add(69.0);
		collection.add(103.0);
		collection.add(109.0);
		collection.add(137.0);
		collection.add(117.0);
		collection.add(59.0);
		collection.add(56.0);
		collection.add(70.0);
		collection.add(15.0);
		collection.add(1.0);
		collection.add(39.0);
		collection.add(83.0);
		collection.add(45.0);
		collection.add(37.0);
		collection.add(96.0);
		collection.add(37.0);
		collection.add(80.0);
		collection.add(118.0);
		collection.add(153.0);
		collection.add(17.0);
		collection.add(85.0);
		collection.add(161.0);
		collection.add(16.0);
		collection.add(140.0);
		collection.add(129.0);
		collection.add(90.0);
		collection.add(114.0);
		collection.add(136.0);
		collection.add(71.0);
		collection.add(85.0);
		collection.add(10.0);
		collection.add(27.0);
		collection.add(20.0);
		collection.add(48.0);
		collection.add(116.0);
		collection.add(160.0);
		collection.add(179.0);
		collection.add(120.0);
		collection.add(127.0);
		collection.add(93.0);
		collection.add(10.0);
		collection.add(41.0);
		collection.add(199.0);
		collection.add(174.0);
		collection.add(60.0);
		collection.add(179.0);
		collection.add(39.0);
		collection.add(1.0);
		collection.add(22.0);
		collection.add(41.0);
		collection.add(163.0);
		collection.add(106.0);
		collection.add(143.0);
		collection.add(105.0);
		collection.add(15.0);
		collection.add(16.0);
		collection.add(17.0);
		collection.add(161.0);
		collection.add(191.0);
		collection.add(42.0);
		collection.add(184.0);
		collection.add(104.0);
		collection.add(98.0);
		collection.add(11.0);
		collection.add(199.0);
		collection.add(193.0);
		collection.add(173.0);
		collection.add(172.0);
		collection.add(146.0);
		collection.add(7.0);
		collection.add(3.0);
		collection.add(149.0);
		collection.add(62.0);
		collection.add(158.0);
		collection.add(68.0);
		collection.add(154.0);
		collection.add(142.0);
		collection.add(115.0);
		collection.add(58.0);
		collection.add(163.0);
		collection.add(24.0);
		collection.add(176.0);
		collection.add(167.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=5)
	@Measurement(time=5,iterations=30)
	public void JHashSet(Blackhole bh) {
		bh.consume(collection.addAll(java.util.Arrays.asList(160.0,19.0,116.0,94.0,133.0,103.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,103.0,58.0,124.0,168.0)));
		bh.consume(collection.contains(167.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,168.0,129.0,98.0,162.0,17.0,108.0,144.0,175.0)));
		bh.consume(collection.contains(107.0));
		bh.consume(collection.add(142.0));
		bh.consume(collection.remove(151.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,16.0,181.0,172.0,174.0)));
		collection.toArray(new Double[] {63.0,69.0,140.0,35.0,84.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(188.0,181.0,163.0,157.0,65.0,10.0)));
		bh.consume(collection.remove(99.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,70.0,194.0,177.0,135.0,93.0,184.0,136.0)));
		bh.consume(collection.add(20.0));
		bh.consume(collection.contains(146.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,48.0,172.0,1.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(194.0,13.0,195.0,162.0)));
		bh.consume(collection.add(115.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,177.0,14.0,109.0,194.0,48.0,170.0)));
		bh.consume(collection.contains(149.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,158.0,35.0,4.0,116.0,137.0,67.0,12.0)));
		bh.consume(collection.contains(71.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(9.0,166.0,35.0,170.0,120.0,194.0,134.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(148.0,27.0,93.0,48.0,142.0,66.0,183.0)));
		collection.toArray(new Double[] {90.0,88.0,169.0,122.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(155.0,65.0,38.0,107.0,199.0,109.0,7.0,21.0)));
		bh.consume(collection.remove(123.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(130.0,103.0,89.0,108.0,75.0,59.0,30.0,22.0)));
		bh.consume(collection.remove(141.0));
		bh.consume(collection.add(119.0));
		bh.consume(collection.contains(33.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,64.0,175.0,126.0)));
		bh.consume(collection.contains(186.0));
		bh.consume(collection.remove(31.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,182.0,183.0,83.0,100.0)));
		bh.consume(collection.contains(118.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,106.0,144.0)));
		bh.consume(collection.remove(12.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(153.0,72.0,21.0,74.0)));
		collection.toArray(new Double[] {151.0,28.0,184.0,79.0,66.0,158.0,184.0,139.0,113.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,79.0,41.0,89.0,23.0,31.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(108.0,107.0,79.0,166.0)));
		collection.toArray(new Double[] {108.0,33.0,117.0,77.0,43.0,190.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(41.0,21.0,165.0,198.0,197.0,120.0,16.0,57.0)));
		bh.consume(collection.contains(113.0));
		bh.consume(collection.contains(169.0));
		bh.consume(collection.add(131.0));
		bh.consume(collection.contains(160.0));
		bh.consume(collection.add(82.0));
		bh.consume(collection.remove(185.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(9.0,82.0,16.0,60.0,85.0)));
		bh.consume(collection.add(141.0));
		bh.consume(collection.add(44.0));
		bh.consume(collection.contains(174.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(11.0,80.0,178.0,87.0,157.0,139.0,129.0,3.0)));
		bh.consume(collection.remove(58.0));
		bh.consume(collection.contains(94.0));
		collection.toArray(new Double[] {100.0,135.0,65.0,103.0});
		bh.consume(collection.remove(105.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,197.0,1.0,22.0,75.0,145.0,82.0,180.0,65.0)));
		collection.toArray(new Double[] {129.0,147.0,39.0,67.0,34.0,89.0,70.0});
		bh.consume(collection.remove(192.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(52.0,127.0,27.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(26.0,75.0,90.0,4.0,155.0,36.0)));
		bh.consume(collection.add(145.0));
		collection.toArray(new Double[] {93.0,20.0,7.0,30.0,32.0,94.0,23.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,87.0,105.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(66.0,39.0,94.0,16.0,182.0,51.0,155.0,14.0,57.0)));
		bh.consume(collection.contains(161.0));
		bh.consume(collection.contains(181.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(6.0,31.0,65.0,164.0,51.0,151.0,8.0,196.0,86.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(89.0,29.0,73.0,152.0,91.0,188.0,25.0)));
		collection.toArray(new Double[] {157.0,123.0,147.0,184.0,77.0,1.0,13.0,75.0});
		bh.consume(collection.contains(64.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(34.0,6.0,50.0,188.0,184.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(178.0,149.0,67.0,156.0,172.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,3.0,161.0,37.0,107.0,183.0,185.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,42.0,189.0,39.0)));
		bh.consume(collection.contains(145.0));
		bh.consume(collection.contains(87.0));
		bh.consume(collection.remove(87.0));
		collection.toArray(new Double[] {87.0,189.0,178.0,51.0,155.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,5.0,177.0,193.0,161.0,84.0,148.0,21.0,158.0)));
		bh.consume(collection.contains(120.0));
		bh.consume(collection.contains(181.0));
		bh.consume(collection.contains(130.0));
		collection.toArray(new Double[] {109.0,188.0,138.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,15.0,57.0,64.0,158.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(107.0,48.0,138.0,8.0,180.0,45.0,36.0,26.0,42.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(86.0,18.0,12.0,117.0,195.0,167.0,24.0)));
		bh.consume(collection.remove(66.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,52.0,3.0,198.0,154.0)));
		bh.consume(collection.contains(42.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,184.0,141.0)));
		bh.consume(collection.contains(79.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,88.0,62.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(130.0,80.0,1.0,28.0,85.0,158.0,128.0,62.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,124.0,144.0,172.0,115.0)));
		bh.consume(collection.contains(152.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,6.0,6.0,36.0,54.0,139.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(56.0,122.0,196.0,126.0,56.0,36.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(130.0,128.0,146.0,97.0,159.0,169.0,77.0,181.0,192.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,187.0,194.0,140.0,185.0,41.0,27.0,125.0,31.0)));
		bh.consume(collection.add(99.0));
		bh.consume(collection.contains(13.0));
		collection.toArray(new Double[] {18.0,182.0,23.0,102.0,194.0,15.0,134.0,140.0,154.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,180.0,94.0,78.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,72.0,42.0,144.0,181.0,151.0,142.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(66.0,59.0,97.0,140.0,92.0,80.0,28.0,141.0,86.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(150.0,129.0,176.0,171.0,101.0,40.0,166.0)));
		bh.consume(collection.add(121.0));
		bh.consume(collection.add(70.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,33.0,179.0,109.0,199.0,185.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,187.0,94.0,118.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(174.0,180.0,79.0,55.0,189.0,24.0,151.0,136.0,115.0)));
		collection.toArray(new Double[] {90.0,175.0,198.0,56.0,4.0,56.0,26.0});
		bh.consume(collection.remove(110.0));
		bh.consume(collection.remove(135.0));
		bh.consume(collection.add(176.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,82.0,106.0,114.0,2.0,56.0,41.0,81.0)));
		bh.consume(collection.contains(44.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,101.0,190.0,91.0)));
		collection.toArray(new Double[] {83.0,194.0,170.0});
		bh.consume(collection.add(112.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,23.0,103.0,176.0,20.0,77.0,152.0,119.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(8.0,158.0,40.0,143.0,80.0,118.0,77.0,140.0,106.0)));
		bh.consume(collection.contains(38.0));
		bh.consume(collection.add(112.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,155.0,98.0,124.0)));
		bh.consume(collection.remove(68.0));
		bh.consume(collection.contains(92.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,194.0,121.0,55.0,129.0,87.0,85.0,122.0)));
		bh.consume(collection.add(130.0));
		bh.consume(collection.add(174.0));
		bh.consume(collection.add(189.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,197.0,41.0)));
		bh.consume(collection.contains(158.0));
		bh.consume(collection.contains(198.0));
		bh.consume(collection.remove(125.0));
		bh.consume(collection.add(15.0));
		bh.consume(collection.remove(66.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,66.0,172.0,193.0,80.0,18.0,90.0,79.0)));
		bh.consume(collection.add(166.0));
		bh.consume(collection.contains(91.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,80.0,33.0,108.0,26.0,156.0)));
		bh.consume(collection.add(122.0));
		bh.consume(collection.remove(198.0));
		bh.consume(collection.add(132.0));
		bh.consume(collection.contains(162.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,27.0,163.0,84.0,200.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,75.0,154.0,186.0,27.0,38.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,97.0,135.0,81.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,13.0,87.0,114.0,146.0,200.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,190.0,86.0,193.0,174.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(197.0,112.0,112.0,36.0,166.0,123.0,65.0,187.0,137.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(140.0,169.0,164.0,92.0,17.0,9.0,57.0,174.0,126.0)));
		bh.consume(collection.remove(125.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(10.0,20.0,145.0,100.0,32.0,110.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,149.0,185.0,184.0,122.0,128.0,185.0,185.0)));
		bh.consume(collection.contains(89.0));
		bh.consume(collection.contains(164.0));
		bh.consume(collection.remove(184.0));
		bh.consume(collection.remove(169.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(26.0,181.0,23.0,148.0,99.0,86.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(37.0,196.0,132.0,166.0,61.0)));
		collection.toArray(new Double[] {42.0,104.0,197.0,93.0,199.0,155.0});
		bh.consume(collection.remove(185.0));
		bh.consume(collection.contains(123.0));
		bh.consume(collection.add(116.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(180.0,72.0,197.0,118.0)));
		bh.consume(collection.contains(82.0));
		bh.consume(collection.add(86.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(12.0,33.0,161.0,109.0,10.0,20.0,47.0,154.0,22.0)));
		bh.consume(collection.add(37.0));
		bh.consume(collection.add(116.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(130.0,187.0,144.0,73.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,19.0,117.0,63.0,25.0,155.0,144.0,177.0)));
		bh.consume(collection.remove(166.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,165.0,7.0,158.0,7.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(141.0,189.0,162.0)));
		bh.consume(collection.remove(195.0));
		bh.consume(collection.remove(5.0));
		bh.consume(collection.add(8.0));
		bh.consume(collection.add(106.0));
		bh.consume(collection.contains(115.0));
		bh.consume(collection.remove(55.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,77.0,87.0,28.0,132.0,147.0)));
		bh.consume(collection.contains(167.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,59.0,136.0)));
		bh.consume(collection.remove(104.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(111.0,174.0,128.0,124.0,157.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,14.0,137.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,114.0,129.0)));
		bh.consume(collection.add(61.0));
		bh.consume(collection.contains(58.0));
		bh.consume(collection.add(107.0));
		bh.consume(collection.add(9.0));
		bh.consume(collection.contains(188.0));
		bh.consume(collection.contains(28.0));
		bh.consume(collection.contains(53.0));
		bh.consume(collection.remove(42.0));
		bh.consume(collection.remove(53.0));
		bh.consume(collection.add(199.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,20.0,189.0,119.0,150.0,158.0)));
		bh.consume(collection.contains(49.0));
		bh.consume(collection.contains(64.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,160.0,78.0,90.0,48.0,49.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(194.0,91.0,30.0,102.0,198.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,80.0,185.0,164.0,142.0,90.0,75.0,15.0,110.0)));
		bh.consume(collection.contains(32.0));
		bh.consume(collection.add(179.0));
		bh.consume(collection.contains(40.0));
		bh.consume(collection.add(165.0));
		bh.consume(collection.add(183.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,9.0,84.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(68.0,1.0,136.0,136.0,30.0,109.0)));
		bh.consume(collection.contains(24.0));
		bh.consume(collection.contains(142.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,68.0,151.0,26.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(161.0,26.0,170.0,46.0,48.0,10.0,180.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,23.0,185.0,163.0)));
		bh.consume(collection.add(144.0));
		bh.consume(collection.remove(179.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,49.0,136.0,59.0,100.0,84.0)));
		bh.consume(collection.add(44.0));
		collection.toArray(new Double[] {158.0,89.0,22.0,116.0,30.0,82.0});
		bh.consume(collection.remove(95.0));
		bh.consume(collection.contains(9.0));
		bh.consume(collection.remove(114.0));
		bh.consume(collection.remove(141.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(3.0,48.0,47.0,64.0,2.0)));
		bh.consume(collection.contains(125.0));
		bh.consume(collection.add(148.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(33.0,13.0,93.0,142.0,131.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(118.0,25.0,79.0,98.0,156.0,82.0,122.0,120.0,86.0)));
		collection.toArray(new Double[] {11.0,126.0,174.0,89.0,190.0,5.0,33.0,125.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(155.0,90.0,157.0,76.0,40.0,12.0,103.0,134.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,126.0,124.0)));
		bh.consume(collection.contains(17.0));
		bh.consume(collection.remove(156.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,50.0,103.0,182.0,168.0,109.0)));
		bh.consume(collection.contains(137.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,30.0,28.0,15.0)));
		collection.toArray(new Double[] {88.0,197.0,153.0,101.0,47.0,71.0,90.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,36.0,134.0,93.0,118.0,103.0,141.0,187.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(3.0,180.0,8.0,194.0)));
		collection.toArray(new Double[] {134.0,101.0,181.0,87.0});
		bh.consume(collection.add(147.0));
		bh.consume(collection.contains(16.0));
		bh.consume(collection.add(166.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,78.0,177.0,132.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,80.0,126.0,28.0,129.0,154.0,163.0)));
		collection.toArray(new Double[] {96.0,17.0,163.0});
		bh.consume(collection.remove(7.0));
		bh.consume(collection.add(141.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,183.0,12.0,131.0,77.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,130.0,88.0,171.0,198.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,168.0,165.0,178.0,76.0,51.0,139.0,194.0)));
		collection.toArray(new Double[] {195.0,93.0,153.0,197.0,15.0,4.0,179.0});
		bh.consume(collection.remove(165.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(128.0,183.0,33.0)));
		collection.toArray(new Double[] {117.0,43.0,118.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(138.0,123.0,197.0,28.0,114.0,6.0,132.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,187.0,17.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,157.0,175.0,135.0,183.0,114.0)));
		collection.toArray(new Double[] {144.0,83.0,186.0});
		collection.toArray(new Double[] {182.0,174.0,146.0,103.0,59.0,29.0,187.0,5.0,184.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,91.0,3.0)));
		bh.consume(collection.add(72.0));
		bh.consume(collection.remove(147.0));
		bh.consume(collection.contains(86.0));
		bh.consume(collection.contains(41.0));
		bh.consume(collection.contains(118.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(197.0,110.0,131.0)));
		bh.consume(collection.add(102.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,89.0,116.0,93.0,148.0,18.0,115.0,20.0,182.0)));
		bh.consume(collection.add(94.0));
		bh.consume(collection.add(109.0));
		bh.consume(collection.contains(57.0));
		bh.consume(collection.add(94.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(97.0,8.0,79.0,184.0,66.0,148.0,139.0,115.0,31.0)));
		bh.consume(collection.contains(179.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(45.0,188.0,56.0,111.0,199.0,117.0,74.0,112.0)));
		bh.consume(collection.contains(194.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(10.0,90.0,57.0,65.0,16.0,128.0,12.0,157.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,22.0,58.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,43.0,117.0,85.0)));
		collection.toArray(new Double[] {44.0,21.0,154.0,42.0,62.0,160.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(86.0,118.0,130.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(91.0,127.0,112.0,143.0,166.0,19.0,146.0,103.0)));
		collection.toArray(new Double[] {50.0,81.0,171.0,91.0,163.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(129.0,81.0,165.0,165.0,29.0,21.0,90.0,110.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(144.0,57.0,50.0,5.0,179.0,166.0,58.0,52.0)));
		bh.consume(collection.add(45.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,77.0,47.0,200.0,105.0,146.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(89.0,29.0,33.0,21.0,124.0,53.0,124.0,11.0,128.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,160.0,25.0,177.0,29.0,26.0,88.0,178.0,148.0)));
		bh.consume(collection.contains(37.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,139.0,27.0,112.0,89.0,58.0)));
		bh.consume(collection.add(47.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,29.0,65.0)));
		bh.consume(collection.add(147.0));
		bh.consume(collection.remove(33.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,177.0,36.0,103.0,148.0,106.0,196.0,52.0,1.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(54.0,91.0,112.0,49.0,83.0,102.0,131.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,17.0,103.0,178.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,132.0,104.0,168.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,54.0,197.0,184.0,98.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,142.0,75.0,110.0,93.0,189.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,28.0,62.0,59.0,36.0,98.0)));
		bh.consume(collection.remove(124.0));
		collection.toArray(new Double[] {71.0,16.0,188.0,125.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(57.0,59.0,171.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,118.0,36.0,19.0,150.0)));
		collection.toArray(new Double[] {146.0,91.0,30.0,177.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,121.0,106.0,3.0,43.0,5.0,171.0,67.0,20.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,62.0,34.0,78.0,32.0,134.0,118.0,103.0,72.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,40.0,126.0,140.0,193.0,106.0,179.0,145.0,6.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,5.0,171.0,125.0,179.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(42.0,17.0,70.0,105.0,112.0,138.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,46.0,68.0,1.0,83.0,63.0,28.0,13.0)));
		bh.consume(collection.add(60.0));
		bh.consume(collection.contains(1.0));
		bh.consume(collection.contains(145.0));
		collection.toArray(new Double[] {18.0,76.0,11.0,93.0,169.0,177.0,116.0});
		bh.consume(collection.add(55.0));
		bh.consume(collection.contains(115.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(62.0,78.0,81.0)));
		bh.consume(collection.contains(28.0));
		bh.consume(collection.remove(105.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,148.0,160.0,9.0,145.0,114.0,121.0)));
		bh.consume(collection.contains(4.0));
		bh.consume(collection.add(41.0));
		bh.consume(collection.remove(60.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,151.0,144.0,36.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,188.0,158.0,199.0,186.0,123.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(68.0,195.0,79.0,184.0,177.0,199.0,1.0)));
		bh.consume(collection.contains(182.0));
		collection.toArray(new Double[] {53.0,186.0,42.0,50.0,129.0,121.0,17.0,146.0});
		bh.consume(collection.add(178.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,196.0,144.0,93.0,113.0,54.0,198.0)));
		bh.consume(collection.remove(96.0));
		bh.consume(collection.contains(1.0));
		bh.consume(collection.contains(106.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,189.0,181.0,145.0,125.0,193.0,188.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(187.0,102.0,198.0,165.0,126.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,145.0,156.0,5.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,10.0,111.0,106.0,90.0,106.0)));
		bh.consume(collection.contains(121.0));
		collection.toArray(new Double[] {6.0,13.0,16.0,183.0,169.0,145.0,27.0,156.0,7.0});
		bh.consume(collection.contains(24.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(30.0,4.0,110.0,189.0,76.0)));
		bh.consume(collection.contains(114.0));
		bh.consume(collection.contains(42.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,154.0,156.0,167.0,2.0,195.0,80.0,62.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,153.0,174.0,155.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(176.0,183.0,113.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,182.0,69.0,35.0,136.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,109.0,50.0,81.0,193.0)));
		bh.consume(collection.add(130.0));
		bh.consume(collection.remove(30.0));
		bh.consume(collection.contains(192.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,34.0,87.0,176.0)));
		bh.consume(collection.remove(168.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,123.0,102.0,106.0,21.0,112.0,30.0,38.0,53.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(147.0,147.0,23.0)));
		bh.consume(collection.add(102.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(142.0,139.0,8.0,110.0,72.0,44.0,50.0)));
		bh.consume(collection.add(140.0));
		bh.consume(collection.contains(173.0));
		bh.consume(collection.contains(124.0));
		bh.consume(collection.add(74.0));
		bh.consume(collection.add(47.0));
		bh.consume(collection.contains(35.0));
		bh.consume(collection.add(58.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(41.0,92.0,10.0,1.0,30.0,154.0,91.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,154.0,46.0,84.0,70.0,22.0,189.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,140.0,124.0,177.0,170.0)));
		bh.consume(collection.remove(196.0));
		bh.consume(collection.add(194.0));
		collection.toArray(new Double[] {104.0,76.0,107.0,86.0,187.0});
		bh.consume(collection.add(63.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(67.0,26.0,20.0,85.0,196.0,4.0)));
		collection.toArray(new Double[] {189.0,200.0,70.0,133.0,185.0,174.0,71.0,149.0});
		bh.consume(collection.contains(146.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,127.0,68.0,167.0,92.0)));
		bh.consume(collection.remove(53.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,137.0,162.0,200.0,106.0,154.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(149.0,71.0,174.0,5.0,143.0)));
		bh.consume(collection.contains(62.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,52.0,111.0)));
		bh.consume(collection.contains(158.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(58.0,97.0,15.0,121.0,13.0,64.0)));
		bh.consume(collection.add(18.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,176.0,122.0,41.0,26.0,48.0,59.0,71.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,23.0,66.0,159.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,138.0,90.0,13.0,40.0,56.0,136.0,10.0)));
		collection.toArray(new Double[] {9.0,147.0,152.0,191.0,146.0,156.0,15.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(31.0,166.0,125.0,178.0,140.0,106.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,172.0,187.0,29.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,196.0,169.0,103.0,65.0,177.0,155.0,140.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,20.0,47.0,121.0,14.0,125.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,93.0,78.0,6.0)));
		bh.consume(collection.contains(165.0));
		bh.consume(collection.contains(106.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(147.0,178.0,40.0,174.0,25.0,20.0,1.0)));
		bh.consume(collection.add(52.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(6.0,73.0,167.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,138.0,50.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,48.0,92.0,67.0,43.0,25.0)));
		bh.consume(collection.add(41.0));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.contains(88.0));
		bh.consume(collection.contains(98.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,56.0,188.0,88.0,148.0,5.0,109.0,75.0,47.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,142.0,117.0,93.0,160.0,147.0,189.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(27.0,30.0,133.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,157.0,34.0)));
		bh.consume(collection.contains(150.0));
		bh.consume(collection.remove(93.0));
		collection.toArray(new Double[] {32.0,46.0,143.0,9.0,145.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(18.0,2.0,13.0,134.0)));
		bh.consume(collection.contains(20.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,150.0,35.0,71.0,178.0,104.0,69.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(35.0,33.0,87.0,65.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,85.0,132.0,161.0,79.0,1.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(168.0,116.0,90.0,48.0,139.0,151.0,171.0)));
		bh.consume(collection.remove(189.0));
		bh.consume(collection.contains(116.0));
		bh.consume(collection.remove(56.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,77.0,49.0,135.0,171.0,139.0,25.0,84.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(183.0,92.0,27.0,45.0,39.0,143.0,66.0,140.0,1.0)));
		collection.toArray(new Double[] {106.0,135.0,13.0,119.0,130.0,163.0,156.0,189.0});
		collection.toArray(new Double[] {3.0,128.0,42.0,4.0,72.0});
		bh.consume(collection.contains(177.0));
		bh.consume(collection.add(86.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,136.0,35.0,152.0)));
		bh.consume(collection.contains(25.0));
		bh.consume(collection.contains(181.0));
		bh.consume(collection.remove(70.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,103.0,145.0,45.0,136.0,99.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,173.0,133.0,124.0)));
		bh.consume(collection.contains(200.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,51.0,106.0,135.0,49.0,154.0,15.0,198.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,62.0,75.0,50.0,82.0,55.0,54.0,164.0,148.0)));
		bh.consume(collection.contains(88.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(115.0,7.0,51.0,49.0,76.0,47.0,167.0,160.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,44.0,170.0,152.0,99.0,71.0,182.0,149.0,167.0)));
		bh.consume(collection.contains(104.0));
		bh.consume(collection.contains(148.0));
		bh.consume(collection.contains(71.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,123.0,140.0,24.0)));
		bh.consume(collection.contains(169.0));
		bh.consume(collection.add(27.0));
		bh.consume(collection.add(25.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,14.0,12.0,1.0,148.0,140.0,196.0,53.0)));
		bh.consume(collection.contains(38.0));
		bh.consume(collection.contains(55.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,172.0,38.0,43.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,110.0,94.0,200.0,164.0,159.0,5.0,93.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,120.0,161.0,3.0,100.0,165.0)));
		bh.consume(collection.add(100.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,5.0,50.0,135.0,66.0,24.0,20.0,89.0,148.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,154.0,65.0,23.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(137.0,115.0,86.0)));
		bh.consume(collection.add(149.0));
		bh.consume(collection.contains(37.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,98.0,3.0,17.0,55.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,85.0,129.0,12.0,51.0,171.0,103.0,153.0,51.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,63.0,40.0,199.0,102.0,124.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,52.0,140.0,4.0)));
		bh.consume(collection.remove(64.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,28.0,137.0)));
		bh.consume(collection.contains(70.0));
		bh.consume(collection.add(134.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(54.0,48.0,118.0)));
		bh.consume(collection.contains(95.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,117.0,197.0,145.0,164.0,14.0,183.0,103.0,51.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,158.0,40.0,98.0,69.0,102.0,77.0,47.0,117.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(120.0,161.0,168.0,156.0,172.0,154.0,78.0,142.0,7.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(193.0,126.0,65.0)));
		bh.consume(collection.contains(162.0));
		bh.consume(collection.contains(154.0));
		bh.consume(collection.remove(6.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(129.0,191.0,170.0,23.0,94.0,198.0,64.0,130.0,120.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,8.0,133.0,158.0,112.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,136.0,53.0,173.0,56.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,105.0,47.0,64.0,198.0,19.0,169.0,128.0)));
		bh.consume(collection.contains(60.0));
		bh.consume(collection.add(26.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(26.0,25.0,48.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(45.0,48.0,188.0,30.0,144.0,154.0,179.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,85.0,52.0,56.0,135.0,180.0,33.0,47.0,176.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,158.0,134.0,3.0,185.0,191.0,27.0,139.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(130.0,117.0,181.0,69.0,136.0,11.0,88.0)));
		bh.consume(collection.contains(83.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(7.0,147.0,196.0,113.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,7.0,180.0)));
		bh.consume(collection.add(130.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,96.0,82.0,69.0,192.0,56.0,24.0,183.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(79.0,145.0,147.0,18.0,194.0,68.0)));
	}
}
