package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile1AllSets_JTreeSet_20220422201408459 {
	java.util.TreeSet<Double> collection = new java.util.TreeSet<>();
	@Setup(Level.Invocation)
	public void setupJTreeSet() {
		collection = new java.util.TreeSet<>();
		collection.add(134.0);
		collection.add(49.0);
		collection.add(103.0);
		collection.add(164.0);
		collection.add(115.0);
		collection.add(185.0);
		collection.add(30.0);
		collection.add(35.0);
		collection.add(167.0);
		collection.add(33.0);
		collection.add(158.0);
		collection.add(147.0);
		collection.add(2.0);
		collection.add(31.0);
		collection.add(112.0);
		collection.add(51.0);
		collection.add(156.0);
		collection.add(163.0);
		collection.add(81.0);
		collection.add(36.0);
		collection.add(66.0);
		collection.add(167.0);
		collection.add(39.0);
		collection.add(105.0);
		collection.add(109.0);
		collection.add(27.0);
		collection.add(36.0);
		collection.add(117.0);
		collection.add(11.0);
		collection.add(2.0);
		collection.add(178.0);
		collection.add(22.0);
		collection.add(149.0);
		collection.add(89.0);
		collection.add(57.0);
		collection.add(61.0);
		collection.add(93.0);
		collection.add(176.0);
		collection.add(21.0);
		collection.add(23.0);
		collection.add(61.0);
		collection.add(46.0);
		collection.add(65.0);
		collection.add(132.0);
		collection.add(136.0);
		collection.add(140.0);
		collection.add(183.0);
		collection.add(91.0);
		collection.add(121.0);
		collection.add(125.0);
		collection.add(164.0);
		collection.add(182.0);
		collection.add(136.0);
		collection.add(49.0);
		collection.add(18.0);
		collection.add(138.0);
		collection.add(132.0);
		collection.add(187.0);
		collection.add(119.0);
		collection.add(95.0);
		collection.add(126.0);
		collection.add(200.0);
		collection.add(96.0);
		collection.add(31.0);
		collection.add(148.0);
		collection.add(68.0);
		collection.add(181.0);
		collection.add(5.0);
		collection.add(152.0);
		collection.add(74.0);
		collection.add(95.0);
		collection.add(167.0);
		collection.add(199.0);
		collection.add(27.0);
		collection.add(184.0);
		collection.add(154.0);
		collection.add(20.0);
		collection.add(138.0);
		collection.add(177.0);
		collection.add(167.0);
		collection.add(181.0);
		collection.add(158.0);
		collection.add(19.0);
		collection.add(11.0);
		collection.add(132.0);
		collection.add(167.0);
		collection.add(109.0);
		collection.add(106.0);
		collection.add(91.0);
		collection.add(140.0);
		collection.add(3.0);
		collection.add(34.0);
		collection.add(22.0);
		collection.add(61.0);
		collection.add(128.0);
		collection.add(121.0);
		collection.add(97.0);
		collection.add(59.0);
		collection.add(166.0);
		collection.add(58.0);
		collection.add(142.0);
		collection.add(162.0);
		collection.add(25.0);
		collection.add(150.0);
		collection.add(163.0);
		collection.add(13.0);
		collection.add(121.0);
		collection.add(7.0);
		collection.add(194.0);
		collection.add(85.0);
		collection.add(166.0);
		collection.add(140.0);
		collection.add(128.0);
		collection.add(167.0);
		collection.add(183.0);
		collection.add(6.0);
		collection.add(118.0);
		collection.add(120.0);
		collection.add(73.0);
		collection.add(24.0);
		collection.add(87.0);
		collection.add(119.0);
		collection.add(71.0);
		collection.add(159.0);
		collection.add(187.0);
		collection.add(62.0);
		collection.add(107.0);
		collection.add(79.0);
		collection.add(68.0);
		collection.add(78.0);
		collection.add(67.0);
		collection.add(142.0);
		collection.add(6.0);
		collection.add(7.0);
		collection.add(23.0);
		collection.add(190.0);
		collection.add(141.0);
		collection.add(62.0);
		collection.add(50.0);
		collection.add(108.0);
		collection.add(170.0);
		collection.add(135.0);
		collection.add(108.0);
		collection.add(38.0);
		collection.add(183.0);
		collection.add(155.0);
		collection.add(51.0);
		collection.add(143.0);
		collection.add(92.0);
		collection.add(95.0);
		collection.add(28.0);
		collection.add(108.0);
		collection.add(100.0);
		collection.add(121.0);
		collection.add(26.0);
		collection.add(156.0);
		collection.add(78.0);
		collection.add(109.0);
		collection.add(177.0);
		collection.add(81.0);
		collection.add(167.0);
		collection.add(56.0);
		collection.add(76.0);
		collection.add(187.0);
		collection.add(41.0);
		collection.add(122.0);
		collection.add(155.0);
		collection.add(9.0);
		collection.add(96.0);
		collection.add(132.0);
		collection.add(39.0);
		collection.add(87.0);
		collection.add(63.0);
		collection.add(183.0);
		collection.add(140.0);
		collection.add(17.0);
		collection.add(138.0);
		collection.add(64.0);
		collection.add(62.0);
		collection.add(198.0);
		collection.add(16.0);
		collection.add(120.0);
		collection.add(106.0);
		collection.add(61.0);
		collection.add(172.0);
		collection.add(127.0);
		collection.add(144.0);
		collection.add(84.0);
		collection.add(192.0);
		collection.add(107.0);
		collection.add(23.0);
		collection.add(142.0);
		collection.add(18.0);
		collection.add(195.0);
		collection.add(86.0);
		collection.add(191.0);
		collection.add(94.0);
		collection.add(84.0);
		collection.add(100.0);
		collection.add(188.0);
		collection.add(179.0);
		collection.add(196.0);
		collection.add(14.0);
		collection.add(97.0);
		collection.add(86.0);
		collection.add(58.0);
		collection.add(19.0);
		collection.add(195.0);
		collection.add(194.0);
		collection.add(55.0);
		collection.add(138.0);
		collection.add(15.0);
		collection.add(173.0);
		collection.add(17.0);
		collection.add(165.0);
		collection.add(113.0);
		collection.add(105.0);
		collection.add(143.0);
		collection.add(153.0);
		collection.add(39.0);
		collection.add(170.0);
		collection.add(49.0);
		collection.add(66.0);
		collection.add(68.0);
		collection.add(117.0);
		collection.add(65.0);
		collection.add(121.0);
		collection.add(151.0);
		collection.add(75.0);
		collection.add(193.0);
		collection.add(84.0);
		collection.add(26.0);
		collection.add(54.0);
		collection.add(142.0);
		collection.add(175.0);
		collection.add(1.0);
		collection.add(142.0);
		collection.add(122.0);
		collection.add(1.0);
		collection.add(158.0);
		collection.add(158.0);
		collection.add(167.0);
		collection.add(137.0);
		collection.add(191.0);
		collection.add(183.0);
		collection.add(159.0);
		collection.add(18.0);
		collection.add(51.0);
		collection.add(8.0);
		collection.add(142.0);
		collection.add(28.0);
		collection.add(52.0);
		collection.add(128.0);
		collection.add(5.0);
		collection.add(146.0);
		collection.add(116.0);
		collection.add(99.0);
		collection.add(171.0);
		collection.add(70.0);
		collection.add(26.0);
		collection.add(91.0);
		collection.add(200.0);
		collection.add(188.0);
		collection.add(42.0);
		collection.add(38.0);
		collection.add(86.0);
		collection.add(56.0);
		collection.add(75.0);
		collection.add(97.0);
		collection.add(40.0);
		collection.add(77.0);
		collection.add(30.0);
		collection.add(42.0);
		collection.add(145.0);
		collection.add(152.0);
		collection.add(4.0);
		collection.add(177.0);
		collection.add(180.0);
		collection.add(102.0);
		collection.add(131.0);
		collection.add(151.0);
		collection.add(186.0);
		collection.add(155.0);
		collection.add(31.0);
		collection.add(160.0);
		collection.add(119.0);
		collection.add(101.0);
		collection.add(3.0);
		collection.add(85.0);
		collection.add(145.0);
		collection.add(190.0);
		collection.add(84.0);
		collection.add(47.0);
		collection.add(74.0);
		collection.add(82.0);
		collection.add(25.0);
		collection.add(117.0);
		collection.add(19.0);
		collection.add(121.0);
		collection.add(24.0);
		collection.add(142.0);
		collection.add(25.0);
		collection.add(5.0);
		collection.add(179.0);
		collection.add(74.0);
		collection.add(65.0);
		collection.add(177.0);
		collection.add(7.0);
		collection.add(112.0);
		collection.add(176.0);
		collection.add(112.0);
		collection.add(66.0);
		collection.add(139.0);
		collection.add(36.0);
		collection.add(190.0);
		collection.add(11.0);
		collection.add(75.0);
		collection.add(16.0);
		collection.add(177.0);
		collection.add(84.0);
		collection.add(107.0);
		collection.add(81.0);
		collection.add(111.0);
		collection.add(170.0);
		collection.add(15.0);
		collection.add(49.0);
		collection.add(188.0);
		collection.add(180.0);
		collection.add(154.0);
		collection.add(43.0);
		collection.add(1.0);
		collection.add(69.0);
		collection.add(185.0);
		collection.add(54.0);
		collection.add(146.0);
		collection.add(98.0);
		collection.add(112.0);
		collection.add(112.0);
		collection.add(74.0);
		collection.add(129.0);
		collection.add(196.0);
		collection.add(129.0);
		collection.add(146.0);
		collection.add(129.0);
		collection.add(66.0);
		collection.add(170.0);
		collection.add(68.0);
		collection.add(13.0);
		collection.add(137.0);
		collection.add(168.0);
		collection.add(95.0);
		collection.add(48.0);
		collection.add(148.0);
		collection.add(176.0);
		collection.add(144.0);
		collection.add(77.0);
		collection.add(156.0);
		collection.add(190.0);
		collection.add(8.0);
		collection.add(89.0);
		collection.add(26.0);
		collection.add(97.0);
		collection.add(33.0);
		collection.add(39.0);
		collection.add(50.0);
		collection.add(74.0);
		collection.add(14.0);
		collection.add(41.0);
		collection.add(144.0);
		collection.add(74.0);
		collection.add(31.0);
		collection.add(171.0);
		collection.add(56.0);
		collection.add(43.0);
		collection.add(158.0);
		collection.add(39.0);
		collection.add(27.0);
		collection.add(174.0);
		collection.add(121.0);
		collection.add(82.0);
		collection.add(42.0);
		collection.add(113.0);
		collection.add(13.0);
		collection.add(38.0);
		collection.add(3.0);
		collection.add(106.0);
		collection.add(12.0);
		collection.add(61.0);
		collection.add(183.0);
		collection.add(193.0);
		collection.add(86.0);
		collection.add(66.0);
		collection.add(138.0);
		collection.add(49.0);
		collection.add(46.0);
		collection.add(90.0);
		collection.add(118.0);
		collection.add(7.0);
		collection.add(28.0);
		collection.add(170.0);
		collection.add(139.0);
		collection.add(20.0);
		collection.add(20.0);
		collection.add(144.0);
		collection.add(116.0);
		collection.add(181.0);
		collection.add(40.0);
		collection.add(167.0);
		collection.add(158.0);
		collection.add(75.0);
		collection.add(47.0);
		collection.add(14.0);
		collection.add(116.0);
		collection.add(7.0);
		collection.add(198.0);
		collection.add(127.0);
		collection.add(94.0);
		collection.add(27.0);
		collection.add(106.0);
		collection.add(118.0);
		collection.add(78.0);
		collection.add(23.0);
		collection.add(189.0);
		collection.add(83.0);
		collection.add(65.0);
		collection.add(15.0);
		collection.add(190.0);
		collection.add(24.0);
		collection.add(51.0);
		collection.add(163.0);
		collection.add(98.0);
		collection.add(195.0);
		collection.add(190.0);
		collection.add(95.0);
		collection.add(183.0);
		collection.add(58.0);
		collection.add(56.0);
		collection.add(72.0);
		collection.add(123.0);
		collection.add(6.0);
		collection.add(161.0);
		collection.add(149.0);
		collection.add(69.0);
		collection.add(130.0);
		collection.add(91.0);
		collection.add(34.0);
		collection.add(43.0);
		collection.add(35.0);
		collection.add(169.0);
		collection.add(176.0);
		collection.add(63.0);
		collection.add(95.0);
		collection.add(188.0);
		collection.add(86.0);
		collection.add(37.0);
		collection.add(95.0);
		collection.add(107.0);
		collection.add(80.0);
		collection.add(173.0);
		collection.add(52.0);
		collection.add(183.0);
		collection.add(39.0);
		collection.add(100.0);
		collection.add(137.0);
		collection.add(200.0);
		collection.add(89.0);
		collection.add(79.0);
		collection.add(151.0);
		collection.add(82.0);
		collection.add(2.0);
		collection.add(111.0);
		collection.add(167.0);
		collection.add(123.0);
		collection.add(131.0);
		collection.add(55.0);
		collection.add(115.0);
		collection.add(15.0);
		collection.add(121.0);
		collection.add(167.0);
		collection.add(113.0);
		collection.add(43.0);
		collection.add(138.0);
		collection.add(112.0);
		collection.add(158.0);
		collection.add(165.0);
		collection.add(128.0);
		collection.add(166.0);
		collection.add(88.0);
		collection.add(7.0);
		collection.add(25.0);
		collection.add(65.0);
		collection.add(27.0);
		collection.add(28.0);
		collection.add(197.0);
		collection.add(165.0);
		collection.add(24.0);
		collection.add(86.0);
		collection.add(110.0);
		collection.add(148.0);
		collection.add(189.0);
		collection.add(31.0);
		collection.add(91.0);
		collection.add(134.0);
		collection.add(90.0);
		collection.add(5.0);
		collection.add(100.0);
		collection.add(104.0);
		collection.add(111.0);
		collection.add(29.0);
		collection.add(184.0);
		collection.add(165.0);
		collection.add(196.0);
		collection.add(159.0);
		collection.add(94.0);
		collection.add(127.0);
		collection.add(165.0);
		collection.add(30.0);
		collection.add(9.0);
		collection.add(154.0);
		collection.add(187.0);
		collection.add(61.0);
		collection.add(10.0);
		collection.add(101.0);
		collection.add(132.0);
		collection.add(70.0);
		collection.add(192.0);
		collection.add(162.0);
		collection.add(66.0);
		collection.add(168.0);
		collection.add(106.0);
		collection.add(53.0);
		collection.add(164.0);
		collection.add(131.0);
		collection.add(185.0);
		collection.add(162.0);
		collection.add(44.0);
		collection.add(152.0);
		collection.add(128.0);
		collection.add(164.0);
		collection.add(163.0);
		collection.add(44.0);
		collection.add(96.0);
		collection.add(24.0);
		collection.add(5.0);
		collection.add(45.0);
		collection.add(112.0);
		collection.add(63.0);
		collection.add(78.0);
		collection.add(122.0);
		collection.add(90.0);
		collection.add(85.0);
		collection.add(9.0);
		collection.add(149.0);
		collection.add(56.0);
		collection.add(161.0);
		collection.add(20.0);
		collection.add(3.0);
		collection.add(183.0);
		collection.add(74.0);
		collection.add(199.0);
		collection.add(124.0);
		collection.add(5.0);
		collection.add(187.0);
		collection.add(124.0);
		collection.add(111.0);
		collection.add(7.0);
		collection.add(21.0);
		collection.add(95.0);
		collection.add(62.0);
		collection.add(179.0);
		collection.add(173.0);
		collection.add(145.0);
		collection.add(53.0);
		collection.add(13.0);
		collection.add(12.0);
		collection.add(91.0);
		collection.add(160.0);
		collection.add(182.0);
		collection.add(163.0);
		collection.add(75.0);
		collection.add(69.0);
		collection.add(164.0);
		collection.add(196.0);
		collection.add(31.0);
		collection.add(67.0);
		collection.add(188.0);
		collection.add(57.0);
		collection.add(69.0);
		collection.add(158.0);
		collection.add(14.0);
		collection.add(118.0);
		collection.add(90.0);
		collection.add(109.0);
		collection.add(11.0);
		collection.add(184.0);
		collection.add(90.0);
		collection.add(71.0);
		collection.add(100.0);
		collection.add(137.0);
		collection.add(10.0);
		collection.add(88.0);
		collection.add(177.0);
		collection.add(179.0);
		collection.add(179.0);
		collection.add(101.0);
		collection.add(7.0);
		collection.add(39.0);
		collection.add(172.0);
		collection.add(167.0);
		collection.add(195.0);
		collection.add(49.0);
		collection.add(98.0);
		collection.add(199.0);
		collection.add(153.0);
		collection.add(73.0);
		collection.add(15.0);
		collection.add(120.0);
		collection.add(85.0);
		collection.add(45.0);
		collection.add(11.0);
		collection.add(200.0);
		collection.add(126.0);
		collection.add(69.0);
		collection.add(171.0);
		collection.add(43.0);
		collection.add(66.0);
		collection.add(200.0);
		collection.add(190.0);
		collection.add(36.0);
		collection.add(163.0);
		collection.add(58.0);
		collection.add(69.0);
		collection.add(94.0);
		collection.add(108.0);
		collection.add(182.0);
		collection.add(163.0);
		collection.add(45.0);
		collection.add(33.0);
		collection.add(137.0);
		collection.add(155.0);
		collection.add(89.0);
		collection.add(190.0);
		collection.add(143.0);
		collection.add(76.0);
		collection.add(32.0);
		collection.add(167.0);
		collection.add(57.0);
		collection.add(113.0);
		collection.add(167.0);
		collection.add(51.0);
		collection.add(198.0);
		collection.add(51.0);
		collection.add(150.0);
		collection.add(55.0);
		collection.add(39.0);
		collection.add(30.0);
		collection.add(132.0);
		collection.add(41.0);
		collection.add(107.0);
		collection.add(3.0);
		collection.add(186.0);
		collection.add(43.0);
		collection.add(112.0);
		collection.add(86.0);
		collection.add(123.0);
		collection.add(128.0);
		collection.add(41.0);
		collection.add(16.0);
		collection.add(90.0);
		collection.add(12.0);
		collection.add(9.0);
		collection.add(11.0);
		collection.add(48.0);
		collection.add(26.0);
		collection.add(101.0);
		collection.add(3.0);
		collection.add(86.0);
		collection.add(177.0);
		collection.add(96.0);
		collection.add(146.0);
		collection.add(101.0);
		collection.add(118.0);
		collection.add(125.0);
		collection.add(30.0);
		collection.add(129.0);
		collection.add(11.0);
		collection.add(150.0);
		collection.add(184.0);
		collection.add(106.0);
		collection.add(171.0);
		collection.add(169.0);
		collection.add(152.0);
		collection.add(163.0);
		collection.add(71.0);
		collection.add(117.0);
		collection.add(16.0);
		collection.add(8.0);
		collection.add(9.0);
		collection.add(34.0);
		collection.add(57.0);
		collection.add(64.0);
		collection.add(31.0);
		collection.add(91.0);
		collection.add(15.0);
		collection.add(32.0);
		collection.add(104.0);
		collection.add(108.0);
		collection.add(20.0);
		collection.add(149.0);
		collection.add(91.0);
		collection.add(91.0);
		collection.add(132.0);
		collection.add(1.0);
		collection.add(54.0);
		collection.add(32.0);
		collection.add(71.0);
		collection.add(20.0);
		collection.add(22.0);
		collection.add(1.0);
		collection.add(81.0);
		collection.add(115.0);
		collection.add(42.0);
		collection.add(30.0);
		collection.add(157.0);
		collection.add(49.0);
		collection.add(196.0);
		collection.add(102.0);
		collection.add(74.0);
		collection.add(131.0);
		collection.add(103.0);
		collection.add(113.0);
		collection.add(93.0);
		collection.add(28.0);
		collection.add(197.0);
		collection.add(151.0);
		collection.add(138.0);
		collection.add(200.0);
		collection.add(35.0);
		collection.add(3.0);
		collection.add(80.0);
		collection.add(62.0);
		collection.add(131.0);
		collection.add(135.0);
		collection.add(125.0);
		collection.add(138.0);
		collection.add(42.0);
		collection.add(148.0);
		collection.add(127.0);
		collection.add(61.0);
		collection.add(55.0);
		collection.add(107.0);
		collection.add(127.0);
		collection.add(46.0);
		collection.add(163.0);
		collection.add(152.0);
		collection.add(40.0);
		collection.add(130.0);
		collection.add(171.0);
		collection.add(148.0);
		collection.add(88.0);
		collection.add(77.0);
		collection.add(167.0);
		collection.add(153.0);
		collection.add(46.0);
		collection.add(22.0);
		collection.add(158.0);
		collection.add(82.0);
		collection.add(104.0);
		collection.add(178.0);
		collection.add(1.0);
		collection.add(103.0);
		collection.add(101.0);
		collection.add(91.0);
		collection.add(165.0);
		collection.add(142.0);
		collection.add(110.0);
		collection.add(92.0);
		collection.add(32.0);
		collection.add(58.0);
		collection.add(128.0);
		collection.add(21.0);
		collection.add(50.0);
		collection.add(40.0);
		collection.add(19.0);
		collection.add(125.0);
		collection.add(98.0);
		collection.add(132.0);
		collection.add(30.0);
		collection.add(83.0);
		collection.add(153.0);
		collection.add(159.0);
		collection.add(21.0);
		collection.add(160.0);
		collection.add(102.0);
		collection.add(68.0);
		collection.add(77.0);
		collection.add(158.0);
		collection.add(70.0);
		collection.add(116.0);
		collection.add(40.0);
		collection.add(185.0);
		collection.add(117.0);
		collection.add(138.0);
		collection.add(172.0);
		collection.add(93.0);
		collection.add(36.0);
		collection.add(156.0);
		collection.add(2.0);
		collection.add(126.0);
		collection.add(64.0);
		collection.add(98.0);
		collection.add(153.0);
		collection.add(143.0);
		collection.add(147.0);
		collection.add(8.0);
		collection.add(178.0);
		collection.add(79.0);
		collection.add(41.0);
		collection.add(158.0);
		collection.add(106.0);
		collection.add(155.0);
		collection.add(7.0);
		collection.add(28.0);
		collection.add(185.0);
		collection.add(183.0);
		collection.add(68.0);
		collection.add(17.0);
		collection.add(186.0);
		collection.add(9.0);
		collection.add(172.0);
		collection.add(40.0);
		collection.add(76.0);
		collection.add(88.0);
		collection.add(107.0);
		collection.add(45.0);
		collection.add(64.0);
		collection.add(152.0);
		collection.add(82.0);
		collection.add(3.0);
		collection.add(69.0);
		collection.add(54.0);
		collection.add(119.0);
		collection.add(83.0);
		collection.add(5.0);
		collection.add(35.0);
		collection.add(157.0);
		collection.add(156.0);
		collection.add(67.0);
		collection.add(161.0);
		collection.add(123.0);
		collection.add(83.0);
		collection.add(128.0);
		collection.add(189.0);
		collection.add(25.0);
		collection.add(146.0);
		collection.add(72.0);
		collection.add(51.0);
		collection.add(200.0);
		collection.add(127.0);
		collection.add(15.0);
		collection.add(150.0);
		collection.add(128.0);
		collection.add(72.0);
		collection.add(173.0);
		collection.add(19.0);
		collection.add(43.0);
		collection.add(1.0);
		collection.add(187.0);
		collection.add(114.0);
		collection.add(28.0);
		collection.add(171.0);
		collection.add(51.0);
		collection.add(146.0);
		collection.add(102.0);
		collection.add(35.0);
		collection.add(81.0);
		collection.add(67.0);
		collection.add(1.0);
		collection.add(73.0);
		collection.add(84.0);
		collection.add(157.0);
		collection.add(46.0);
		collection.add(91.0);
		collection.add(190.0);
		collection.add(108.0);
		collection.add(106.0);
		collection.add(84.0);
		collection.add(149.0);
		collection.add(176.0);
		collection.add(96.0);
		collection.add(121.0);
		collection.add(17.0);
		collection.add(141.0);
		collection.add(112.0);
		collection.add(13.0);
		collection.add(118.0);
		collection.add(24.0);
		collection.add(18.0);
		collection.add(54.0);
		collection.add(152.0);
		collection.add(178.0);
		collection.add(98.0);
		collection.add(134.0);
		collection.add(76.0);
		collection.add(136.0);
		collection.add(48.0);
		collection.add(23.0);
		collection.add(193.0);
		collection.add(193.0);
		collection.add(125.0);
		collection.add(130.0);
		collection.add(128.0);
		collection.add(128.0);
		collection.add(135.0);
		collection.add(161.0);
		collection.add(105.0);
		collection.add(94.0);
		collection.add(86.0);
		collection.add(130.0);
		collection.add(31.0);
		collection.add(164.0);
		collection.add(94.0);
		collection.add(173.0);
		collection.add(148.0);
		collection.add(131.0);
		collection.add(113.0);
		collection.add(165.0);
		collection.add(58.0);
		collection.add(74.0);
		collection.add(96.0);
		collection.add(22.0);
		collection.add(121.0);
		collection.add(108.0);
		collection.add(161.0);
		collection.add(3.0);
		collection.add(125.0);
		collection.add(79.0);
		collection.add(170.0);
		collection.add(15.0);
		collection.add(164.0);
		collection.add(135.0);
		collection.add(197.0);
		collection.add(164.0);
		collection.add(186.0);
		collection.add(33.0);
		collection.add(25.0);
		collection.add(156.0);
		collection.add(24.0);
		collection.add(110.0);
		collection.add(128.0);
		collection.add(101.0);
		collection.add(72.0);
		collection.add(92.0);
		collection.add(113.0);
		collection.add(148.0);
		collection.add(142.0);
		collection.add(111.0);
		collection.add(196.0);
		collection.add(72.0);
		collection.add(95.0);
		collection.add(47.0);
		collection.add(115.0);
		collection.add(81.0);
		collection.add(91.0);
		collection.add(172.0);
		collection.add(45.0);
		collection.add(108.0);
		collection.add(10.0);
		collection.add(174.0);
		collection.add(157.0);
		collection.add(2.0);
		collection.add(72.0);
		collection.add(137.0);
		collection.add(66.0);
		collection.add(9.0);
		collection.add(117.0);
		collection.add(25.0);
		collection.add(42.0);
		collection.add(50.0);
		collection.add(28.0);
		collection.add(49.0);
		collection.add(1.0);
		collection.add(92.0);
		collection.add(21.0);
		collection.add(143.0);
		collection.add(2.0);
		collection.add(114.0);
		collection.add(157.0);
		collection.add(154.0);
		collection.add(67.0);
		collection.add(52.0);
		collection.add(185.0);
		collection.add(56.0);
		collection.add(82.0);
		collection.add(51.0);
		collection.add(196.0);
		collection.add(60.0);
		collection.add(164.0);
		collection.add(58.0);
		collection.add(97.0);
		collection.add(25.0);
		collection.add(111.0);
		collection.add(138.0);
		collection.add(196.0);
		collection.add(185.0);
		collection.add(73.0);
		collection.add(70.0);
		collection.add(149.0);
		collection.add(21.0);
		collection.add(43.0);
		collection.add(38.0);
		collection.add(84.0);
		collection.add(200.0);
		collection.add(62.0);
		collection.add(134.0);
		collection.add(89.0);
		collection.add(143.0);
		collection.add(134.0);
		collection.add(109.0);
		collection.add(117.0);
		collection.add(18.0);
		collection.add(107.0);
		collection.add(82.0);
		collection.add(128.0);
		collection.add(96.0);
		collection.add(111.0);
		collection.add(41.0);
		collection.add(159.0);
		collection.add(176.0);
		collection.add(74.0);
		collection.add(67.0);
		collection.add(110.0);
		collection.add(66.0);
		collection.add(122.0);
		collection.add(53.0);
		collection.add(200.0);
		collection.add(194.0);
		collection.add(187.0);
		collection.add(19.0);
		collection.add(125.0);
		collection.add(59.0);
		collection.add(86.0);
		collection.add(70.0);
		collection.add(134.0);
		collection.add(86.0);
		collection.add(182.0);
		collection.add(187.0);
		collection.add(113.0);
		collection.add(86.0);
		collection.add(39.0);
		collection.add(71.0);
		collection.add(22.0);
		collection.add(114.0);
		collection.add(4.0);
		collection.add(184.0);
		collection.add(166.0);
		collection.add(152.0);
		collection.add(155.0);
		collection.add(194.0);
		collection.add(159.0);
		collection.add(64.0);
		collection.add(15.0);
		collection.add(6.0);
		collection.add(7.0);
		collection.add(116.0);
		collection.add(183.0);
		collection.add(73.0);
		collection.add(48.0);
		collection.add(171.0);
		collection.add(44.0);
		collection.add(176.0);
		collection.add(51.0);
		collection.add(109.0);
		collection.add(137.0);
		collection.add(130.0);
		collection.add(182.0);
		collection.add(63.0);
		collection.add(142.0);
		collection.add(41.0);
		collection.add(58.0);
		collection.add(19.0);
		collection.add(86.0);
		collection.add(192.0);
		collection.add(11.0);
		collection.add(181.0);
		collection.add(186.0);
		collection.add(84.0);
		collection.add(21.0);
		collection.add(13.0);
		collection.add(49.0);
		collection.add(148.0);
		collection.add(80.0);
		collection.add(62.0);
		collection.add(178.0);
		collection.add(136.0);
		collection.add(124.0);
		collection.add(109.0);
		collection.add(58.0);
		collection.add(174.0);
		collection.add(5.0);
		collection.add(6.0);
		collection.add(187.0);
		collection.add(164.0);
		collection.add(18.0);
		collection.add(6.0);
		collection.add(189.0);
		collection.add(56.0);
		collection.add(168.0);
		collection.add(93.0);
		collection.add(97.0);
		collection.add(200.0);
		collection.add(198.0);
		collection.add(34.0);
		collection.add(33.0);
		collection.add(164.0);
		collection.add(170.0);
		collection.add(98.0);
		collection.add(182.0);
		collection.add(110.0);
		collection.add(148.0);
		collection.add(192.0);
		collection.add(171.0);
		collection.add(108.0);
		collection.add(156.0);
		collection.add(157.0);
		collection.add(32.0);
		collection.add(117.0);
		collection.add(51.0);
		collection.add(144.0);
		collection.add(17.0);
		collection.add(23.0);
		collection.add(26.0);
		collection.add(99.0);
		collection.add(56.0);
		collection.add(88.0);
		collection.add(136.0);
		collection.add(173.0);
		collection.add(71.0);
		collection.add(106.0);
		collection.add(49.0);
		collection.add(129.0);
		collection.add(42.0);
		collection.add(142.0);
		collection.add(96.0);
		collection.add(188.0);
		collection.add(149.0);
		collection.add(193.0);
		collection.add(62.0);
		collection.add(176.0);
		collection.add(66.0);
		collection.add(35.0);
		collection.add(36.0);
		collection.add(110.0);
		collection.add(142.0);
		collection.add(70.0);
		collection.add(200.0);
		collection.add(105.0);
		collection.add(139.0);
		collection.add(22.0);
		collection.add(75.0);
		collection.add(192.0);
		collection.add(85.0);
		collection.add(159.0);
		collection.add(35.0);
		collection.add(200.0);
		collection.add(78.0);
		collection.add(173.0);
		collection.add(47.0);
		collection.add(88.0);
		collection.add(97.0);
		collection.add(28.0);
		collection.add(122.0);
		collection.add(117.0);
		collection.add(89.0);
		collection.add(95.0);
		collection.add(26.0);
		collection.add(152.0);
		collection.add(20.0);
		collection.add(68.0);
		collection.add(92.0);
		collection.add(5.0);
		collection.add(25.0);
		collection.add(152.0);
		collection.add(105.0);
		collection.add(22.0);
		collection.add(94.0);
		collection.add(76.0);
		collection.add(20.0);
		collection.add(55.0);
		collection.add(197.0);
		collection.add(159.0);
		collection.add(199.0);
		collection.add(57.0);
		collection.add(126.0);
		collection.add(48.0);
		collection.add(128.0);
		collection.add(182.0);
		collection.add(146.0);
		collection.add(70.0);
		collection.add(169.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=5)
	@Measurement(time=5,iterations=30)
	public void JTreeSet(Blackhole bh) {
		bh.consume(collection.contains(200.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,134.0,61.0,100.0,36.0)));
		bh.consume(collection.add(150.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(127.0,196.0,68.0,197.0,137.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(45.0,47.0,108.0,63.0,31.0,132.0,41.0)));
		bh.consume(collection.add(187.0));
		collection.toArray(new Double[] {28.0,118.0,75.0,123.0,165.0,84.0,13.0,25.0,10.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(160.0,13.0,84.0,184.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,64.0,8.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(149.0,79.0,160.0,69.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,154.0,176.0,170.0)));
		bh.consume(collection.contains(186.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,158.0,183.0,125.0)));
		bh.consume(collection.contains(41.0));
		collection.toArray(new Double[] {172.0,157.0,84.0,109.0,108.0,5.0,80.0,149.0});
		collection.toArray(new Double[] {7.0,28.0,131.0,147.0,67.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,83.0,40.0)));
		collection.toArray(new Double[] {16.0,167.0,174.0,54.0,188.0,129.0});
		bh.consume(collection.contains(159.0));
		collection.toArray(new Double[] {183.0,81.0,181.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,197.0,111.0,26.0,108.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(156.0,78.0,13.0,192.0,18.0,145.0,145.0)));
		collection.toArray(new Double[] {167.0,5.0,65.0,162.0,61.0,114.0,103.0,183.0,166.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,146.0,4.0,38.0,171.0,42.0,127.0,43.0,161.0)));
		bh.consume(collection.contains(31.0));
		collection.toArray(new Double[] {112.0,84.0,90.0,107.0,92.0,63.0,112.0,111.0,117.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,193.0,196.0,121.0,120.0,69.0,140.0,141.0)));
		bh.consume(collection.contains(112.0));
		bh.consume(collection.remove(160.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(1.0,127.0,75.0,100.0,8.0,45.0,118.0)));
		bh.consume(collection.remove(30.0));
		bh.consume(collection.remove(172.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(9.0,106.0,51.0)));
		bh.consume(collection.contains(16.0));
		bh.consume(collection.add(94.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,141.0,16.0,81.0,118.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,58.0,172.0,180.0)));
		bh.consume(collection.contains(8.0));
		bh.consume(collection.contains(167.0));
		bh.consume(collection.remove(144.0));
		bh.consume(collection.contains(28.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,134.0,15.0,32.0,180.0,187.0,187.0,134.0,77.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,200.0,111.0,195.0,50.0)));
		collection.toArray(new Double[] {189.0,134.0,16.0,108.0,177.0,105.0,48.0,21.0});
		bh.consume(collection.remove(194.0));
		bh.consume(collection.add(13.0));
		collection.toArray(new Double[] {16.0,1.0,58.0,111.0,148.0,149.0,23.0,124.0});
		bh.consume(collection.contains(67.0));
		bh.consume(collection.contains(162.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(142.0,157.0,154.0,20.0,109.0,178.0,123.0,95.0)));
		bh.consume(collection.contains(193.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(136.0,148.0,193.0,162.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,43.0,67.0,140.0)));
		collection.toArray(new Double[] {26.0,174.0,92.0,126.0,74.0,82.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(93.0,15.0,197.0,61.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,83.0,94.0,180.0,149.0,45.0,10.0,182.0,43.0)));
		bh.consume(collection.add(22.0));
		collection.toArray(new Double[] {178.0,22.0,5.0,2.0,112.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,172.0,21.0,163.0,157.0,174.0)));
		collection.toArray(new Double[] {133.0,147.0,143.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,51.0,27.0,104.0,87.0,173.0,17.0)));
		bh.consume(collection.add(78.0));
		bh.consume(collection.contains(34.0));
		collection.toArray(new Double[] {43.0,104.0,72.0});
		bh.consume(collection.add(188.0));
		bh.consume(collection.add(45.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(6.0,8.0,36.0,174.0)));
		bh.consume(collection.contains(63.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,6.0,75.0,175.0,18.0,166.0)));
		bh.consume(collection.contains(156.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,31.0,87.0,184.0)));
		bh.consume(collection.add(179.0));
		bh.consume(collection.add(48.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,126.0,77.0,32.0,161.0,146.0)));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.add(166.0));
		bh.consume(collection.contains(163.0));
		bh.consume(collection.contains(54.0));
		bh.consume(collection.contains(116.0));
		bh.consume(collection.contains(70.0));
		bh.consume(collection.contains(5.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,60.0,81.0,200.0,141.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,33.0,99.0,162.0,32.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,107.0,156.0,66.0,181.0,197.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,103.0,107.0,154.0,192.0,63.0)));
		collection.toArray(new Double[] {6.0,57.0,6.0,1.0,194.0,187.0,61.0,12.0});
		bh.consume(collection.add(79.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(118.0,167.0,197.0,194.0)));
		bh.consume(collection.contains(68.0));
		bh.consume(collection.remove(181.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(1.0,149.0,172.0,77.0,32.0,176.0,37.0,13.0,29.0)));
		bh.consume(collection.remove(13.0));
		bh.consume(collection.contains(14.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,1.0,90.0,190.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,90.0,15.0,59.0,43.0,124.0,156.0)));
		bh.consume(collection.contains(104.0));
		bh.consume(collection.remove(9.0));
		bh.consume(collection.contains(117.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,161.0,117.0,128.0,175.0)));
		bh.consume(collection.add(102.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,75.0,39.0,168.0,104.0,43.0,180.0)));
		collection.toArray(new Double[] {69.0,138.0,105.0,196.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,10.0,38.0,139.0)));
		bh.consume(collection.add(153.0));
		bh.consume(collection.contains(195.0));
		collection.toArray(new Double[] {25.0,74.0,71.0,134.0,85.0,114.0,37.0});
		collection.toArray(new Double[] {189.0,19.0,198.0,133.0,34.0,120.0,42.0});
		collection.toArray(new Double[] {197.0,170.0,82.0,32.0,5.0,48.0,38.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(43.0,19.0,56.0,19.0,50.0,195.0,171.0,69.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(42.0,116.0,195.0)));
		collection.toArray(new Double[] {50.0,58.0,89.0,50.0,148.0,112.0});
		bh.consume(collection.add(53.0));
		collection.toArray(new Double[] {169.0,152.0,174.0,50.0,125.0});
		bh.consume(collection.add(90.0));
		collection.toArray(new Double[] {4.0,118.0,78.0,4.0,17.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(156.0,169.0,197.0,100.0,126.0,28.0,113.0,132.0,5.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(180.0,3.0,72.0,28.0,165.0,13.0)));
		bh.consume(collection.contains(47.0));
		bh.consume(collection.remove(125.0));
		bh.consume(collection.remove(34.0));
		collection.toArray(new Double[] {30.0,57.0,52.0,146.0,22.0});
		collection.toArray(new Double[] {54.0,98.0,186.0});
		bh.consume(collection.add(24.0));
		collection.toArray(new Double[] {122.0,141.0,193.0,132.0,120.0,79.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,60.0,57.0,120.0,2.0,126.0)));
		bh.consume(collection.add(164.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,175.0,28.0,181.0,145.0,40.0,60.0,161.0,140.0)));
		bh.consume(collection.contains(85.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(74.0,11.0,105.0,60.0,104.0,88.0,18.0,100.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,23.0,186.0,61.0,69.0,145.0)));
		bh.consume(collection.contains(60.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(157.0,149.0,96.0,97.0,120.0,99.0,158.0,13.0)));
		collection.toArray(new Double[] {48.0,63.0,181.0});
		bh.consume(collection.contains(84.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(106.0,59.0,38.0,182.0,30.0,72.0,68.0,116.0,86.0)));
		bh.consume(collection.add(109.0));
		bh.consume(collection.contains(73.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,116.0,63.0,8.0)));
		bh.consume(collection.contains(171.0));
		bh.consume(collection.add(54.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(142.0,106.0,83.0)));
		bh.consume(collection.contains(170.0));
		collection.toArray(new Double[] {107.0,200.0,167.0,150.0,154.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(163.0,177.0,191.0,104.0,65.0,71.0,182.0,158.0)));
		collection.toArray(new Double[] {183.0,52.0,40.0,90.0,26.0});
		bh.consume(collection.add(167.0));
		collection.toArray(new Double[] {72.0,14.0,20.0,188.0,102.0,35.0,191.0,5.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(123.0,153.0,47.0,48.0)));
		bh.consume(collection.contains(122.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(126.0,67.0,163.0,37.0,174.0)));
		bh.consume(collection.contains(135.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,123.0,114.0)));
		bh.consume(collection.add(137.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(73.0,200.0,165.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(24.0,18.0,47.0)));
		bh.consume(collection.contains(23.0));
		bh.consume(collection.contains(6.0));
		bh.consume(collection.contains(180.0));
		bh.consume(collection.contains(74.0));
		bh.consume(collection.contains(80.0));
		bh.consume(collection.contains(75.0));
		collection.toArray(new Double[] {117.0,182.0,95.0,105.0});
		collection.toArray(new Double[] {101.0,147.0,130.0,136.0,31.0,49.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(134.0,3.0,18.0)));
		bh.consume(collection.contains(102.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(199.0,59.0,104.0,78.0,122.0,55.0,192.0)));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(6.0,21.0,86.0,58.0,28.0,170.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(175.0,86.0,152.0,154.0,176.0,123.0,7.0,38.0,63.0)));
		bh.consume(collection.add(184.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(67.0,76.0,196.0,20.0,55.0,159.0)));
		bh.consume(collection.remove(15.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(17.0,42.0,47.0,69.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,107.0,44.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,76.0,184.0,49.0)));
		bh.consume(collection.contains(192.0));
		bh.consume(collection.contains(67.0));
		collection.toArray(new Double[] {110.0,161.0,20.0,63.0,196.0,137.0,118.0,31.0});
		bh.consume(collection.contains(128.0));
		bh.consume(collection.add(125.0));
		bh.consume(collection.add(55.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,96.0,58.0,67.0)));
		bh.consume(collection.contains(135.0));
		collection.toArray(new Double[] {81.0,63.0,174.0,81.0,20.0,69.0});
		collection.toArray(new Double[] {59.0,135.0,84.0,142.0,27.0,125.0,81.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,112.0,157.0,171.0,89.0,57.0,200.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,183.0,23.0,111.0,124.0,69.0,98.0,120.0,115.0)));
		bh.consume(collection.contains(9.0));
		collection.toArray(new Double[] {22.0,1.0,117.0,96.0,8.0,132.0,29.0,74.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(191.0,23.0,36.0)));
		bh.consume(collection.contains(132.0));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.add(136.0));
		bh.consume(collection.contains(138.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,75.0,14.0,111.0,65.0,130.0)));
		bh.consume(collection.contains(50.0));
		collection.toArray(new Double[] {164.0,89.0,168.0});
		collection.toArray(new Double[] {81.0,60.0,100.0,64.0,148.0});
		bh.consume(collection.contains(32.0));
		bh.consume(collection.contains(88.0));
		bh.consume(collection.contains(183.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,54.0,107.0,69.0,27.0,84.0,186.0,60.0,69.0)));
		bh.consume(collection.contains(161.0));
		collection.toArray(new Double[] {37.0,29.0,198.0});
		bh.consume(collection.contains(123.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,140.0,12.0,86.0,165.0,101.0,116.0)));
		collection.toArray(new Double[] {142.0,179.0,50.0,38.0,57.0,71.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,145.0,179.0,5.0,3.0,107.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(132.0,105.0,11.0,36.0,19.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(49.0,169.0,200.0,39.0,143.0)));
		bh.consume(collection.contains(8.0));
		bh.consume(collection.contains(80.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,168.0,73.0)));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.contains(168.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(121.0,14.0,180.0,84.0,155.0,192.0,89.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(138.0,179.0,148.0,11.0,86.0,33.0,45.0)));
		bh.consume(collection.contains(37.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,32.0,149.0,59.0,63.0,84.0,163.0,37.0,100.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(27.0,185.0,180.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,75.0,190.0,188.0,53.0,122.0)));
		bh.consume(collection.contains(9.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(26.0,60.0,192.0,152.0,27.0,182.0,105.0,81.0)));
		bh.consume(collection.contains(112.0));
		bh.consume(collection.contains(142.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,194.0,3.0,37.0,182.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(82.0,14.0,58.0,124.0,98.0,76.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(161.0,67.0,8.0,128.0,192.0)));
		collection.toArray(new Double[] {88.0,187.0,51.0,23.0});
		bh.consume(collection.add(120.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(95.0,53.0,98.0,12.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,34.0,65.0,29.0,135.0,149.0,32.0,73.0,5.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,97.0,67.0,188.0,190.0,109.0)));
		bh.consume(collection.contains(104.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(61.0,70.0,167.0,199.0,122.0,79.0,167.0,42.0)));
		bh.consume(collection.remove(92.0));
		collection.toArray(new Double[] {172.0,155.0,112.0,129.0,44.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,181.0,37.0,192.0,106.0,59.0,40.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,188.0,68.0,166.0,86.0,145.0,67.0,188.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,149.0,189.0,104.0,149.0,116.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,122.0,190.0,13.0,156.0,2.0,177.0,58.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(83.0,68.0,131.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(130.0,133.0,199.0,127.0,19.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(60.0,63.0,130.0,65.0,56.0,153.0,122.0,42.0,194.0)));
		bh.consume(collection.add(62.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(56.0,166.0,179.0,30.0,159.0,8.0,137.0)));
		bh.consume(collection.contains(46.0));
		collection.toArray(new Double[] {43.0,21.0,35.0,122.0,109.0,192.0,177.0,24.0});
		bh.consume(collection.contains(48.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(10.0,119.0,117.0,89.0,188.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(30.0,83.0,47.0,66.0,140.0,139.0,180.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,52.0,146.0,179.0)));
		bh.consume(collection.contains(191.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,193.0,77.0,78.0)));
		bh.consume(collection.remove(3.0));
		bh.consume(collection.remove(73.0));
		bh.consume(collection.contains(111.0));
		bh.consume(collection.contains(156.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(143.0,84.0,63.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(167.0,91.0,109.0,118.0,155.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(12.0,163.0,109.0,157.0,28.0,170.0,120.0,193.0)));
		bh.consume(collection.contains(185.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(106.0,110.0,30.0,70.0,81.0,49.0)));
		collection.toArray(new Double[] {149.0,62.0,130.0,20.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(167.0,168.0,60.0,140.0,125.0,154.0,145.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(46.0,50.0,80.0,28.0,40.0,180.0,74.0,19.0,7.0)));
		bh.consume(collection.contains(131.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(187.0,6.0,84.0,174.0,6.0,150.0,35.0,95.0,161.0)));
		collection.toArray(new Double[] {146.0,114.0,104.0,93.0,70.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,31.0,131.0,6.0,7.0,185.0,156.0,129.0)));
		bh.consume(collection.contains(31.0));
		bh.consume(collection.add(8.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,151.0,84.0,63.0,183.0,145.0,178.0,40.0,18.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(161.0,95.0,145.0)));
		bh.consume(collection.contains(41.0));
		bh.consume(collection.contains(175.0));
		collection.toArray(new Double[] {152.0,83.0,27.0,194.0,198.0});
		bh.consume(collection.contains(112.0));
		collection.toArray(new Double[] {72.0,81.0,129.0,103.0,60.0,42.0,3.0});
		bh.consume(collection.contains(73.0));
		collection.toArray(new Double[] {8.0,46.0,162.0,107.0,171.0,62.0,57.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(3.0,169.0,98.0,129.0,78.0,70.0,154.0,136.0)));
		collection.toArray(new Double[] {75.0,111.0,101.0,38.0,165.0});
		bh.consume(collection.contains(116.0));
		bh.consume(collection.add(10.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(105.0,37.0,89.0,187.0,177.0,178.0)));
		bh.consume(collection.contains(138.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,191.0,71.0,26.0,36.0,153.0,125.0,132.0,117.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,193.0,89.0,2.0,153.0,74.0,73.0)));
		bh.consume(collection.remove(10.0));
		bh.consume(collection.contains(67.0));
		bh.consume(collection.add(33.0));
		bh.consume(collection.contains(137.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,186.0,49.0,176.0)));
		collection.toArray(new Double[] {5.0,157.0,36.0,197.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(78.0,112.0,111.0)));
		bh.consume(collection.add(200.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,85.0,38.0,46.0,124.0,72.0,40.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,188.0,11.0,12.0,71.0,151.0)));
		collection.toArray(new Double[] {90.0,17.0,129.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,137.0,139.0,12.0,191.0,10.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(149.0,58.0,60.0,11.0,185.0,92.0,86.0,174.0,131.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,168.0,10.0,93.0,162.0,51.0,100.0,121.0,179.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,72.0,70.0,28.0,4.0,43.0,126.0,114.0,191.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,1.0,53.0,176.0,50.0,186.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,29.0,195.0,137.0,22.0,150.0,24.0)));
		collection.toArray(new Double[] {14.0,149.0,141.0,54.0,73.0,91.0,39.0});
		bh.consume(collection.add(5.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,160.0,55.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,29.0,113.0)));
		bh.consume(collection.add(20.0));
		bh.consume(collection.add(63.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,74.0,157.0,17.0,109.0,8.0,82.0,119.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,67.0,127.0,187.0,167.0,176.0,153.0,184.0)));
		collection.toArray(new Double[] {153.0,163.0,127.0,113.0});
		bh.consume(collection.contains(179.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(199.0,102.0,129.0)));
		bh.consume(collection.add(75.0));
		collection.toArray(new Double[] {1.0,181.0,92.0,145.0,166.0,54.0,173.0,197.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,77.0,111.0,59.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,75.0,81.0,189.0,175.0,199.0,38.0,191.0)));
		bh.consume(collection.add(90.0));
		bh.consume(collection.add(91.0));
		collection.toArray(new Double[] {191.0,167.0,37.0,197.0,122.0,150.0,18.0,31.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,12.0,166.0,8.0,57.0,20.0)));
		bh.consume(collection.remove(17.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(178.0,69.0,157.0,22.0)));
		bh.consume(collection.contains(109.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,71.0,172.0,86.0,110.0,162.0)));
		bh.consume(collection.contains(95.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(22.0,16.0,135.0,56.0,22.0,70.0,56.0,117.0,175.0)));
		bh.consume(collection.contains(195.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(11.0,164.0,65.0,38.0,36.0,68.0,110.0,98.0,134.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,164.0,128.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,130.0,106.0,85.0)));
		bh.consume(collection.contains(68.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(90.0,155.0,55.0,60.0)));
		bh.consume(collection.contains(167.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,163.0,82.0,119.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,115.0,94.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,141.0,115.0,88.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(157.0,47.0,149.0,153.0,32.0,8.0,74.0,29.0)));
		bh.consume(collection.contains(152.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,43.0,52.0)));
		bh.consume(collection.contains(178.0));
		bh.consume(collection.contains(181.0));
		bh.consume(collection.add(163.0));
		bh.consume(collection.contains(153.0));
		bh.consume(collection.add(35.0));
		bh.consume(collection.contains(199.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,119.0,33.0)));
		bh.consume(collection.contains(6.0));
		bh.consume(collection.contains(122.0));
		bh.consume(collection.contains(172.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(153.0,88.0,160.0,89.0,121.0,112.0,12.0,116.0,124.0)));
		bh.consume(collection.contains(168.0));
		collection.toArray(new Double[] {158.0,147.0,150.0,76.0,183.0,20.0,55.0,48.0});
		bh.consume(collection.add(42.0));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(128.0,50.0,28.0,100.0,173.0,187.0,31.0,115.0,111.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(94.0,44.0,38.0,68.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,153.0,62.0,35.0,135.0,106.0,84.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(32.0,150.0,113.0,120.0,69.0,186.0,9.0,42.0,35.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,185.0,88.0,6.0,21.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,151.0,163.0,164.0,88.0,9.0,121.0,60.0,22.0)));
		bh.consume(collection.contains(195.0));
		collection.toArray(new Double[] {87.0,139.0,85.0,96.0,91.0,49.0});
		bh.consume(collection.add(70.0));
		bh.consume(collection.contains(5.0));
		collection.toArray(new Double[] {77.0,93.0,189.0,44.0,88.0,167.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(159.0,101.0,130.0,77.0,74.0,138.0,151.0,75.0)));
		bh.consume(collection.contains(146.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,5.0,68.0,100.0,22.0,175.0)));
		collection.toArray(new Double[] {35.0,98.0,85.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(118.0,163.0,149.0,46.0,148.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(126.0,164.0,89.0,164.0)));
		bh.consume(collection.contains(4.0));
		collection.toArray(new Double[] {198.0,139.0,191.0,17.0,146.0,99.0,142.0,62.0});
		bh.consume(collection.add(104.0));
		bh.consume(collection.add(24.0));
		bh.consume(collection.contains(196.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,27.0,191.0,148.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(195.0,174.0,13.0,143.0,182.0,192.0,116.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(112.0,35.0,125.0,59.0,38.0,183.0,15.0,142.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,86.0,43.0,157.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(131.0,153.0,194.0,19.0)));
		bh.consume(collection.contains(181.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,116.0,137.0,23.0)));
		collection.toArray(new Double[] {189.0,27.0,108.0,83.0,79.0});
		bh.consume(collection.contains(162.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(150.0,152.0,9.0,184.0,116.0,159.0,169.0,16.0)));
		bh.consume(collection.contains(8.0));
		bh.consume(collection.contains(7.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,43.0,43.0,84.0,31.0,193.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,138.0,144.0,178.0,6.0,4.0,101.0,183.0,7.0)));
		bh.consume(collection.add(130.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,28.0,9.0,186.0,123.0,114.0,13.0,7.0,149.0)));
		bh.consume(collection.contains(78.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,180.0,129.0,159.0,125.0,187.0)));
		collection.toArray(new Double[] {179.0,41.0,19.0,194.0,135.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(171.0,86.0,45.0,177.0,35.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,14.0,98.0,102.0,89.0,77.0,150.0,176.0)));
		collection.toArray(new Double[] {60.0,22.0,154.0,104.0,29.0,66.0,60.0,129.0,70.0});
		bh.consume(collection.add(20.0));
		bh.consume(collection.add(74.0));
		collection.toArray(new Double[] {186.0,3.0,23.0,138.0,78.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(30.0,188.0,134.0,113.0,52.0,60.0)));
		bh.consume(collection.contains(40.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(62.0,107.0,108.0,97.0,52.0,193.0,77.0,200.0,15.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,59.0,16.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,48.0,113.0,169.0,198.0,22.0,148.0,101.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(54.0,39.0,120.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,147.0,153.0,68.0,160.0,53.0,177.0,50.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(105.0,98.0,63.0,147.0,12.0,86.0,8.0,146.0)));
		collection.toArray(new Double[] {64.0,44.0,86.0});
		collection.toArray(new Double[] {53.0,7.0,174.0,122.0,51.0,104.0,112.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(168.0,31.0,63.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,86.0,73.0,6.0,55.0,154.0,54.0,102.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(182.0,125.0,193.0,160.0,170.0,81.0,116.0,7.0)));
		collection.toArray(new Double[] {190.0,96.0,123.0,174.0,112.0,123.0});
		bh.consume(collection.contains(115.0));
		collection.toArray(new Double[] {83.0,144.0,170.0,8.0,67.0,97.0,144.0,54.0,87.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,59.0,196.0)));
		bh.consume(collection.contains(61.0));
		bh.consume(collection.contains(53.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,121.0,22.0,62.0)));
		collection.toArray(new Double[] {13.0,24.0,31.0});
		collection.toArray(new Double[] {151.0,171.0,148.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,56.0,154.0,167.0,44.0)));
		bh.consume(collection.add(70.0));
		bh.consume(collection.remove(72.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,193.0,183.0)));
		bh.consume(collection.contains(76.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,48.0,95.0,116.0,60.0,158.0,143.0,66.0,59.0)));
		bh.consume(collection.add(51.0));
		bh.consume(collection.add(118.0));
		bh.consume(collection.contains(197.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,58.0,44.0,147.0,183.0,85.0,159.0,171.0,152.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(131.0,21.0,121.0,132.0,65.0,3.0,61.0,171.0,138.0)));
		bh.consume(collection.add(160.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(170.0,186.0,141.0,39.0,174.0,143.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,119.0,177.0,96.0,190.0,189.0)));
		bh.consume(collection.add(74.0));
		bh.consume(collection.contains(98.0));
		bh.consume(collection.add(52.0));
		collection.toArray(new Double[] {63.0,182.0,79.0,31.0,94.0,142.0,155.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(1.0,186.0,162.0,78.0,38.0,190.0,141.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,89.0,50.0,112.0,135.0,120.0,63.0,182.0)));
		bh.consume(collection.contains(62.0));
		collection.toArray(new Double[] {134.0,51.0,60.0,33.0,120.0,26.0,189.0,21.0,30.0});
		bh.consume(collection.contains(194.0));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(128.0,114.0,119.0,158.0,131.0,37.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,58.0,39.0,187.0,188.0,134.0,117.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,68.0,116.0,19.0)));
		bh.consume(collection.add(38.0));
		bh.consume(collection.contains(99.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,160.0,140.0,153.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(55.0,162.0,46.0,49.0,182.0,24.0,133.0,66.0,29.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,98.0,147.0,70.0,189.0)));
		bh.consume(collection.add(70.0));
		bh.consume(collection.contains(7.0));
		collection.toArray(new Double[] {124.0,125.0,93.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(156.0,99.0,187.0,70.0)));
		bh.consume(collection.contains(25.0));
		bh.consume(collection.contains(32.0));
		bh.consume(collection.contains(60.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(171.0,189.0,189.0,3.0,158.0,181.0,65.0,115.0)));
		collection.toArray(new Double[] {151.0,159.0,25.0,189.0,60.0,28.0});
		bh.consume(collection.contains(73.0));
		collection.toArray(new Double[] {159.0,3.0,169.0,40.0,168.0,197.0,194.0,96.0,122.0});
		bh.consume(collection.contains(114.0));
		bh.consume(collection.contains(74.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(65.0,200.0,13.0,149.0,33.0,166.0,129.0,29.0,2.0)));
		bh.consume(collection.contains(7.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(18.0,182.0,12.0,1.0,184.0,94.0,20.0,194.0)));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(81.0,26.0,179.0,89.0,28.0,17.0,115.0,69.0,160.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,74.0,33.0,103.0,26.0,12.0,143.0,43.0,38.0)));
		collection.toArray(new Double[] {178.0,200.0,148.0,11.0,198.0,45.0,194.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,75.0,112.0,173.0,169.0,132.0,129.0,125.0)));
		collection.toArray(new Double[] {23.0,42.0,79.0,88.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(193.0,133.0,14.0,115.0,195.0,72.0,108.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,143.0,97.0,49.0,55.0,108.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(157.0,161.0,185.0,135.0,22.0,38.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,181.0,82.0,111.0,127.0,200.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(181.0,103.0,28.0,71.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,179.0,25.0,13.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(195.0,102.0,114.0,147.0,34.0,157.0,174.0)));
		collection.toArray(new Double[] {95.0,176.0,187.0,53.0,3.0,137.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,135.0,76.0,126.0)));
		collection.toArray(new Double[] {41.0,171.0,94.0,130.0,117.0,189.0});
		collection.toArray(new Double[] {85.0,31.0,190.0,191.0,2.0,8.0,100.0,77.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(46.0,186.0,149.0,22.0,67.0,125.0,21.0,167.0,155.0)));
		bh.consume(collection.add(87.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,169.0,10.0,137.0)));
		bh.consume(collection.contains(30.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(69.0,45.0,183.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,40.0,150.0,187.0,102.0,32.0,86.0,74.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,188.0,106.0,160.0,65.0,17.0,109.0,66.0)));
	}
}
