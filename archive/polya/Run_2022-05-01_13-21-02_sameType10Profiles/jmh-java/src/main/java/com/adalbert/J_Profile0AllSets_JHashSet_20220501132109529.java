package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile0AllSets_JHashSet_20220501132109529 {
	java.util.HashSet<Double> collection = new java.util.HashSet<>();
	@Setup(Level.Invocation)
	public void setupJHashSet() {
		collection = new java.util.HashSet<>();
		collection.add(120.0);
		collection.add(19.0);
		collection.add(188.0);
		collection.add(9.0);
		collection.add(48.0);
		collection.add(158.0);
		collection.add(63.0);
		collection.add(62.0);
		collection.add(151.0);
		collection.add(149.0);
		collection.add(96.0);
		collection.add(67.0);
		collection.add(146.0);
		collection.add(112.0);
		collection.add(133.0);
		collection.add(195.0);
		collection.add(138.0);
		collection.add(22.0);
		collection.add(124.0);
		collection.add(101.0);
		collection.add(155.0);
		collection.add(44.0);
		collection.add(37.0);
		collection.add(115.0);
		collection.add(126.0);
		collection.add(104.0);
		collection.add(31.0);
		collection.add(96.0);
		collection.add(194.0);
		collection.add(145.0);
		collection.add(96.0);
		collection.add(45.0);
		collection.add(99.0);
		collection.add(75.0);
		collection.add(154.0);
		collection.add(85.0);
		collection.add(196.0);
		collection.add(51.0);
		collection.add(11.0);
		collection.add(56.0);
		collection.add(198.0);
		collection.add(175.0);
		collection.add(33.0);
		collection.add(173.0);
		collection.add(54.0);
		collection.add(15.0);
		collection.add(5.0);
		collection.add(141.0);
		collection.add(144.0);
		collection.add(41.0);
		collection.add(198.0);
		collection.add(163.0);
		collection.add(161.0);
		collection.add(178.0);
		collection.add(12.0);
		collection.add(85.0);
		collection.add(101.0);
		collection.add(33.0);
		collection.add(15.0);
		collection.add(60.0);
		collection.add(115.0);
		collection.add(197.0);
		collection.add(125.0);
		collection.add(195.0);
		collection.add(142.0);
		collection.add(174.0);
		collection.add(196.0);
		collection.add(200.0);
		collection.add(124.0);
		collection.add(191.0);
		collection.add(133.0);
		collection.add(4.0);
		collection.add(119.0);
		collection.add(135.0);
		collection.add(104.0);
		collection.add(63.0);
		collection.add(145.0);
		collection.add(192.0);
		collection.add(58.0);
		collection.add(107.0);
		collection.add(38.0);
		collection.add(132.0);
		collection.add(34.0);
		collection.add(104.0);
		collection.add(8.0);
		collection.add(34.0);
		collection.add(116.0);
		collection.add(148.0);
		collection.add(85.0);
		collection.add(7.0);
		collection.add(97.0);
		collection.add(40.0);
		collection.add(1.0);
		collection.add(11.0);
		collection.add(101.0);
		collection.add(35.0);
		collection.add(57.0);
		collection.add(93.0);
		collection.add(21.0);
		collection.add(117.0);
		collection.add(150.0);
		collection.add(46.0);
		collection.add(153.0);
		collection.add(172.0);
		collection.add(142.0);
		collection.add(99.0);
		collection.add(189.0);
		collection.add(91.0);
		collection.add(19.0);
		collection.add(89.0);
		collection.add(35.0);
		collection.add(103.0);
		collection.add(30.0);
		collection.add(36.0);
		collection.add(170.0);
		collection.add(98.0);
		collection.add(47.0);
		collection.add(82.0);
		collection.add(76.0);
		collection.add(134.0);
		collection.add(150.0);
		collection.add(128.0);
		collection.add(76.0);
		collection.add(163.0);
		collection.add(192.0);
		collection.add(191.0);
		collection.add(65.0);
		collection.add(73.0);
		collection.add(192.0);
		collection.add(115.0);
		collection.add(97.0);
		collection.add(141.0);
		collection.add(126.0);
		collection.add(142.0);
		collection.add(35.0);
		collection.add(100.0);
		collection.add(182.0);
		collection.add(15.0);
		collection.add(156.0);
		collection.add(12.0);
		collection.add(199.0);
		collection.add(33.0);
		collection.add(54.0);
		collection.add(168.0);
		collection.add(57.0);
		collection.add(178.0);
		collection.add(8.0);
		collection.add(38.0);
		collection.add(11.0);
		collection.add(191.0);
		collection.add(166.0);
		collection.add(63.0);
		collection.add(194.0);
		collection.add(177.0);
		collection.add(196.0);
		collection.add(110.0);
		collection.add(192.0);
		collection.add(25.0);
		collection.add(30.0);
		collection.add(129.0);
		collection.add(113.0);
		collection.add(186.0);
		collection.add(159.0);
		collection.add(174.0);
		collection.add(28.0);
		collection.add(113.0);
		collection.add(71.0);
		collection.add(186.0);
		collection.add(21.0);
		collection.add(180.0);
		collection.add(173.0);
		collection.add(89.0);
		collection.add(37.0);
		collection.add(15.0);
		collection.add(53.0);
		collection.add(140.0);
		collection.add(116.0);
		collection.add(178.0);
		collection.add(112.0);
		collection.add(154.0);
		collection.add(59.0);
		collection.add(42.0);
		collection.add(154.0);
		collection.add(84.0);
		collection.add(173.0);
		collection.add(72.0);
		collection.add(72.0);
		collection.add(184.0);
		collection.add(86.0);
		collection.add(67.0);
		collection.add(1.0);
		collection.add(57.0);
		collection.add(104.0);
		collection.add(138.0);
		collection.add(194.0);
		collection.add(29.0);
		collection.add(195.0);
		collection.add(68.0);
		collection.add(41.0);
		collection.add(41.0);
		collection.add(143.0);
		collection.add(140.0);
		collection.add(188.0);
		collection.add(88.0);
		collection.add(164.0);
		collection.add(113.0);
		collection.add(111.0);
		collection.add(1.0);
		collection.add(52.0);
		collection.add(91.0);
		collection.add(118.0);
		collection.add(28.0);
		collection.add(61.0);
		collection.add(8.0);
		collection.add(64.0);
		collection.add(160.0);
		collection.add(78.0);
		collection.add(112.0);
		collection.add(131.0);
		collection.add(176.0);
		collection.add(169.0);
		collection.add(80.0);
		collection.add(85.0);
		collection.add(26.0);
		collection.add(51.0);
		collection.add(35.0);
		collection.add(19.0);
		collection.add(45.0);
		collection.add(20.0);
		collection.add(30.0);
		collection.add(29.0);
		collection.add(41.0);
		collection.add(75.0);
		collection.add(66.0);
		collection.add(133.0);
		collection.add(195.0);
		collection.add(155.0);
		collection.add(6.0);
		collection.add(84.0);
		collection.add(76.0);
		collection.add(148.0);
		collection.add(90.0);
		collection.add(120.0);
		collection.add(68.0);
		collection.add(113.0);
		collection.add(81.0);
		collection.add(195.0);
		collection.add(48.0);
		collection.add(167.0);
		collection.add(105.0);
		collection.add(158.0);
		collection.add(75.0);
		collection.add(37.0);
		collection.add(194.0);
		collection.add(145.0);
		collection.add(167.0);
		collection.add(103.0);
		collection.add(58.0);
		collection.add(28.0);
		collection.add(134.0);
		collection.add(98.0);
		collection.add(133.0);
		collection.add(52.0);
		collection.add(191.0);
		collection.add(174.0);
		collection.add(124.0);
		collection.add(68.0);
		collection.add(100.0);
		collection.add(138.0);
		collection.add(24.0);
		collection.add(179.0);
		collection.add(174.0);
		collection.add(45.0);
		collection.add(190.0);
		collection.add(23.0);
		collection.add(98.0);
		collection.add(78.0);
		collection.add(35.0);
		collection.add(185.0);
		collection.add(103.0);
		collection.add(17.0);
		collection.add(44.0);
		collection.add(39.0);
		collection.add(191.0);
		collection.add(94.0);
		collection.add(9.0);
		collection.add(43.0);
		collection.add(8.0);
		collection.add(124.0);
		collection.add(126.0);
		collection.add(103.0);
		collection.add(43.0);
		collection.add(4.0);
		collection.add(76.0);
		collection.add(129.0);
		collection.add(100.0);
		collection.add(60.0);
		collection.add(27.0);
		collection.add(139.0);
		collection.add(139.0);
		collection.add(180.0);
		collection.add(194.0);
		collection.add(92.0);
		collection.add(9.0);
		collection.add(84.0);
		collection.add(172.0);
		collection.add(199.0);
		collection.add(149.0);
		collection.add(184.0);
		collection.add(75.0);
		collection.add(172.0);
		collection.add(62.0);
		collection.add(131.0);
		collection.add(196.0);
		collection.add(143.0);
		collection.add(97.0);
		collection.add(50.0);
		collection.add(115.0);
		collection.add(44.0);
		collection.add(98.0);
		collection.add(143.0);
		collection.add(98.0);
		collection.add(53.0);
		collection.add(179.0);
		collection.add(6.0);
		collection.add(79.0);
		collection.add(104.0);
		collection.add(125.0);
		collection.add(186.0);
		collection.add(169.0);
		collection.add(110.0);
		collection.add(113.0);
		collection.add(65.0);
		collection.add(3.0);
		collection.add(137.0);
		collection.add(116.0);
		collection.add(10.0);
		collection.add(76.0);
		collection.add(199.0);
		collection.add(141.0);
		collection.add(175.0);
		collection.add(195.0);
		collection.add(158.0);
		collection.add(88.0);
		collection.add(24.0);
		collection.add(132.0);
		collection.add(84.0);
		collection.add(159.0);
		collection.add(150.0);
		collection.add(62.0);
		collection.add(12.0);
		collection.add(57.0);
		collection.add(51.0);
		collection.add(109.0);
		collection.add(124.0);
		collection.add(91.0);
		collection.add(125.0);
		collection.add(36.0);
		collection.add(186.0);
		collection.add(136.0);
		collection.add(177.0);
		collection.add(101.0);
		collection.add(18.0);
		collection.add(69.0);
		collection.add(70.0);
		collection.add(155.0);
		collection.add(178.0);
		collection.add(190.0);
		collection.add(8.0);
		collection.add(165.0);
		collection.add(16.0);
		collection.add(133.0);
		collection.add(66.0);
		collection.add(190.0);
		collection.add(109.0);
		collection.add(79.0);
		collection.add(151.0);
		collection.add(27.0);
		collection.add(154.0);
		collection.add(64.0);
		collection.add(65.0);
		collection.add(194.0);
		collection.add(44.0);
		collection.add(20.0);
		collection.add(106.0);
		collection.add(5.0);
		collection.add(111.0);
		collection.add(112.0);
		collection.add(190.0);
		collection.add(129.0);
		collection.add(162.0);
		collection.add(50.0);
		collection.add(149.0);
		collection.add(103.0);
		collection.add(94.0);
		collection.add(174.0);
		collection.add(25.0);
		collection.add(126.0);
		collection.add(26.0);
		collection.add(152.0);
		collection.add(177.0);
		collection.add(87.0);
		collection.add(5.0);
		collection.add(17.0);
		collection.add(132.0);
		collection.add(132.0);
		collection.add(28.0);
		collection.add(114.0);
		collection.add(145.0);
		collection.add(41.0);
		collection.add(7.0);
		collection.add(184.0);
		collection.add(38.0);
		collection.add(66.0);
		collection.add(120.0);
		collection.add(142.0);
		collection.add(130.0);
		collection.add(6.0);
		collection.add(107.0);
		collection.add(180.0);
		collection.add(186.0);
		collection.add(12.0);
		collection.add(52.0);
		collection.add(127.0);
		collection.add(69.0);
		collection.add(185.0);
		collection.add(162.0);
		collection.add(145.0);
		collection.add(150.0);
		collection.add(36.0);
		collection.add(6.0);
		collection.add(14.0);
		collection.add(56.0);
		collection.add(112.0);
		collection.add(95.0);
		collection.add(36.0);
		collection.add(117.0);
		collection.add(115.0);
		collection.add(92.0);
		collection.add(77.0);
		collection.add(95.0);
		collection.add(3.0);
		collection.add(151.0);
		collection.add(180.0);
		collection.add(48.0);
		collection.add(1.0);
		collection.add(26.0);
		collection.add(102.0);
		collection.add(35.0);
		collection.add(22.0);
		collection.add(114.0);
		collection.add(17.0);
		collection.add(135.0);
		collection.add(94.0);
		collection.add(52.0);
		collection.add(80.0);
		collection.add(59.0);
		collection.add(82.0);
		collection.add(67.0);
		collection.add(52.0);
		collection.add(126.0);
		collection.add(124.0);
		collection.add(176.0);
		collection.add(170.0);
		collection.add(97.0);
		collection.add(11.0);
		collection.add(145.0);
		collection.add(92.0);
		collection.add(172.0);
		collection.add(28.0);
		collection.add(168.0);
		collection.add(181.0);
		collection.add(62.0);
		collection.add(57.0);
		collection.add(1.0);
		collection.add(164.0);
		collection.add(27.0);
		collection.add(155.0);
		collection.add(104.0);
		collection.add(98.0);
		collection.add(26.0);
		collection.add(44.0);
		collection.add(175.0);
		collection.add(30.0);
		collection.add(43.0);
		collection.add(77.0);
		collection.add(146.0);
		collection.add(50.0);
		collection.add(30.0);
		collection.add(61.0);
		collection.add(55.0);
		collection.add(187.0);
		collection.add(25.0);
		collection.add(110.0);
		collection.add(98.0);
		collection.add(79.0);
		collection.add(146.0);
		collection.add(187.0);
		collection.add(173.0);
		collection.add(125.0);
		collection.add(88.0);
		collection.add(54.0);
		collection.add(18.0);
		collection.add(128.0);
		collection.add(181.0);
		collection.add(39.0);
		collection.add(191.0);
		collection.add(163.0);
		collection.add(169.0);
		collection.add(144.0);
		collection.add(20.0);
		collection.add(12.0);
		collection.add(15.0);
		collection.add(129.0);
		collection.add(68.0);
		collection.add(80.0);
		collection.add(113.0);
		collection.add(122.0);
		collection.add(81.0);
		collection.add(22.0);
		collection.add(64.0);
		collection.add(155.0);
		collection.add(148.0);
		collection.add(198.0);
		collection.add(121.0);
		collection.add(166.0);
		collection.add(97.0);
		collection.add(198.0);
		collection.add(66.0);
		collection.add(147.0);
		collection.add(196.0);
		collection.add(146.0);
		collection.add(165.0);
		collection.add(197.0);
		collection.add(50.0);
		collection.add(134.0);
		collection.add(111.0);
		collection.add(148.0);
		collection.add(11.0);
		collection.add(171.0);
		collection.add(59.0);
		collection.add(190.0);
		collection.add(82.0);
		collection.add(79.0);
		collection.add(149.0);
		collection.add(93.0);
		collection.add(103.0);
		collection.add(146.0);
		collection.add(105.0);
		collection.add(60.0);
		collection.add(95.0);
		collection.add(52.0);
		collection.add(47.0);
		collection.add(173.0);
		collection.add(70.0);
		collection.add(128.0);
		collection.add(188.0);
		collection.add(200.0);
		collection.add(56.0);
		collection.add(37.0);
		collection.add(111.0);
		collection.add(113.0);
		collection.add(9.0);
		collection.add(131.0);
		collection.add(32.0);
		collection.add(146.0);
		collection.add(60.0);
		collection.add(92.0);
		collection.add(40.0);
		collection.add(168.0);
		collection.add(154.0);
		collection.add(146.0);
		collection.add(95.0);
		collection.add(40.0);
		collection.add(158.0);
		collection.add(40.0);
		collection.add(55.0);
		collection.add(131.0);
		collection.add(51.0);
		collection.add(88.0);
		collection.add(152.0);
		collection.add(172.0);
		collection.add(177.0);
		collection.add(100.0);
		collection.add(18.0);
		collection.add(106.0);
		collection.add(155.0);
		collection.add(100.0);
		collection.add(167.0);
		collection.add(108.0);
		collection.add(107.0);
		collection.add(63.0);
		collection.add(130.0);
		collection.add(96.0);
		collection.add(104.0);
		collection.add(68.0);
		collection.add(90.0);
		collection.add(60.0);
		collection.add(68.0);
		collection.add(1.0);
		collection.add(119.0);
		collection.add(115.0);
		collection.add(6.0);
		collection.add(172.0);
		collection.add(66.0);
		collection.add(102.0);
		collection.add(123.0);
		collection.add(7.0);
		collection.add(66.0);
		collection.add(103.0);
		collection.add(56.0);
		collection.add(115.0);
		collection.add(50.0);
		collection.add(90.0);
		collection.add(34.0);
		collection.add(178.0);
		collection.add(5.0);
		collection.add(80.0);
		collection.add(8.0);
		collection.add(109.0);
		collection.add(199.0);
		collection.add(149.0);
		collection.add(112.0);
		collection.add(105.0);
		collection.add(135.0);
		collection.add(9.0);
		collection.add(186.0);
		collection.add(2.0);
		collection.add(78.0);
		collection.add(36.0);
		collection.add(63.0);
		collection.add(107.0);
		collection.add(118.0);
		collection.add(84.0);
		collection.add(85.0);
		collection.add(116.0);
		collection.add(155.0);
		collection.add(137.0);
		collection.add(173.0);
		collection.add(177.0);
		collection.add(118.0);
		collection.add(14.0);
		collection.add(37.0);
		collection.add(37.0);
		collection.add(190.0);
		collection.add(35.0);
		collection.add(120.0);
		collection.add(177.0);
		collection.add(137.0);
		collection.add(195.0);
		collection.add(63.0);
		collection.add(26.0);
		collection.add(28.0);
		collection.add(101.0);
		collection.add(42.0);
		collection.add(99.0);
		collection.add(113.0);
		collection.add(132.0);
		collection.add(47.0);
		collection.add(21.0);
		collection.add(157.0);
		collection.add(93.0);
		collection.add(66.0);
		collection.add(86.0);
		collection.add(170.0);
		collection.add(20.0);
		collection.add(105.0);
		collection.add(190.0);
		collection.add(108.0);
		collection.add(186.0);
		collection.add(81.0);
		collection.add(68.0);
		collection.add(119.0);
		collection.add(165.0);
		collection.add(114.0);
		collection.add(75.0);
		collection.add(161.0);
		collection.add(80.0);
		collection.add(112.0);
		collection.add(24.0);
		collection.add(55.0);
		collection.add(78.0);
		collection.add(185.0);
		collection.add(128.0);
		collection.add(23.0);
		collection.add(43.0);
		collection.add(26.0);
		collection.add(101.0);
		collection.add(126.0);
		collection.add(57.0);
		collection.add(141.0);
		collection.add(129.0);
		collection.add(84.0);
		collection.add(56.0);
		collection.add(40.0);
		collection.add(152.0);
		collection.add(126.0);
		collection.add(1.0);
		collection.add(182.0);
		collection.add(186.0);
		collection.add(71.0);
		collection.add(187.0);
		collection.add(171.0);
		collection.add(159.0);
		collection.add(79.0);
		collection.add(57.0);
		collection.add(116.0);
		collection.add(81.0);
		collection.add(151.0);
		collection.add(139.0);
		collection.add(115.0);
		collection.add(64.0);
		collection.add(50.0);
		collection.add(32.0);
		collection.add(109.0);
		collection.add(134.0);
		collection.add(120.0);
		collection.add(105.0);
		collection.add(100.0);
		collection.add(170.0);
		collection.add(111.0);
		collection.add(24.0);
		collection.add(173.0);
		collection.add(43.0);
		collection.add(100.0);
		collection.add(194.0);
		collection.add(75.0);
		collection.add(154.0);
		collection.add(59.0);
		collection.add(143.0);
		collection.add(155.0);
		collection.add(7.0);
		collection.add(147.0);
		collection.add(159.0);
		collection.add(157.0);
		collection.add(95.0);
		collection.add(189.0);
		collection.add(192.0);
		collection.add(184.0);
		collection.add(9.0);
		collection.add(91.0);
		collection.add(111.0);
		collection.add(130.0);
		collection.add(144.0);
		collection.add(98.0);
		collection.add(15.0);
		collection.add(135.0);
		collection.add(101.0);
		collection.add(1.0);
		collection.add(11.0);
		collection.add(116.0);
		collection.add(69.0);
		collection.add(72.0);
		collection.add(5.0);
		collection.add(14.0);
		collection.add(56.0);
		collection.add(105.0);
		collection.add(131.0);
		collection.add(160.0);
		collection.add(148.0);
		collection.add(71.0);
		collection.add(186.0);
		collection.add(188.0);
		collection.add(178.0);
		collection.add(163.0);
		collection.add(23.0);
		collection.add(151.0);
		collection.add(131.0);
		collection.add(53.0);
		collection.add(24.0);
		collection.add(6.0);
		collection.add(97.0);
		collection.add(110.0);
		collection.add(87.0);
		collection.add(126.0);
		collection.add(189.0);
		collection.add(150.0);
		collection.add(166.0);
		collection.add(175.0);
		collection.add(12.0);
		collection.add(139.0);
		collection.add(151.0);
		collection.add(173.0);
		collection.add(177.0);
		collection.add(120.0);
		collection.add(49.0);
		collection.add(22.0);
		collection.add(113.0);
		collection.add(130.0);
		collection.add(13.0);
		collection.add(26.0);
		collection.add(199.0);
		collection.add(103.0);
		collection.add(94.0);
		collection.add(89.0);
		collection.add(48.0);
		collection.add(115.0);
		collection.add(77.0);
		collection.add(132.0);
		collection.add(165.0);
		collection.add(189.0);
		collection.add(94.0);
		collection.add(200.0);
		collection.add(163.0);
		collection.add(25.0);
		collection.add(49.0);
		collection.add(12.0);
		collection.add(71.0);
		collection.add(89.0);
		collection.add(163.0);
		collection.add(33.0);
		collection.add(178.0);
		collection.add(75.0);
		collection.add(194.0);
		collection.add(81.0);
		collection.add(113.0);
		collection.add(59.0);
		collection.add(103.0);
		collection.add(174.0);
		collection.add(68.0);
		collection.add(89.0);
		collection.add(110.0);
		collection.add(155.0);
		collection.add(81.0);
		collection.add(102.0);
		collection.add(60.0);
		collection.add(149.0);
		collection.add(19.0);
		collection.add(36.0);
		collection.add(154.0);
		collection.add(131.0);
		collection.add(168.0);
		collection.add(78.0);
		collection.add(198.0);
		collection.add(85.0);
		collection.add(70.0);
		collection.add(127.0);
		collection.add(166.0);
		collection.add(3.0);
		collection.add(1.0);
		collection.add(155.0);
		collection.add(38.0);
		collection.add(22.0);
		collection.add(188.0);
		collection.add(56.0);
		collection.add(161.0);
		collection.add(162.0);
		collection.add(102.0);
		collection.add(48.0);
		collection.add(40.0);
		collection.add(72.0);
		collection.add(35.0);
		collection.add(45.0);
		collection.add(29.0);
		collection.add(196.0);
		collection.add(148.0);
		collection.add(28.0);
		collection.add(15.0);
		collection.add(27.0);
		collection.add(48.0);
		collection.add(19.0);
		collection.add(25.0);
		collection.add(151.0);
		collection.add(24.0);
		collection.add(77.0);
		collection.add(1.0);
		collection.add(148.0);
		collection.add(117.0);
		collection.add(154.0);
		collection.add(33.0);
		collection.add(125.0);
		collection.add(198.0);
		collection.add(142.0);
		collection.add(144.0);
		collection.add(153.0);
		collection.add(8.0);
		collection.add(137.0);
		collection.add(89.0);
		collection.add(10.0);
		collection.add(165.0);
		collection.add(82.0);
		collection.add(43.0);
		collection.add(143.0);
		collection.add(155.0);
		collection.add(132.0);
		collection.add(152.0);
		collection.add(20.0);
		collection.add(60.0);
		collection.add(135.0);
		collection.add(43.0);
		collection.add(62.0);
		collection.add(191.0);
		collection.add(87.0);
		collection.add(170.0);
		collection.add(163.0);
		collection.add(62.0);
		collection.add(22.0);
		collection.add(32.0);
		collection.add(1.0);
		collection.add(57.0);
		collection.add(119.0);
		collection.add(72.0);
		collection.add(136.0);
		collection.add(186.0);
		collection.add(84.0);
		collection.add(178.0);
		collection.add(6.0);
		collection.add(150.0);
		collection.add(89.0);
		collection.add(167.0);
		collection.add(107.0);
		collection.add(135.0);
		collection.add(120.0);
		collection.add(78.0);
		collection.add(178.0);
		collection.add(31.0);
		collection.add(132.0);
		collection.add(144.0);
		collection.add(118.0);
		collection.add(184.0);
		collection.add(34.0);
		collection.add(77.0);
		collection.add(59.0);
		collection.add(144.0);
		collection.add(70.0);
		collection.add(6.0);
		collection.add(25.0);
		collection.add(149.0);
		collection.add(135.0);
		collection.add(131.0);
		collection.add(167.0);
		collection.add(92.0);
		collection.add(58.0);
		collection.add(83.0);
		collection.add(117.0);
		collection.add(84.0);
		collection.add(23.0);
		collection.add(42.0);
		collection.add(98.0);
		collection.add(178.0);
		collection.add(26.0);
		collection.add(13.0);
		collection.add(200.0);
		collection.add(25.0);
		collection.add(52.0);
		collection.add(131.0);
		collection.add(157.0);
		collection.add(63.0);
		collection.add(148.0);
		collection.add(79.0);
		collection.add(94.0);
		collection.add(71.0);
		collection.add(92.0);
		collection.add(40.0);
		collection.add(41.0);
		collection.add(171.0);
		collection.add(154.0);
		collection.add(140.0);
		collection.add(190.0);
		collection.add(70.0);
		collection.add(198.0);
		collection.add(177.0);
		collection.add(83.0);
		collection.add(136.0);
		collection.add(2.0);
		collection.add(42.0);
		collection.add(134.0);
		collection.add(11.0);
		collection.add(34.0);
		collection.add(109.0);
		collection.add(180.0);
		collection.add(10.0);
		collection.add(194.0);
		collection.add(55.0);
		collection.add(196.0);
		collection.add(165.0);
		collection.add(47.0);
		collection.add(136.0);
		collection.add(26.0);
		collection.add(48.0);
		collection.add(169.0);
		collection.add(106.0);
		collection.add(117.0);
		collection.add(149.0);
		collection.add(5.0);
		collection.add(114.0);
		collection.add(46.0);
		collection.add(151.0);
		collection.add(190.0);
		collection.add(7.0);
		collection.add(44.0);
		collection.add(55.0);
		collection.add(26.0);
		collection.add(115.0);
		collection.add(21.0);
		collection.add(135.0);
		collection.add(6.0);
		collection.add(59.0);
		collection.add(148.0);
		collection.add(89.0);
		collection.add(124.0);
		collection.add(175.0);
		collection.add(190.0);
		collection.add(9.0);
		collection.add(27.0);
		collection.add(61.0);
		collection.add(172.0);
		collection.add(175.0);
		collection.add(75.0);
		collection.add(16.0);
		collection.add(51.0);
		collection.add(7.0);
		collection.add(61.0);
		collection.add(71.0);
		collection.add(44.0);
		collection.add(16.0);
		collection.add(199.0);
		collection.add(42.0);
		collection.add(161.0);
		collection.add(11.0);
		collection.add(15.0);
		collection.add(127.0);
		collection.add(43.0);
		collection.add(195.0);
		collection.add(108.0);
		collection.add(96.0);
		collection.add(61.0);
		collection.add(14.0);
		collection.add(175.0);
		collection.add(184.0);
		collection.add(182.0);
		collection.add(134.0);
		collection.add(63.0);
		collection.add(18.0);
		collection.add(105.0);
		collection.add(9.0);
		collection.add(61.0);
		collection.add(173.0);
		collection.add(5.0);
		collection.add(115.0);
		collection.add(159.0);
		collection.add(16.0);
		collection.add(50.0);
		collection.add(81.0);
		collection.add(192.0);
		collection.add(24.0);
		collection.add(94.0);
		collection.add(106.0);
		collection.add(135.0);
		collection.add(129.0);
		collection.add(16.0);
		collection.add(59.0);
		collection.add(106.0);
		collection.add(176.0);
		collection.add(53.0);
		collection.add(131.0);
		collection.add(28.0);
		collection.add(145.0);
		collection.add(65.0);
		collection.add(134.0);
		collection.add(27.0);
		collection.add(73.0);
		collection.add(141.0);
		collection.add(64.0);
		collection.add(4.0);
		collection.add(121.0);
		collection.add(185.0);
		collection.add(105.0);
		collection.add(111.0);
		collection.add(187.0);
		collection.add(72.0);
		collection.add(167.0);
		collection.add(99.0);
		collection.add(51.0);
		collection.add(197.0);
		collection.add(78.0);
		collection.add(179.0);
		collection.add(72.0);
		collection.add(34.0);
		collection.add(18.0);
		collection.add(149.0);
		collection.add(42.0);
		collection.add(61.0);
		collection.add(131.0);
		collection.add(95.0);
		collection.add(66.0);
		collection.add(24.0);
		collection.add(13.0);
		collection.add(180.0);
		collection.add(11.0);
		collection.add(119.0);
		collection.add(28.0);
		collection.add(135.0);
		collection.add(185.0);
		collection.add(63.0);
		collection.add(98.0);
		collection.add(116.0);
		collection.add(114.0);
		collection.add(113.0);
		collection.add(48.0);
		collection.add(77.0);
		collection.add(182.0);
		collection.add(33.0);
		collection.add(91.0);
		collection.add(112.0);
		collection.add(4.0);
		collection.add(102.0);
		collection.add(91.0);
		collection.add(15.0);
		collection.add(106.0);
		collection.add(59.0);
		collection.add(104.0);
		collection.add(82.0);
		collection.add(53.0);
		collection.add(49.0);
		collection.add(107.0);
		collection.add(75.0);
		collection.add(179.0);
		collection.add(9.0);
		collection.add(118.0);
		collection.add(182.0);
		collection.add(138.0);
		collection.add(110.0);
		collection.add(13.0);
		collection.add(42.0);
		collection.add(5.0);
		collection.add(111.0);
		collection.add(55.0);
		collection.add(118.0);
		collection.add(22.0);
		collection.add(21.0);
		collection.add(63.0);
		collection.add(129.0);
		collection.add(25.0);
		collection.add(185.0);
		collection.add(12.0);
		collection.add(157.0);
		collection.add(51.0);
		collection.add(197.0);
		collection.add(166.0);
		collection.add(193.0);
		collection.add(190.0);
		collection.add(143.0);
		collection.add(196.0);
		collection.add(76.0);
		collection.add(195.0);
		collection.add(97.0);
		collection.add(55.0);
		collection.add(100.0);
		collection.add(5.0);
		collection.add(124.0);
		collection.add(31.0);
		collection.add(69.0);
		collection.add(56.0);
		collection.add(127.0);
		collection.add(22.0);
		collection.add(53.0);
		collection.add(58.0);
		collection.add(99.0);
		collection.add(91.0);
		collection.add(192.0);
		collection.add(43.0);
		collection.add(92.0);
		collection.add(22.0);
		collection.add(10.0);
		collection.add(41.0);
		collection.add(60.0);
		collection.add(116.0);
		collection.add(85.0);
		collection.add(162.0);
		collection.add(45.0);
		collection.add(149.0);
		collection.add(194.0);
		collection.add(64.0);
		collection.add(32.0);
		collection.add(99.0);
		collection.add(184.0);
		collection.add(87.0);
		collection.add(86.0);
		collection.add(2.0);
		collection.add(11.0);
		collection.add(57.0);
		collection.add(6.0);
		collection.add(171.0);
		collection.add(58.0);
		collection.add(183.0);
		collection.add(133.0);
		collection.add(82.0);
		collection.add(107.0);
		collection.add(82.0);
		collection.add(34.0);
		collection.add(160.0);
		collection.add(126.0);
		collection.add(80.0);
		collection.add(144.0);
		collection.add(113.0);
		collection.add(183.0);
		collection.add(137.0);
		collection.add(6.0);
		collection.add(85.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JHashSet(Blackhole bh) {
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,7.0,146.0,168.0,67.0,191.0,157.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(136.0,192.0,105.0,97.0,107.0,162.0,186.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,52.0,13.0,55.0,54.0,179.0,34.0,83.0,49.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,148.0,35.0,7.0,79.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(116.0,177.0,15.0,153.0,198.0,171.0,152.0)));
		bh.consume(collection.add(99.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,55.0,58.0)));
		bh.consume(collection.add(136.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(149.0,184.0,118.0,68.0,188.0,52.0,155.0,168.0,62.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,199.0,9.0,34.0,70.0,17.0,195.0,181.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,113.0,102.0,115.0,146.0,16.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(81.0,55.0,32.0,71.0,58.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,82.0,73.0,52.0,124.0,42.0,194.0,151.0)));
		bh.consume(collection.contains(27.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(112.0,120.0,61.0)));
		collection.toArray(new Double[] {107.0,159.0,32.0,86.0,157.0,7.0,137.0,144.0,5.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(157.0,72.0,68.0,136.0,170.0,117.0,176.0)));
		bh.consume(collection.remove(101.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(91.0,131.0,121.0,129.0,36.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,197.0,150.0,73.0,103.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(1.0,119.0,157.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(122.0,78.0,131.0,195.0,75.0,50.0,124.0,4.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,132.0,125.0,90.0,198.0,41.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(111.0,40.0,81.0,146.0,192.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(125.0,88.0,74.0,45.0,81.0,45.0,42.0,104.0,127.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(102.0,70.0,111.0,9.0,89.0,190.0)));
		collection.toArray(new Double[] {62.0,198.0,79.0,141.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(31.0,200.0,159.0,118.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,8.0,114.0,68.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(76.0,152.0,164.0,113.0,10.0,64.0)));
		bh.consume(collection.contains(60.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,180.0,148.0,108.0,60.0,85.0)));
		bh.consume(collection.add(60.0));
		bh.consume(collection.add(159.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(178.0,79.0,11.0,173.0,85.0,117.0,164.0)));
		bh.consume(collection.contains(2.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(63.0,167.0,78.0,111.0,80.0,76.0,152.0,28.0,85.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(48.0,121.0,94.0)));
		bh.consume(collection.remove(99.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(109.0,133.0,143.0,63.0,89.0,29.0,38.0)));
		bh.consume(collection.contains(15.0));
		bh.consume(collection.contains(35.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(150.0,39.0,186.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,111.0,71.0,91.0)));
		bh.consume(collection.remove(89.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(91.0,80.0,152.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,144.0,199.0,45.0,26.0,28.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,143.0,45.0,76.0,151.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(75.0,84.0,24.0,85.0,137.0,78.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,174.0,71.0,159.0,56.0,13.0,56.0,40.0,50.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(78.0,153.0,193.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,55.0,135.0,84.0,86.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(82.0,55.0,25.0,98.0,95.0,89.0)));
		collection.toArray(new Double[] {170.0,135.0,182.0,115.0,29.0});
		bh.consume(collection.remove(13.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,21.0,198.0,87.0,48.0,62.0)));
		bh.consume(collection.add(55.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,87.0,141.0,76.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,146.0,196.0,25.0,162.0,58.0,15.0,115.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,64.0,167.0)));
		bh.consume(collection.add(139.0));
		collection.toArray(new Double[] {157.0,45.0,103.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,21.0,180.0)));
		collection.toArray(new Double[] {81.0,122.0,121.0,30.0,2.0,186.0,146.0});
		bh.consume(collection.contains(55.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(131.0,120.0,119.0,105.0,107.0,171.0)));
		bh.consume(collection.add(15.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(106.0,171.0,9.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,6.0,106.0,173.0,193.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(159.0,165.0,76.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(116.0,120.0,41.0,54.0,93.0,60.0,200.0,179.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(138.0,137.0,114.0,87.0,114.0,153.0)));
		bh.consume(collection.add(30.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(98.0,106.0,48.0,111.0,135.0)));
		bh.consume(collection.remove(181.0));
		bh.consume(collection.add(46.0));
		bh.consume(collection.add(133.0));
		bh.consume(collection.remove(132.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,89.0,70.0,171.0,185.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(148.0,43.0,187.0,172.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,145.0,52.0,7.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,137.0,66.0,85.0,25.0,127.0,102.0,179.0,63.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,70.0,99.0,83.0,149.0)));
		bh.consume(collection.contains(116.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,145.0,36.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(97.0,29.0,114.0,156.0,87.0,28.0,45.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,130.0,27.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(178.0,190.0,152.0,199.0,71.0,169.0,131.0,167.0,150.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(194.0,136.0,98.0,108.0,186.0,199.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(162.0,112.0,167.0,182.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,151.0,126.0,64.0)));
		bh.consume(collection.contains(154.0));
		bh.consume(collection.contains(51.0));
		bh.consume(collection.remove(12.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,173.0,96.0,109.0,170.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(102.0,52.0,18.0,86.0,139.0,141.0,81.0,26.0,178.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(153.0,95.0,146.0,21.0,89.0,78.0,11.0,47.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,162.0,83.0,194.0,19.0,61.0,177.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,168.0,67.0,73.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,58.0,153.0,194.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(178.0,60.0,98.0,136.0,76.0,99.0,39.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,144.0,177.0,31.0,2.0,116.0,57.0,108.0)));
		bh.consume(collection.add(46.0));
		collection.toArray(new Double[] {190.0,148.0,173.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,78.0,96.0,126.0,105.0,11.0,157.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(54.0,31.0,141.0,30.0,22.0,11.0,174.0)));
		bh.consume(collection.contains(37.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,172.0,176.0,80.0,122.0,92.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,139.0,145.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,182.0,82.0,185.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,175.0,182.0,9.0,54.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(18.0,148.0,129.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,72.0,158.0,106.0)));
		bh.consume(collection.add(27.0));
		bh.consume(collection.add(198.0));
		bh.consume(collection.add(116.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(6.0,143.0,175.0,25.0,71.0,103.0,190.0,29.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(195.0,27.0,185.0,68.0,104.0,113.0,95.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(65.0,97.0,86.0,196.0,22.0,115.0)));
		collection.toArray(new Double[] {81.0,147.0,84.0,188.0,159.0,124.0,15.0,159.0,34.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,132.0,17.0,177.0,199.0)));
		collection.toArray(new Double[] {135.0,153.0,113.0,155.0,3.0,200.0,94.0});
		bh.consume(collection.remove(173.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(18.0,200.0,75.0,103.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,118.0,25.0,106.0,55.0,152.0,160.0,34.0,179.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,86.0,6.0,135.0,51.0,139.0,111.0,142.0,197.0)));
		bh.consume(collection.remove(173.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,147.0,58.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(198.0,21.0,48.0,77.0,110.0,163.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(129.0,85.0,65.0,167.0,179.0,161.0,186.0,1.0)));
		collection.toArray(new Double[] {160.0,59.0,110.0,43.0,198.0});
		bh.consume(collection.contains(111.0));
		bh.consume(collection.add(21.0));
		bh.consume(collection.contains(154.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(137.0,148.0,108.0,41.0,177.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,6.0,42.0,138.0,115.0,165.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(1.0,103.0,92.0,197.0,161.0,41.0,174.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(127.0,114.0,20.0,163.0,174.0,103.0,4.0,50.0,119.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(161.0,116.0,145.0,67.0,114.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,173.0,99.0,34.0,91.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,83.0,57.0,176.0,185.0,113.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,92.0,194.0,99.0,109.0,164.0,57.0,77.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(156.0,173.0,30.0,95.0)));
		bh.consume(collection.remove(160.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(12.0,84.0,198.0,109.0,137.0,86.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(150.0,127.0,18.0,175.0,106.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,33.0,142.0,8.0,195.0,28.0,147.0,6.0,56.0)));
		bh.consume(collection.remove(156.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(187.0,168.0,168.0,36.0,131.0,17.0,14.0,172.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(1.0,3.0,50.0,133.0,11.0,165.0,158.0,82.0,38.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,155.0,125.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(131.0,94.0,30.0,63.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(117.0,106.0,182.0,5.0,87.0,19.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,36.0,96.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(98.0,75.0,60.0,153.0,39.0,181.0,189.0)));
		bh.consume(collection.contains(47.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(175.0,18.0,104.0,194.0,129.0,153.0,180.0,119.0)));
		bh.consume(collection.remove(117.0));
		bh.consume(collection.add(187.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(140.0,6.0,99.0,68.0,107.0,50.0,70.0,173.0)));
		bh.consume(collection.remove(67.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,163.0,126.0,85.0,60.0,177.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(35.0,5.0,66.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(134.0,56.0,195.0,129.0,141.0,44.0)));
		collection.toArray(new Double[] {165.0,1.0,64.0,82.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,5.0,3.0,167.0,130.0,3.0,128.0,94.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,144.0,44.0)));
		bh.consume(collection.add(17.0));
		collection.toArray(new Double[] {105.0,117.0,166.0,8.0,1.0,148.0,66.0,149.0});
		bh.consume(collection.contains(192.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,174.0,2.0,143.0,100.0,87.0)));
		bh.consume(collection.add(67.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(52.0,182.0,61.0,146.0,133.0,158.0,156.0,132.0)));
		collection.toArray(new Double[] {43.0,100.0,108.0,68.0,74.0,121.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(79.0,43.0,100.0,81.0,137.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(19.0,164.0,183.0,140.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(54.0,81.0,81.0,89.0,5.0,11.0,36.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,96.0,133.0,136.0,72.0,63.0)));
		bh.consume(collection.add(64.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(30.0,163.0,28.0,188.0,125.0,186.0,67.0,171.0,85.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,93.0,100.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,37.0,122.0,141.0,137.0)));
		bh.consume(collection.add(58.0));
		collection.toArray(new Double[] {148.0,166.0,131.0,149.0,41.0,104.0,176.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,130.0,142.0,67.0,42.0,185.0)));
		collection.toArray(new Double[] {1.0,58.0,165.0,21.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,132.0,91.0,118.0,66.0,194.0,129.0,29.0,199.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,11.0,80.0,165.0,197.0,88.0)));
		collection.toArray(new Double[] {100.0,62.0,146.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(82.0,23.0,57.0,86.0,125.0,131.0,127.0,70.0,134.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(90.0,128.0,27.0,181.0,134.0,120.0)));
		bh.consume(collection.add(116.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,143.0,74.0,5.0,15.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(36.0,91.0,161.0,60.0,161.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(26.0,32.0,47.0,79.0,109.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(130.0,120.0,127.0,30.0,53.0,178.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(173.0,141.0,22.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,152.0,159.0)));
		bh.consume(collection.add(83.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,53.0,140.0,61.0,102.0,177.0,189.0,97.0)));
		bh.consume(collection.add(80.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,59.0,196.0,130.0)));
		bh.consume(collection.remove(115.0));
		bh.consume(collection.remove(74.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(85.0,57.0,188.0,132.0,36.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,61.0,106.0,177.0,133.0,146.0,5.0,83.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(61.0,10.0,81.0)));
		bh.consume(collection.contains(29.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,129.0,198.0,24.0,37.0,173.0,46.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(155.0,154.0,35.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,120.0,152.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(123.0,19.0,105.0,172.0,72.0,98.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(8.0,19.0,60.0,152.0,83.0,15.0,42.0,96.0,33.0)));
		bh.consume(collection.remove(63.0));
		bh.consume(collection.add(153.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,149.0,197.0,108.0,114.0,171.0,85.0,17.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(183.0,107.0,107.0,183.0,40.0,183.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,45.0,119.0,51.0,151.0,76.0,4.0,147.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(29.0,46.0,58.0,169.0,199.0,69.0,11.0,97.0)));
		bh.consume(collection.add(167.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,101.0,123.0,35.0,35.0,132.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,58.0,72.0,160.0,174.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(33.0,2.0,12.0,6.0,166.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,110.0,35.0,173.0,193.0,110.0,183.0,1.0,154.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,7.0,28.0,193.0,113.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(142.0,108.0,12.0,82.0,162.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(92.0,111.0,197.0,139.0,165.0,180.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(38.0,73.0,18.0,179.0,128.0,130.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,102.0,122.0,84.0,197.0,50.0,120.0,190.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,189.0,102.0,153.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(154.0,98.0,82.0,2.0,190.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(8.0,21.0,50.0,141.0,114.0,5.0,190.0,48.0)));
		bh.consume(collection.add(130.0));
		bh.consume(collection.add(132.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,54.0,87.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(80.0,66.0,177.0,26.0,157.0,85.0,133.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(8.0,175.0,14.0,69.0,54.0,4.0,118.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(174.0,112.0,79.0,168.0,142.0,98.0,192.0,13.0,193.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,156.0,55.0,86.0,132.0,96.0,110.0,47.0,22.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(175.0,117.0,161.0,131.0,84.0,9.0,192.0,21.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,56.0,188.0)));
		collection.toArray(new Double[] {105.0,161.0,74.0,173.0,151.0,3.0});
		bh.consume(collection.remove(3.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(153.0,135.0,109.0,191.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,18.0,6.0,79.0,116.0,19.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(93.0,68.0,187.0,1.0,156.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,85.0,168.0,175.0,194.0,80.0,161.0,141.0,32.0)));
		bh.consume(collection.remove(114.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,30.0,31.0,129.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,50.0,103.0,120.0,100.0,144.0,16.0,199.0,198.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(66.0,10.0,40.0,118.0,32.0,47.0,164.0)));
		bh.consume(collection.add(144.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,91.0,31.0,70.0,134.0,126.0,51.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,188.0,143.0,39.0,115.0,137.0)));
		bh.consume(collection.remove(120.0));
		bh.consume(collection.add(124.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(181.0,46.0,178.0,58.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(140.0,187.0,96.0,113.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(129.0,197.0,144.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,102.0,70.0,108.0,28.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(63.0,158.0,153.0,70.0,195.0,64.0,175.0,116.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,121.0,132.0,137.0,87.0,120.0,56.0,59.0)));
		bh.consume(collection.contains(195.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(194.0,119.0,9.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(30.0,108.0,193.0,190.0,127.0,180.0,113.0,172.0,140.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(33.0,50.0,158.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(27.0,130.0,154.0,190.0,88.0,107.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(69.0,51.0,60.0,114.0,60.0,135.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,187.0,18.0,11.0,108.0,172.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,3.0,77.0,159.0,81.0,152.0,191.0)));
		bh.consume(collection.add(31.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,78.0,37.0,95.0,80.0,175.0,149.0,109.0,137.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,190.0,111.0,69.0,128.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(46.0,178.0,131.0,139.0,196.0,70.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(115.0,41.0,62.0,187.0,153.0,170.0,162.0,22.0)));
		bh.consume(collection.add(45.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,169.0,75.0,7.0,199.0,146.0,124.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,185.0,59.0,79.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,108.0,87.0,116.0,63.0,129.0,43.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(75.0,172.0,106.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(94.0,71.0,68.0,30.0,188.0,54.0,5.0,181.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,174.0,99.0,8.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(50.0,170.0,186.0,135.0,124.0,122.0,142.0,158.0,158.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(18.0,145.0,143.0,33.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,71.0,71.0,56.0,37.0,30.0,135.0,51.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(24.0,127.0,144.0,83.0,85.0,105.0)));
		bh.consume(collection.remove(155.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,171.0,59.0)));
		bh.consume(collection.contains(22.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,92.0,91.0,36.0,54.0,88.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,157.0,44.0)));
		bh.consume(collection.add(54.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(148.0,122.0,114.0,70.0,127.0,13.0,33.0,118.0,43.0)));
		bh.consume(collection.add(175.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(97.0,74.0,131.0,18.0,101.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,162.0,59.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(63.0,60.0,151.0,134.0,175.0,62.0,16.0,168.0,180.0)));
		bh.consume(collection.add(59.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,119.0,3.0,118.0,40.0,176.0,156.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(88.0,40.0,9.0,151.0,128.0,193.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(150.0,62.0,178.0,199.0,85.0,150.0,20.0,153.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(194.0,57.0,176.0,11.0,77.0,129.0,25.0)));
		bh.consume(collection.add(61.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,165.0,33.0,195.0,55.0,179.0,184.0,120.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(49.0,55.0,71.0,136.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(66.0,42.0,55.0,64.0,32.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(24.0,112.0,3.0,67.0,88.0,128.0,39.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(31.0,165.0,39.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(105.0,121.0,110.0,89.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(144.0,57.0,101.0,105.0,8.0,43.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(164.0,100.0,105.0,90.0,75.0,6.0,197.0,63.0,189.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,132.0,73.0,61.0,65.0,89.0,118.0,158.0,19.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(78.0,70.0,55.0)));
		bh.consume(collection.add(138.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(56.0,180.0,117.0,41.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(67.0,136.0,18.0,10.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,92.0,57.0,79.0,116.0,42.0,78.0,98.0,74.0)));
		bh.consume(collection.add(50.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,102.0,95.0)));
		bh.consume(collection.add(189.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,7.0,101.0,72.0,133.0,14.0,131.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,187.0,177.0,199.0,36.0,99.0,177.0,26.0,118.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(164.0,172.0,108.0,92.0,12.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,120.0,61.0,22.0,113.0,143.0,33.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(42.0,17.0,108.0,131.0,6.0,125.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(12.0,184.0,107.0)));
		bh.consume(collection.add(178.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,41.0,99.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(80.0,152.0,140.0)));
		bh.consume(collection.add(132.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,179.0,184.0,186.0,25.0,130.0,70.0,16.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,121.0,176.0,151.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(153.0,176.0,142.0,178.0,143.0,9.0,41.0,179.0,27.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(138.0,86.0,96.0,126.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,51.0,135.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(149.0,110.0,160.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(183.0,167.0,187.0,106.0,196.0,34.0,152.0,87.0)));
		bh.consume(collection.remove(187.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,80.0,130.0,196.0,99.0,78.0,91.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(109.0,152.0,180.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,179.0,176.0,200.0,124.0,142.0,121.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(99.0,114.0,188.0,19.0)));
		bh.consume(collection.add(4.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(68.0,97.0,42.0,123.0,93.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(180.0,130.0,14.0,143.0,167.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,111.0,126.0,62.0,38.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,117.0,89.0,18.0)));
		bh.consume(collection.add(193.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(168.0,49.0,78.0,47.0,5.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,77.0,85.0,52.0)));
		collection.toArray(new Double[] {45.0,145.0,172.0,147.0,187.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,162.0,104.0,185.0,62.0,154.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(113.0,23.0,11.0,78.0,115.0,125.0,37.0,33.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(155.0,27.0,16.0,200.0,87.0,14.0,184.0,73.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,31.0,200.0,188.0,10.0,140.0,172.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(157.0,141.0,50.0,36.0,79.0,22.0,139.0,29.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,115.0,151.0,161.0,104.0,79.0,16.0)));
		bh.consume(collection.remove(196.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(195.0,78.0,195.0,100.0,134.0,141.0,171.0,72.0,111.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,102.0,65.0,111.0)));
		bh.consume(collection.add(151.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(50.0,152.0,155.0,22.0,31.0,105.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(138.0,189.0,65.0,194.0,57.0,10.0,99.0,65.0)));
		bh.consume(collection.add(97.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(51.0,182.0,142.0,177.0,182.0,158.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,4.0,68.0,29.0,196.0,44.0,6.0,79.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(65.0,57.0,89.0,192.0,192.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(69.0,166.0,171.0,50.0,177.0,132.0,80.0,52.0)));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(198.0,32.0,11.0,86.0,82.0,134.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(22.0,18.0,150.0,15.0,169.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,102.0,122.0,76.0,153.0,99.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(172.0,6.0,130.0,149.0,133.0,106.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(109.0,172.0,38.0,150.0,116.0)));
		collection.toArray(new Double[] {193.0,54.0,133.0,55.0,94.0,90.0,171.0,39.0,155.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,192.0,198.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,57.0,73.0,27.0,27.0,103.0,86.0,103.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(150.0,88.0,108.0,193.0,154.0,179.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(46.0,66.0,200.0,20.0,35.0,27.0,107.0,65.0,110.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(149.0,149.0,140.0,56.0,123.0,37.0,131.0,185.0,147.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,130.0,131.0,106.0,173.0,67.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(62.0,180.0,97.0,11.0,79.0,131.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(53.0,53.0,47.0,140.0,47.0,66.0,31.0)));
		collection.toArray(new Double[] {68.0,155.0,98.0,53.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(95.0,195.0,87.0,195.0,196.0,98.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,179.0,187.0,162.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(10.0,164.0,26.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(34.0,130.0,198.0,96.0,46.0,197.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,58.0,141.0,42.0,5.0,160.0,144.0,100.0,180.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(180.0,157.0,73.0,36.0,133.0,39.0,52.0,59.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(98.0,146.0,137.0,175.0,69.0,11.0,30.0,129.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,169.0,163.0,24.0,103.0,58.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(68.0,159.0,151.0,75.0,93.0,14.0,112.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(176.0,37.0,175.0,34.0,76.0,115.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(44.0,161.0,14.0,165.0,103.0,108.0,96.0)));
		bh.consume(collection.remove(170.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(63.0,23.0,131.0,122.0,87.0,29.0,200.0,116.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(11.0,68.0,110.0,158.0,136.0,75.0,83.0,177.0,150.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,127.0,175.0,161.0,146.0,159.0,88.0,100.0,82.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(19.0,16.0,154.0,182.0,59.0,178.0,105.0,80.0,23.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(108.0,82.0,181.0,122.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,13.0,61.0,191.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(88.0,69.0,107.0,3.0,157.0,132.0,197.0,196.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(29.0,133.0,148.0,4.0,114.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(177.0,62.0,173.0,159.0,126.0,92.0,190.0,144.0,2.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(30.0,20.0,82.0,10.0,31.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,192.0,129.0,67.0,17.0,104.0,1.0,77.0,199.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,15.0,77.0,36.0,136.0,49.0,135.0,60.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,145.0,46.0,88.0,127.0,34.0,175.0,9.0,8.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(107.0,6.0,64.0,94.0,183.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(129.0,107.0,124.0,159.0,101.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(192.0,64.0,129.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,198.0,33.0,138.0)));
		collection.toArray(new Double[] {17.0,137.0,32.0,62.0,59.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(102.0,194.0,102.0)));
		bh.consume(collection.add(89.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(120.0,16.0,129.0,11.0,2.0,188.0,96.0,67.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(147.0,92.0,133.0,57.0,30.0,87.0,13.0)));
		bh.consume(collection.add(1.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(155.0,102.0,194.0,111.0,151.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(152.0,161.0,66.0,186.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(26.0,44.0,147.0,120.0,111.0,108.0,119.0,121.0,70.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,100.0,99.0,103.0,50.0,181.0,50.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,38.0,95.0,92.0,69.0,69.0,25.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(48.0,145.0,43.0,129.0,105.0,169.0,32.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(100.0,166.0,20.0,25.0,188.0,197.0,62.0,33.0,117.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,75.0,17.0,123.0,68.0,155.0,180.0,27.0,148.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(64.0,10.0,177.0,26.0,125.0,104.0)));
		bh.consume(collection.add(144.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,17.0,31.0,133.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,37.0,173.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(124.0,5.0,147.0,172.0,77.0,139.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,151.0,104.0,129.0,78.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(182.0,182.0,194.0,74.0,75.0)));
		collection.toArray(new Double[] {98.0,171.0,102.0,137.0,98.0,13.0,126.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(85.0,73.0,166.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(75.0,148.0,96.0,65.0,30.0,68.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,102.0,82.0,87.0,183.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(181.0,185.0,124.0,25.0,126.0,176.0,143.0,63.0,91.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,83.0,192.0,44.0,30.0,49.0,59.0,30.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(62.0,137.0,47.0,175.0,161.0,155.0,68.0,176.0,15.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(195.0,105.0,127.0,166.0,188.0,35.0,119.0,80.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,129.0,125.0,70.0,11.0,104.0,192.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(197.0,126.0,116.0,194.0,70.0,162.0,81.0,39.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(170.0,130.0,86.0,85.0,25.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(56.0,97.0,58.0,118.0,99.0,57.0,177.0,27.0,89.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(194.0,37.0,193.0,146.0,81.0,102.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,163.0,10.0,135.0,101.0,32.0)));
		bh.consume(collection.add(109.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(4.0,108.0,70.0,160.0,82.0,53.0,60.0,18.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,25.0,103.0,3.0,97.0,47.0)));
		bh.consume(collection.contains(105.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(195.0,64.0,17.0,156.0,43.0,142.0,49.0,78.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(187.0,99.0,193.0,145.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(175.0,167.0,56.0,109.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(94.0,177.0,144.0,141.0,3.0,66.0)));
		bh.consume(collection.add(188.0));
		bh.consume(collection.contains(123.0));
		bh.consume(collection.add(167.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,81.0,135.0,158.0,174.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,17.0,186.0,79.0,24.0,77.0,49.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,36.0,6.0,182.0,82.0,189.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(181.0,130.0,153.0,56.0,112.0,5.0,120.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,185.0,115.0,139.0,171.0,156.0,181.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,83.0,114.0,144.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,155.0,74.0,49.0,100.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(190.0,64.0,117.0,142.0,132.0,198.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(11.0,142.0,84.0,59.0,131.0,133.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,119.0,21.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,170.0,39.0,167.0,152.0,13.0,33.0,71.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,173.0,149.0)));
		bh.consume(collection.add(87.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,164.0,143.0,44.0,31.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(70.0,54.0,53.0,109.0,127.0,100.0,125.0,31.0,104.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(59.0,74.0,186.0,139.0,120.0,104.0,77.0,185.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,165.0,164.0,33.0,120.0,98.0,24.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(102.0,173.0,145.0,183.0,153.0,186.0,39.0,54.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(194.0,153.0,146.0,2.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,8.0,42.0,58.0,163.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,176.0,107.0,137.0,146.0,61.0,91.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(166.0,176.0,50.0,10.0,10.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(107.0,159.0,126.0,179.0,4.0)));
		bh.consume(collection.add(121.0));
		bh.consume(collection.add(136.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(2.0,86.0,162.0)));
		bh.consume(collection.add(85.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,2.0,200.0,122.0,77.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(21.0,148.0,84.0,94.0,176.0,116.0,96.0,22.0,99.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(164.0,79.0,149.0,120.0,130.0,111.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(105.0,31.0,34.0,113.0,120.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,142.0,80.0,173.0,27.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,81.0,7.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,151.0,167.0,89.0,82.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(142.0,72.0,189.0,115.0,182.0,139.0,29.0,155.0,148.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(105.0,42.0,64.0,91.0,34.0,192.0,150.0,66.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(36.0,131.0,174.0,116.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,166.0,14.0,105.0,161.0,175.0,71.0,162.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(86.0,105.0,185.0,18.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(105.0,157.0,38.0,124.0,127.0,71.0,28.0,50.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(168.0,137.0,5.0)));
	}
}
