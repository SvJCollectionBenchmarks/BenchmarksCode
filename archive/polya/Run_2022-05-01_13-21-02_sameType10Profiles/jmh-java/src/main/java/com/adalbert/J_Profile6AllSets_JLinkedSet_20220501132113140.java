package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile6AllSets_JLinkedSet_20220501132113140 {
	java.util.LinkedHashSet<Double> collection = new java.util.LinkedHashSet<>();
	@Setup(Level.Invocation)
	public void setupJLinkedSet() {
		collection = new java.util.LinkedHashSet<>();
		collection.add(116.0);
		collection.add(138.0);
		collection.add(180.0);
		collection.add(109.0);
		collection.add(73.0);
		collection.add(180.0);
		collection.add(77.0);
		collection.add(17.0);
		collection.add(113.0);
		collection.add(46.0);
		collection.add(38.0);
		collection.add(129.0);
		collection.add(105.0);
		collection.add(191.0);
		collection.add(195.0);
		collection.add(21.0);
		collection.add(157.0);
		collection.add(116.0);
		collection.add(104.0);
		collection.add(115.0);
		collection.add(55.0);
		collection.add(145.0);
		collection.add(54.0);
		collection.add(177.0);
		collection.add(58.0);
		collection.add(151.0);
		collection.add(67.0);
		collection.add(35.0);
		collection.add(2.0);
		collection.add(14.0);
		collection.add(108.0);
		collection.add(135.0);
		collection.add(97.0);
		collection.add(90.0);
		collection.add(109.0);
		collection.add(114.0);
		collection.add(187.0);
		collection.add(6.0);
		collection.add(168.0);
		collection.add(191.0);
		collection.add(14.0);
		collection.add(188.0);
		collection.add(160.0);
		collection.add(74.0);
		collection.add(27.0);
		collection.add(109.0);
		collection.add(61.0);
		collection.add(87.0);
		collection.add(137.0);
		collection.add(39.0);
		collection.add(60.0);
		collection.add(130.0);
		collection.add(164.0);
		collection.add(168.0);
		collection.add(19.0);
		collection.add(70.0);
		collection.add(12.0);
		collection.add(194.0);
		collection.add(96.0);
		collection.add(156.0);
		collection.add(62.0);
		collection.add(12.0);
		collection.add(13.0);
		collection.add(196.0);
		collection.add(50.0);
		collection.add(167.0);
		collection.add(65.0);
		collection.add(164.0);
		collection.add(123.0);
		collection.add(152.0);
		collection.add(154.0);
		collection.add(122.0);
		collection.add(181.0);
		collection.add(4.0);
		collection.add(28.0);
		collection.add(64.0);
		collection.add(72.0);
		collection.add(120.0);
		collection.add(52.0);
		collection.add(121.0);
		collection.add(95.0);
		collection.add(174.0);
		collection.add(15.0);
		collection.add(117.0);
		collection.add(61.0);
		collection.add(19.0);
		collection.add(173.0);
		collection.add(21.0);
		collection.add(20.0);
		collection.add(196.0);
		collection.add(65.0);
		collection.add(75.0);
		collection.add(135.0);
		collection.add(156.0);
		collection.add(40.0);
		collection.add(114.0);
		collection.add(143.0);
		collection.add(128.0);
		collection.add(95.0);
		collection.add(81.0);
		collection.add(200.0);
		collection.add(108.0);
		collection.add(64.0);
		collection.add(156.0);
		collection.add(13.0);
		collection.add(175.0);
		collection.add(126.0);
		collection.add(14.0);
		collection.add(4.0);
		collection.add(191.0);
		collection.add(111.0);
		collection.add(78.0);
		collection.add(19.0);
		collection.add(109.0);
		collection.add(112.0);
		collection.add(163.0);
		collection.add(73.0);
		collection.add(136.0);
		collection.add(115.0);
		collection.add(25.0);
		collection.add(78.0);
		collection.add(100.0);
		collection.add(39.0);
		collection.add(194.0);
		collection.add(85.0);
		collection.add(200.0);
		collection.add(81.0);
		collection.add(17.0);
		collection.add(139.0);
		collection.add(168.0);
		collection.add(87.0);
		collection.add(55.0);
		collection.add(138.0);
		collection.add(175.0);
		collection.add(4.0);
		collection.add(30.0);
		collection.add(113.0);
		collection.add(189.0);
		collection.add(53.0);
		collection.add(55.0);
		collection.add(108.0);
		collection.add(154.0);
		collection.add(162.0);
		collection.add(33.0);
		collection.add(31.0);
		collection.add(196.0);
		collection.add(74.0);
		collection.add(106.0);
		collection.add(25.0);
		collection.add(32.0);
		collection.add(84.0);
		collection.add(132.0);
		collection.add(77.0);
		collection.add(151.0);
		collection.add(190.0);
		collection.add(132.0);
		collection.add(5.0);
		collection.add(77.0);
		collection.add(114.0);
		collection.add(44.0);
		collection.add(78.0);
		collection.add(16.0);
		collection.add(88.0);
		collection.add(78.0);
		collection.add(161.0);
		collection.add(42.0);
		collection.add(122.0);
		collection.add(62.0);
		collection.add(102.0);
		collection.add(149.0);
		collection.add(88.0);
		collection.add(149.0);
		collection.add(124.0);
		collection.add(49.0);
		collection.add(95.0);
		collection.add(43.0);
		collection.add(191.0);
		collection.add(27.0);
		collection.add(97.0);
		collection.add(124.0);
		collection.add(85.0);
		collection.add(39.0);
		collection.add(150.0);
		collection.add(89.0);
		collection.add(194.0);
		collection.add(100.0);
		collection.add(166.0);
		collection.add(15.0);
		collection.add(168.0);
		collection.add(157.0);
		collection.add(7.0);
		collection.add(168.0);
		collection.add(70.0);
		collection.add(24.0);
		collection.add(169.0);
		collection.add(147.0);
		collection.add(172.0);
		collection.add(91.0);
		collection.add(48.0);
		collection.add(52.0);
		collection.add(12.0);
		collection.add(38.0);
		collection.add(114.0);
		collection.add(179.0);
		collection.add(200.0);
		collection.add(144.0);
		collection.add(174.0);
		collection.add(49.0);
		collection.add(111.0);
		collection.add(189.0);
		collection.add(15.0);
		collection.add(10.0);
		collection.add(118.0);
		collection.add(33.0);
		collection.add(158.0);
		collection.add(106.0);
		collection.add(186.0);
		collection.add(19.0);
		collection.add(109.0);
		collection.add(28.0);
		collection.add(76.0);
		collection.add(97.0);
		collection.add(122.0);
		collection.add(100.0);
		collection.add(11.0);
		collection.add(96.0);
		collection.add(11.0);
		collection.add(88.0);
		collection.add(166.0);
		collection.add(23.0);
		collection.add(42.0);
		collection.add(176.0);
		collection.add(150.0);
		collection.add(73.0);
		collection.add(44.0);
		collection.add(133.0);
		collection.add(199.0);
		collection.add(197.0);
		collection.add(15.0);
		collection.add(182.0);
		collection.add(50.0);
		collection.add(121.0);
		collection.add(6.0);
		collection.add(79.0);
		collection.add(83.0);
		collection.add(68.0);
		collection.add(139.0);
		collection.add(190.0);
		collection.add(48.0);
		collection.add(198.0);
		collection.add(112.0);
		collection.add(115.0);
		collection.add(156.0);
		collection.add(127.0);
		collection.add(21.0);
		collection.add(196.0);
		collection.add(21.0);
		collection.add(13.0);
		collection.add(164.0);
		collection.add(15.0);
		collection.add(179.0);
		collection.add(132.0);
		collection.add(193.0);
		collection.add(190.0);
		collection.add(80.0);
		collection.add(13.0);
		collection.add(15.0);
		collection.add(110.0);
		collection.add(90.0);
		collection.add(167.0);
		collection.add(150.0);
		collection.add(53.0);
		collection.add(68.0);
		collection.add(86.0);
		collection.add(136.0);
		collection.add(197.0);
		collection.add(35.0);
		collection.add(146.0);
		collection.add(147.0);
		collection.add(62.0);
		collection.add(88.0);
		collection.add(51.0);
		collection.add(175.0);
		collection.add(44.0);
		collection.add(34.0);
		collection.add(192.0);
		collection.add(54.0);
		collection.add(4.0);
		collection.add(103.0);
		collection.add(54.0);
		collection.add(145.0);
		collection.add(42.0);
		collection.add(152.0);
		collection.add(69.0);
		collection.add(51.0);
		collection.add(135.0);
		collection.add(92.0);
		collection.add(120.0);
		collection.add(30.0);
		collection.add(85.0);
		collection.add(129.0);
		collection.add(83.0);
		collection.add(189.0);
		collection.add(180.0);
		collection.add(151.0);
		collection.add(56.0);
		collection.add(53.0);
		collection.add(64.0);
		collection.add(189.0);
		collection.add(26.0);
		collection.add(121.0);
		collection.add(62.0);
		collection.add(65.0);
		collection.add(16.0);
		collection.add(50.0);
		collection.add(41.0);
		collection.add(121.0);
		collection.add(43.0);
		collection.add(58.0);
		collection.add(111.0);
		collection.add(113.0);
		collection.add(95.0);
		collection.add(50.0);
		collection.add(193.0);
		collection.add(52.0);
		collection.add(16.0);
		collection.add(143.0);
		collection.add(137.0);
		collection.add(175.0);
		collection.add(42.0);
		collection.add(81.0);
		collection.add(191.0);
		collection.add(156.0);
		collection.add(52.0);
		collection.add(99.0);
		collection.add(69.0);
		collection.add(3.0);
		collection.add(20.0);
		collection.add(139.0);
		collection.add(84.0);
		collection.add(120.0);
		collection.add(142.0);
		collection.add(162.0);
		collection.add(32.0);
		collection.add(32.0);
		collection.add(43.0);
		collection.add(191.0);
		collection.add(128.0);
		collection.add(95.0);
		collection.add(190.0);
		collection.add(191.0);
		collection.add(176.0);
		collection.add(91.0);
		collection.add(188.0);
		collection.add(25.0);
		collection.add(17.0);
		collection.add(141.0);
		collection.add(134.0);
		collection.add(53.0);
		collection.add(23.0);
		collection.add(44.0);
		collection.add(167.0);
		collection.add(146.0);
		collection.add(34.0);
		collection.add(16.0);
		collection.add(154.0);
		collection.add(109.0);
		collection.add(77.0);
		collection.add(79.0);
		collection.add(35.0);
		collection.add(87.0);
		collection.add(80.0);
		collection.add(189.0);
		collection.add(103.0);
		collection.add(143.0);
		collection.add(53.0);
		collection.add(73.0);
		collection.add(156.0);
		collection.add(165.0);
		collection.add(48.0);
		collection.add(125.0);
		collection.add(1.0);
		collection.add(17.0);
		collection.add(191.0);
		collection.add(135.0);
		collection.add(86.0);
		collection.add(93.0);
		collection.add(32.0);
		collection.add(182.0);
		collection.add(198.0);
		collection.add(137.0);
		collection.add(86.0);
		collection.add(62.0);
		collection.add(9.0);
		collection.add(57.0);
		collection.add(69.0);
		collection.add(108.0);
		collection.add(132.0);
		collection.add(164.0);
		collection.add(45.0);
		collection.add(91.0);
		collection.add(87.0);
		collection.add(199.0);
		collection.add(115.0);
		collection.add(142.0);
		collection.add(74.0);
		collection.add(78.0);
		collection.add(192.0);
		collection.add(79.0);
		collection.add(64.0);
		collection.add(133.0);
		collection.add(42.0);
		collection.add(48.0);
		collection.add(33.0);
		collection.add(197.0);
		collection.add(195.0);
		collection.add(125.0);
		collection.add(122.0);
		collection.add(19.0);
		collection.add(191.0);
		collection.add(56.0);
		collection.add(180.0);
		collection.add(24.0);
		collection.add(95.0);
		collection.add(123.0);
		collection.add(21.0);
		collection.add(59.0);
		collection.add(28.0);
		collection.add(137.0);
		collection.add(160.0);
		collection.add(26.0);
		collection.add(10.0);
		collection.add(39.0);
		collection.add(139.0);
		collection.add(197.0);
		collection.add(177.0);
		collection.add(10.0);
		collection.add(74.0);
		collection.add(117.0);
		collection.add(1.0);
		collection.add(81.0);
		collection.add(2.0);
		collection.add(162.0);
		collection.add(159.0);
		collection.add(59.0);
		collection.add(153.0);
		collection.add(76.0);
		collection.add(81.0);
		collection.add(115.0);
		collection.add(118.0);
		collection.add(135.0);
		collection.add(129.0);
		collection.add(86.0);
		collection.add(124.0);
		collection.add(200.0);
		collection.add(109.0);
		collection.add(57.0);
		collection.add(187.0);
		collection.add(63.0);
		collection.add(81.0);
		collection.add(135.0);
		collection.add(164.0);
		collection.add(135.0);
		collection.add(101.0);
		collection.add(131.0);
		collection.add(71.0);
		collection.add(86.0);
		collection.add(82.0);
		collection.add(125.0);
		collection.add(144.0);
		collection.add(110.0);
		collection.add(183.0);
		collection.add(32.0);
		collection.add(112.0);
		collection.add(183.0);
		collection.add(119.0);
		collection.add(1.0);
		collection.add(27.0);
		collection.add(93.0);
		collection.add(42.0);
		collection.add(122.0);
		collection.add(50.0);
		collection.add(195.0);
		collection.add(49.0);
		collection.add(166.0);
		collection.add(140.0);
		collection.add(122.0);
		collection.add(5.0);
		collection.add(180.0);
		collection.add(138.0);
		collection.add(140.0);
		collection.add(94.0);
		collection.add(116.0);
		collection.add(42.0);
		collection.add(159.0);
		collection.add(50.0);
		collection.add(177.0);
		collection.add(200.0);
		collection.add(176.0);
		collection.add(198.0);
		collection.add(60.0);
		collection.add(108.0);
		collection.add(151.0);
		collection.add(43.0);
		collection.add(157.0);
		collection.add(164.0);
		collection.add(139.0);
		collection.add(6.0);
		collection.add(198.0);
		collection.add(29.0);
		collection.add(190.0);
		collection.add(70.0);
		collection.add(183.0);
		collection.add(174.0);
		collection.add(135.0);
		collection.add(103.0);
		collection.add(110.0);
		collection.add(42.0);
		collection.add(1.0);
		collection.add(78.0);
		collection.add(24.0);
		collection.add(74.0);
		collection.add(37.0);
		collection.add(131.0);
		collection.add(102.0);
		collection.add(157.0);
		collection.add(39.0);
		collection.add(28.0);
		collection.add(12.0);
		collection.add(153.0);
		collection.add(87.0);
		collection.add(39.0);
		collection.add(186.0);
		collection.add(17.0);
		collection.add(196.0);
		collection.add(187.0);
		collection.add(124.0);
		collection.add(58.0);
		collection.add(133.0);
		collection.add(95.0);
		collection.add(20.0);
		collection.add(166.0);
		collection.add(95.0);
		collection.add(11.0);
		collection.add(10.0);
		collection.add(104.0);
		collection.add(37.0);
		collection.add(99.0);
		collection.add(41.0);
		collection.add(166.0);
		collection.add(14.0);
		collection.add(79.0);
		collection.add(61.0);
		collection.add(41.0);
		collection.add(128.0);
		collection.add(192.0);
		collection.add(176.0);
		collection.add(175.0);
		collection.add(26.0);
		collection.add(179.0);
		collection.add(187.0);
		collection.add(41.0);
		collection.add(20.0);
		collection.add(197.0);
		collection.add(155.0);
		collection.add(65.0);
		collection.add(55.0);
		collection.add(19.0);
		collection.add(132.0);
		collection.add(170.0);
		collection.add(155.0);
		collection.add(2.0);
		collection.add(146.0);
		collection.add(53.0);
		collection.add(164.0);
		collection.add(95.0);
		collection.add(118.0);
		collection.add(47.0);
		collection.add(188.0);
		collection.add(91.0);
		collection.add(184.0);
		collection.add(184.0);
		collection.add(105.0);
		collection.add(160.0);
		collection.add(193.0);
		collection.add(196.0);
		collection.add(102.0);
		collection.add(57.0);
		collection.add(54.0);
		collection.add(187.0);
		collection.add(3.0);
		collection.add(34.0);
		collection.add(140.0);
		collection.add(143.0);
		collection.add(16.0);
		collection.add(86.0);
		collection.add(59.0);
		collection.add(3.0);
		collection.add(95.0);
		collection.add(161.0);
		collection.add(148.0);
		collection.add(192.0);
		collection.add(199.0);
		collection.add(166.0);
		collection.add(28.0);
		collection.add(58.0);
		collection.add(7.0);
		collection.add(94.0);
		collection.add(125.0);
		collection.add(22.0);
		collection.add(183.0);
		collection.add(21.0);
		collection.add(45.0);
		collection.add(140.0);
		collection.add(22.0);
		collection.add(69.0);
		collection.add(2.0);
		collection.add(101.0);
		collection.add(66.0);
		collection.add(172.0);
		collection.add(39.0);
		collection.add(183.0);
		collection.add(10.0);
		collection.add(47.0);
		collection.add(185.0);
		collection.add(32.0);
		collection.add(79.0);
		collection.add(52.0);
		collection.add(191.0);
		collection.add(157.0);
		collection.add(124.0);
		collection.add(115.0);
		collection.add(157.0);
		collection.add(143.0);
		collection.add(157.0);
		collection.add(12.0);
		collection.add(165.0);
		collection.add(25.0);
		collection.add(73.0);
		collection.add(67.0);
		collection.add(110.0);
		collection.add(97.0);
		collection.add(163.0);
		collection.add(140.0);
		collection.add(199.0);
		collection.add(189.0);
		collection.add(148.0);
		collection.add(140.0);
		collection.add(45.0);
		collection.add(82.0);
		collection.add(52.0);
		collection.add(180.0);
		collection.add(123.0);
		collection.add(63.0);
		collection.add(99.0);
		collection.add(18.0);
		collection.add(192.0);
		collection.add(81.0);
		collection.add(150.0);
		collection.add(34.0);
		collection.add(186.0);
		collection.add(12.0);
		collection.add(124.0);
		collection.add(93.0);
		collection.add(170.0);
		collection.add(37.0);
		collection.add(74.0);
		collection.add(154.0);
		collection.add(160.0);
		collection.add(20.0);
		collection.add(61.0);
		collection.add(87.0);
		collection.add(190.0);
		collection.add(92.0);
		collection.add(176.0);
		collection.add(125.0);
		collection.add(115.0);
		collection.add(144.0);
		collection.add(166.0);
		collection.add(6.0);
		collection.add(164.0);
		collection.add(81.0);
		collection.add(174.0);
		collection.add(87.0);
		collection.add(24.0);
		collection.add(163.0);
		collection.add(25.0);
		collection.add(35.0);
		collection.add(109.0);
		collection.add(144.0);
		collection.add(32.0);
		collection.add(101.0);
		collection.add(177.0);
		collection.add(83.0);
		collection.add(46.0);
		collection.add(101.0);
		collection.add(56.0);
		collection.add(157.0);
		collection.add(60.0);
		collection.add(9.0);
		collection.add(55.0);
		collection.add(129.0);
		collection.add(136.0);
		collection.add(198.0);
		collection.add(71.0);
		collection.add(120.0);
		collection.add(165.0);
		collection.add(88.0);
		collection.add(50.0);
		collection.add(16.0);
		collection.add(117.0);
		collection.add(84.0);
		collection.add(189.0);
		collection.add(193.0);
		collection.add(10.0);
		collection.add(114.0);
		collection.add(118.0);
		collection.add(52.0);
		collection.add(48.0);
		collection.add(102.0);
		collection.add(114.0);
		collection.add(102.0);
		collection.add(81.0);
		collection.add(150.0);
		collection.add(128.0);
		collection.add(173.0);
		collection.add(155.0);
		collection.add(45.0);
		collection.add(53.0);
		collection.add(54.0);
		collection.add(93.0);
		collection.add(158.0);
		collection.add(98.0);
		collection.add(61.0);
		collection.add(199.0);
		collection.add(4.0);
		collection.add(55.0);
		collection.add(16.0);
		collection.add(117.0);
		collection.add(63.0);
		collection.add(102.0);
		collection.add(102.0);
		collection.add(114.0);
		collection.add(142.0);
		collection.add(62.0);
		collection.add(136.0);
		collection.add(181.0);
		collection.add(181.0);
		collection.add(19.0);
		collection.add(194.0);
		collection.add(166.0);
		collection.add(145.0);
		collection.add(56.0);
		collection.add(117.0);
		collection.add(158.0);
		collection.add(80.0);
		collection.add(159.0);
		collection.add(186.0);
		collection.add(193.0);
		collection.add(5.0);
		collection.add(158.0);
		collection.add(9.0);
		collection.add(41.0);
		collection.add(38.0);
		collection.add(56.0);
		collection.add(130.0);
		collection.add(123.0);
		collection.add(51.0);
		collection.add(55.0);
		collection.add(113.0);
		collection.add(162.0);
		collection.add(106.0);
		collection.add(82.0);
		collection.add(73.0);
		collection.add(9.0);
		collection.add(36.0);
		collection.add(168.0);
		collection.add(136.0);
		collection.add(169.0);
		collection.add(184.0);
		collection.add(14.0);
		collection.add(23.0);
		collection.add(188.0);
		collection.add(137.0);
		collection.add(123.0);
		collection.add(188.0);
		collection.add(77.0);
		collection.add(11.0);
		collection.add(153.0);
		collection.add(101.0);
		collection.add(72.0);
		collection.add(136.0);
		collection.add(148.0);
		collection.add(128.0);
		collection.add(125.0);
		collection.add(35.0);
		collection.add(105.0);
		collection.add(30.0);
		collection.add(47.0);
		collection.add(164.0);
		collection.add(114.0);
		collection.add(47.0);
		collection.add(155.0);
		collection.add(54.0);
		collection.add(12.0);
		collection.add(22.0);
		collection.add(33.0);
		collection.add(180.0);
		collection.add(111.0);
		collection.add(56.0);
		collection.add(160.0);
		collection.add(196.0);
		collection.add(184.0);
		collection.add(31.0);
		collection.add(10.0);
		collection.add(182.0);
		collection.add(60.0);
		collection.add(153.0);
		collection.add(55.0);
		collection.add(192.0);
		collection.add(89.0);
		collection.add(120.0);
		collection.add(196.0);
		collection.add(145.0);
		collection.add(28.0);
		collection.add(2.0);
		collection.add(116.0);
		collection.add(91.0);
		collection.add(141.0);
		collection.add(140.0);
		collection.add(187.0);
		collection.add(98.0);
		collection.add(170.0);
		collection.add(44.0);
		collection.add(185.0);
		collection.add(142.0);
		collection.add(130.0);
		collection.add(38.0);
		collection.add(17.0);
		collection.add(124.0);
		collection.add(110.0);
		collection.add(4.0);
		collection.add(162.0);
		collection.add(58.0);
		collection.add(156.0);
		collection.add(67.0);
		collection.add(27.0);
		collection.add(143.0);
		collection.add(34.0);
		collection.add(36.0);
		collection.add(127.0);
		collection.add(87.0);
		collection.add(111.0);
		collection.add(74.0);
		collection.add(140.0);
		collection.add(177.0);
		collection.add(13.0);
		collection.add(105.0);
		collection.add(89.0);
		collection.add(150.0);
		collection.add(173.0);
		collection.add(159.0);
		collection.add(44.0);
		collection.add(118.0);
		collection.add(155.0);
		collection.add(94.0);
		collection.add(188.0);
		collection.add(10.0);
		collection.add(78.0);
		collection.add(101.0);
		collection.add(134.0);
		collection.add(152.0);
		collection.add(107.0);
		collection.add(103.0);
		collection.add(53.0);
		collection.add(178.0);
		collection.add(193.0);
		collection.add(44.0);
		collection.add(106.0);
		collection.add(186.0);
		collection.add(78.0);
		collection.add(51.0);
		collection.add(28.0);
		collection.add(123.0);
		collection.add(95.0);
		collection.add(153.0);
		collection.add(76.0);
		collection.add(192.0);
		collection.add(166.0);
		collection.add(179.0);
		collection.add(67.0);
		collection.add(121.0);
		collection.add(164.0);
		collection.add(63.0);
		collection.add(103.0);
		collection.add(58.0);
		collection.add(36.0);
		collection.add(123.0);
		collection.add(75.0);
		collection.add(140.0);
		collection.add(125.0);
		collection.add(64.0);
		collection.add(96.0);
		collection.add(38.0);
		collection.add(46.0);
		collection.add(36.0);
		collection.add(162.0);
		collection.add(82.0);
		collection.add(172.0);
		collection.add(74.0);
		collection.add(135.0);
		collection.add(184.0);
		collection.add(145.0);
		collection.add(62.0);
		collection.add(185.0);
		collection.add(116.0);
		collection.add(165.0);
		collection.add(144.0);
		collection.add(88.0);
		collection.add(136.0);
		collection.add(53.0);
		collection.add(164.0);
		collection.add(95.0);
		collection.add(127.0);
		collection.add(135.0);
		collection.add(123.0);
		collection.add(14.0);
		collection.add(81.0);
		collection.add(183.0);
		collection.add(180.0);
		collection.add(129.0);
		collection.add(139.0);
		collection.add(8.0);
		collection.add(148.0);
		collection.add(143.0);
		collection.add(57.0);
		collection.add(118.0);
		collection.add(40.0);
		collection.add(169.0);
		collection.add(72.0);
		collection.add(124.0);
		collection.add(151.0);
		collection.add(149.0);
		collection.add(200.0);
		collection.add(3.0);
		collection.add(65.0);
		collection.add(120.0);
		collection.add(145.0);
		collection.add(101.0);
		collection.add(85.0);
		collection.add(177.0);
		collection.add(78.0);
		collection.add(18.0);
		collection.add(164.0);
		collection.add(194.0);
		collection.add(93.0);
		collection.add(112.0);
		collection.add(87.0);
		collection.add(28.0);
		collection.add(124.0);
		collection.add(32.0);
		collection.add(146.0);
		collection.add(15.0);
		collection.add(60.0);
		collection.add(176.0);
		collection.add(105.0);
		collection.add(122.0);
		collection.add(87.0);
		collection.add(96.0);
		collection.add(31.0);
		collection.add(133.0);
		collection.add(194.0);
		collection.add(110.0);
		collection.add(172.0);
		collection.add(82.0);
		collection.add(196.0);
		collection.add(187.0);
		collection.add(146.0);
		collection.add(38.0);
		collection.add(159.0);
		collection.add(1.0);
		collection.add(148.0);
		collection.add(181.0);
		collection.add(121.0);
		collection.add(50.0);
		collection.add(175.0);
		collection.add(121.0);
		collection.add(37.0);
		collection.add(186.0);
		collection.add(104.0);
		collection.add(13.0);
		collection.add(32.0);
		collection.add(134.0);
		collection.add(111.0);
		collection.add(171.0);
		collection.add(89.0);
		collection.add(26.0);
		collection.add(8.0);
		collection.add(199.0);
		collection.add(60.0);
		collection.add(171.0);
		collection.add(163.0);
		collection.add(161.0);
		collection.add(21.0);
		collection.add(108.0);
		collection.add(94.0);
		collection.add(96.0);
		collection.add(172.0);
		collection.add(150.0);
		collection.add(133.0);
		collection.add(147.0);
		collection.add(85.0);
		collection.add(130.0);
		collection.add(192.0);
		collection.add(77.0);
		collection.add(102.0);
		collection.add(121.0);
		collection.add(126.0);
		collection.add(18.0);
		collection.add(44.0);
		collection.add(6.0);
		collection.add(81.0);
		collection.add(53.0);
		collection.add(63.0);
		collection.add(74.0);
		collection.add(16.0);
		collection.add(156.0);
		collection.add(35.0);
		collection.add(104.0);
		collection.add(89.0);
		collection.add(138.0);
		collection.add(133.0);
		collection.add(180.0);
		collection.add(180.0);
		collection.add(84.0);
		collection.add(108.0);
		collection.add(64.0);
		collection.add(24.0);
		collection.add(28.0);
		collection.add(164.0);
		collection.add(193.0);
		collection.add(27.0);
		collection.add(64.0);
		collection.add(22.0);
		collection.add(22.0);
		collection.add(103.0);
		collection.add(13.0);
		collection.add(8.0);
		collection.add(45.0);
		collection.add(120.0);
		collection.add(61.0);
		collection.add(95.0);
		collection.add(136.0);
		collection.add(54.0);
		collection.add(125.0);
		collection.add(189.0);
		collection.add(52.0);
		collection.add(179.0);
		collection.add(80.0);
		collection.add(192.0);
		collection.add(14.0);
		collection.add(190.0);
		collection.add(163.0);
		collection.add(147.0);
		collection.add(117.0);
		collection.add(200.0);
		collection.add(86.0);
		collection.add(161.0);
		collection.add(110.0);
		collection.add(129.0);
		collection.add(71.0);
		collection.add(116.0);
		collection.add(190.0);
		collection.add(180.0);
		collection.add(42.0);
		collection.add(178.0);
		collection.add(199.0);
		collection.add(196.0);
		collection.add(172.0);
		collection.add(119.0);
		collection.add(50.0);
		collection.add(189.0);
		collection.add(188.0);
		collection.add(124.0);
		collection.add(67.0);
		collection.add(86.0);
		collection.add(62.0);
		collection.add(86.0);
		collection.add(116.0);
		collection.add(119.0);
		collection.add(30.0);
		collection.add(193.0);
		collection.add(165.0);
		collection.add(179.0);
		collection.add(112.0);
		collection.add(19.0);
		collection.add(29.0);
		collection.add(179.0);
		collection.add(168.0);
		collection.add(10.0);
		collection.add(99.0);
		collection.add(86.0);
		collection.add(149.0);
		collection.add(95.0);
		collection.add(89.0);
		collection.add(182.0);
		collection.add(49.0);
		collection.add(57.0);
		collection.add(3.0);
		collection.add(14.0);
		collection.add(72.0);
		collection.add(190.0);
		collection.add(137.0);
		collection.add(147.0);
		collection.add(103.0);
		collection.add(50.0);
		collection.add(90.0);
		collection.add(107.0);
		collection.add(24.0);
		collection.add(54.0);
		collection.add(163.0);
		collection.add(163.0);
		collection.add(56.0);
		collection.add(186.0);
		collection.add(43.0);
		collection.add(54.0);
		collection.add(40.0);
		collection.add(93.0);
		collection.add(146.0);
		collection.add(5.0);
		collection.add(73.0);
		collection.add(146.0);
		collection.add(174.0);
		collection.add(51.0);
		collection.add(50.0);
		collection.add(41.0);
		collection.add(82.0);
		collection.add(127.0);
		collection.add(125.0);
		collection.add(106.0);
		collection.add(112.0);
		collection.add(189.0);
		collection.add(193.0);
		collection.add(46.0);
		collection.add(8.0);
		collection.add(103.0);
		collection.add(200.0);
		collection.add(193.0);
		collection.add(136.0);
		collection.add(4.0);
		collection.add(189.0);
		collection.add(120.0);
		collection.add(194.0);
		collection.add(7.0);
		collection.add(125.0);
		collection.add(194.0);
		collection.add(116.0);
		collection.add(146.0);
		collection.add(4.0);
		collection.add(36.0);
		collection.add(165.0);
		collection.add(4.0);
		collection.add(160.0);
		collection.add(95.0);
		collection.add(99.0);
		collection.add(120.0);
		collection.add(23.0);
		collection.add(130.0);
		collection.add(124.0);
		collection.add(126.0);
		collection.add(59.0);
		collection.add(104.0);
		collection.add(60.0);
		collection.add(1.0);
		collection.add(109.0);
		collection.add(41.0);
		collection.add(74.0);
		collection.add(58.0);
		collection.add(147.0);
		collection.add(140.0);
		collection.add(159.0);
		collection.add(46.0);
		collection.add(50.0);
		collection.add(25.0);
		collection.add(111.0);
		collection.add(26.0);
		collection.add(47.0);
		collection.add(79.0);
		collection.add(23.0);
		collection.add(110.0);
		collection.add(98.0);
		collection.add(162.0);
		collection.add(157.0);
		collection.add(42.0);
		collection.add(132.0);
		collection.add(141.0);
		collection.add(53.0);
		collection.add(75.0);
		collection.add(152.0);
		collection.add(75.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JLinkedSet(Blackhole bh) {
		bh.consume(collection.add(117.0));
		bh.consume(collection.add(40.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,137.0,41.0,126.0,6.0,26.0,142.0,45.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,112.0,37.0,69.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,162.0,54.0)));
		bh.consume(collection.add(144.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,31.0,23.0,104.0,30.0,16.0,13.0)));
		collection.toArray(new Double[] {92.0,36.0,141.0,183.0,113.0,151.0,113.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(151.0,191.0,46.0,96.0)));
		bh.consume(collection.add(20.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,79.0,1.0,117.0,135.0,135.0,14.0)));
		bh.consume(collection.add(108.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(99.0,2.0,92.0,111.0,27.0,55.0)));
		bh.consume(collection.add(193.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(56.0,170.0,81.0,96.0,40.0,184.0,41.0,93.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,182.0,197.0,176.0,197.0,93.0,41.0,91.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(175.0,68.0,176.0,56.0,127.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(16.0,178.0,30.0,197.0,149.0,124.0)));
		collection.toArray(new Double[] {74.0,151.0,140.0,140.0,41.0,170.0,84.0,177.0});
		bh.consume(collection.remove(61.0));
		bh.consume(collection.add(195.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,31.0,181.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,46.0,138.0,182.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,41.0,133.0,137.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(59.0,24.0,191.0,145.0,40.0,134.0,28.0,115.0,199.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,30.0,23.0,191.0,141.0,58.0,79.0,110.0)));
		bh.consume(collection.add(161.0));
		bh.consume(collection.add(115.0));
		bh.consume(collection.remove(116.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,43.0,8.0,181.0,14.0,42.0,157.0,17.0,85.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,56.0,187.0,155.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,10.0,11.0,198.0,137.0)));
		bh.consume(collection.contains(48.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,69.0,161.0,117.0,60.0,148.0,43.0,32.0,113.0)));
		bh.consume(collection.contains(189.0));
		bh.consume(collection.remove(49.0));
		bh.consume(collection.add(16.0));
		bh.consume(collection.remove(140.0));
		bh.consume(collection.remove(155.0));
		bh.consume(collection.add(9.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,94.0,48.0,165.0,12.0,49.0,79.0,7.0,198.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,170.0,194.0,152.0,40.0,81.0,2.0,51.0,94.0)));
		bh.consume(collection.add(86.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,179.0,38.0,8.0,133.0,81.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,126.0,7.0)));
		bh.consume(collection.add(73.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,91.0,117.0)));
		bh.consume(collection.remove(16.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,26.0,187.0)));
		bh.consume(collection.add(166.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,136.0,186.0,181.0,37.0,160.0,18.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,86.0,125.0,163.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(9.0,37.0,10.0,156.0,199.0,32.0,18.0,22.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(139.0,179.0,51.0,69.0,146.0)));
		bh.consume(collection.add(180.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(172.0,58.0,68.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(186.0,37.0,135.0,49.0,51.0,92.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(33.0,146.0,114.0)));
		collection.toArray(new Double[] {101.0,4.0,117.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(166.0,35.0,192.0,11.0,129.0,66.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(191.0,199.0,133.0,62.0,18.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,100.0,163.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(152.0,71.0,128.0,130.0,164.0,50.0,76.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(129.0,17.0,95.0,138.0,139.0,19.0)));
		bh.consume(collection.add(153.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,82.0,76.0,176.0,80.0,161.0,67.0)));
		bh.consume(collection.add(105.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(124.0,89.0,188.0,118.0,66.0,130.0,124.0,122.0)));
		bh.consume(collection.add(184.0));
		bh.consume(collection.remove(37.0));
		bh.consume(collection.remove(15.0));
		bh.consume(collection.add(159.0));
		bh.consume(collection.add(190.0));
		bh.consume(collection.add(172.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,81.0,126.0,51.0,199.0,125.0,92.0,71.0,36.0)));
		bh.consume(collection.add(43.0));
		bh.consume(collection.remove(194.0));
		bh.consume(collection.remove(123.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,144.0,35.0,145.0,151.0,14.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(195.0,27.0,194.0,165.0,63.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(171.0,148.0,134.0,25.0,41.0,82.0,123.0,40.0,22.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,72.0,50.0)));
		bh.consume(collection.add(145.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,26.0,86.0,111.0,159.0,71.0,80.0,33.0)));
		bh.consume(collection.remove(199.0));
		collection.toArray(new Double[] {135.0,190.0,7.0,44.0,145.0,48.0,179.0,164.0,118.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,116.0,163.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,45.0,103.0,162.0,6.0,96.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,55.0,33.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,29.0,11.0,71.0,47.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,69.0,21.0,90.0,164.0,187.0,44.0,57.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,16.0,6.0)));
		bh.consume(collection.add(100.0));
		bh.consume(collection.add(122.0));
		collection.toArray(new Double[] {32.0,170.0,82.0,74.0,153.0,65.0,63.0});
		bh.consume(collection.add(41.0));
		bh.consume(collection.add(178.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(170.0,95.0,55.0,82.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,53.0,107.0,23.0)));
		bh.consume(collection.add(151.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,27.0,83.0,96.0,88.0,16.0,31.0,123.0)));
		bh.consume(collection.add(174.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(19.0,182.0,38.0,10.0,12.0,2.0,75.0,15.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(139.0,153.0,102.0,198.0,96.0,19.0,118.0,93.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(192.0,123.0,107.0)));
		bh.consume(collection.add(191.0));
		bh.consume(collection.remove(32.0));
		bh.consume(collection.add(126.0));
		bh.consume(collection.add(90.0));
		collection.toArray(new Double[] {61.0,53.0,165.0,45.0,34.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,169.0,115.0,163.0,76.0,150.0,119.0,119.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,47.0,167.0,68.0,113.0,134.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,122.0,89.0)));
		bh.consume(collection.contains(15.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,145.0,125.0,69.0,6.0,149.0,143.0)));
		bh.consume(collection.add(85.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,22.0,139.0,26.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,163.0,34.0,89.0,32.0,149.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,108.0,106.0,71.0,61.0,92.0,186.0,135.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(146.0,147.0,36.0)));
		bh.consume(collection.remove(117.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,19.0,30.0,170.0,128.0,132.0,182.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(197.0,56.0,132.0,192.0,138.0,39.0,128.0,102.0,191.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,8.0,102.0,54.0,186.0)));
		bh.consume(collection.add(189.0));
		bh.consume(collection.remove(174.0));
		bh.consume(collection.add(127.0));
		bh.consume(collection.remove(37.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,167.0,121.0,57.0,46.0,191.0,82.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,130.0,132.0,183.0,137.0,139.0)));
		collection.toArray(new Double[] {59.0,153.0,36.0,113.0,140.0,78.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(177.0,81.0,64.0,70.0)));
		collection.toArray(new Double[] {62.0,37.0,110.0,33.0,72.0,185.0,96.0,159.0});
		bh.consume(collection.add(185.0));
		bh.consume(collection.add(152.0));
		bh.consume(collection.contains(47.0));
		bh.consume(collection.remove(124.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,186.0,5.0,159.0,15.0,183.0,101.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,11.0,68.0,135.0,50.0,68.0,35.0,41.0)));
		bh.consume(collection.add(128.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,138.0,81.0,185.0)));
		bh.consume(collection.add(47.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,93.0,96.0,112.0,55.0)));
		bh.consume(collection.contains(18.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,194.0,185.0)));
		bh.consume(collection.contains(118.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(52.0,69.0,196.0,17.0,181.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(146.0,111.0,180.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,194.0,55.0,155.0,76.0,183.0,177.0,4.0,6.0)));
		collection.toArray(new Double[] {111.0,8.0,59.0,6.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,91.0,146.0,193.0)));
		bh.consume(collection.add(42.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,77.0,10.0,156.0,154.0,135.0,64.0)));
		bh.consume(collection.add(76.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(86.0,67.0,25.0,189.0,68.0,193.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,106.0,185.0,111.0,105.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,111.0,6.0,198.0,83.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,29.0,123.0,20.0)));
		bh.consume(collection.add(27.0));
		bh.consume(collection.contains(57.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,177.0,196.0,17.0,7.0,56.0,81.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(133.0,38.0,87.0,130.0,68.0,54.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(51.0,92.0,171.0,30.0,147.0,23.0)));
		bh.consume(collection.add(89.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,76.0,98.0,185.0,95.0,45.0,150.0,34.0)));
		collection.toArray(new Double[] {37.0,118.0,65.0,80.0,102.0,75.0,110.0});
		bh.consume(collection.add(23.0));
		bh.consume(collection.add(7.0));
		bh.consume(collection.add(113.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(24.0,123.0,4.0,87.0,178.0,110.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(62.0,77.0,51.0,77.0,10.0,21.0,31.0,191.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,148.0,16.0,62.0,74.0,15.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,70.0,74.0,60.0,150.0)));
		bh.consume(collection.add(45.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,188.0,182.0,97.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(95.0,195.0,7.0,97.0,116.0,95.0,140.0)));
		bh.consume(collection.add(113.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(41.0,93.0,124.0)));
		bh.consume(collection.add(75.0));
		bh.consume(collection.add(127.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(59.0,51.0,132.0,78.0,178.0,147.0,99.0,14.0)));
		bh.consume(collection.add(29.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(91.0,115.0,156.0,72.0,181.0,167.0,184.0,133.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(7.0,107.0,89.0,47.0,86.0,89.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(61.0,134.0,184.0,197.0,53.0,90.0,94.0,172.0,165.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(174.0,44.0,146.0,41.0,30.0,54.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(55.0,158.0,173.0,152.0,144.0,106.0)));
		bh.consume(collection.add(47.0));
		bh.consume(collection.add(196.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,123.0,7.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,110.0,199.0,157.0,17.0,154.0)));
		bh.consume(collection.add(28.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,70.0,41.0,179.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,178.0,44.0,41.0,96.0,57.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(76.0,152.0,131.0,135.0,189.0,18.0,92.0,45.0,64.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,126.0,49.0,25.0,73.0,140.0,171.0,18.0,77.0)));
		collection.toArray(new Double[] {141.0,63.0,102.0});
		bh.consume(collection.add(20.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,172.0,27.0,54.0,23.0,110.0,37.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,15.0,186.0)));
		bh.consume(collection.add(156.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,33.0,155.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,65.0,178.0,95.0,8.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(200.0,76.0,9.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(63.0,187.0,118.0,161.0,162.0)));
		bh.consume(collection.add(90.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(149.0,115.0,115.0,109.0,106.0,77.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,39.0,81.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(22.0,64.0,26.0)));
		bh.consume(collection.add(29.0));
		bh.consume(collection.add(180.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,97.0,186.0,133.0,166.0,86.0,41.0,11.0,86.0)));
		bh.consume(collection.add(41.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(133.0,166.0,14.0,169.0,10.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,164.0,106.0,25.0,97.0,132.0,87.0,25.0)));
		bh.consume(collection.add(176.0));
		bh.consume(collection.add(125.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,76.0,173.0,55.0,43.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(199.0,10.0,123.0,140.0,188.0,91.0,162.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,31.0,19.0,15.0,126.0,10.0,6.0)));
		bh.consume(collection.add(47.0));
		bh.consume(collection.add(191.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(112.0,1.0,83.0)));
		bh.consume(collection.add(71.0));
		bh.consume(collection.add(95.0));
		bh.consume(collection.add(48.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,12.0,148.0,117.0,36.0,152.0,55.0,63.0,79.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(195.0,185.0,37.0,134.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,139.0,17.0,28.0,21.0,52.0,4.0,138.0,56.0)));
		bh.consume(collection.add(187.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(113.0,14.0,81.0,35.0,182.0,74.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,164.0,37.0,133.0,115.0,56.0,84.0,107.0,103.0)));
		bh.consume(collection.add(194.0));
		bh.consume(collection.contains(109.0));
		bh.consume(collection.add(2.0));
		bh.consume(collection.remove(55.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(99.0,166.0,193.0,45.0,177.0,102.0,69.0)));
		bh.consume(collection.remove(37.0));
		bh.consume(collection.add(147.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,50.0,1.0,68.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(16.0,70.0,62.0,1.0,12.0,177.0,5.0)));
		bh.consume(collection.add(33.0));
		bh.consume(collection.remove(100.0));
		bh.consume(collection.add(95.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(137.0,116.0,141.0)));
		bh.consume(collection.add(153.0));
		collection.toArray(new Double[] {128.0,135.0,65.0,123.0});
		bh.consume(collection.remove(158.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(126.0,64.0,46.0,7.0,136.0)));
		collection.toArray(new Double[] {56.0,148.0,141.0,45.0,1.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,144.0,183.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,46.0,31.0,54.0,124.0,149.0)));
		bh.consume(collection.add(77.0));
		bh.consume(collection.add(174.0));
		bh.consume(collection.add(85.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,36.0,33.0,27.0,196.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,136.0,13.0,36.0,158.0,192.0,185.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,67.0,92.0,42.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,27.0,8.0,39.0,63.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(77.0,57.0,155.0)));
		bh.consume(collection.add(83.0));
		bh.consume(collection.add(185.0));
		bh.consume(collection.add(10.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,74.0,145.0,71.0,174.0,181.0,83.0,98.0)));
		bh.consume(collection.add(79.0));
		bh.consume(collection.add(11.0));
		bh.consume(collection.add(188.0));
		bh.consume(collection.add(149.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(171.0,136.0,189.0,183.0,146.0,12.0,112.0,54.0,137.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,128.0,156.0,146.0)));
		bh.consume(collection.add(9.0));
		bh.consume(collection.add(88.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(68.0,50.0,148.0,99.0,154.0,190.0,67.0,62.0,5.0)));
		bh.consume(collection.add(177.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,42.0,165.0,200.0,94.0,92.0,90.0,45.0,121.0)));
		collection.toArray(new Double[] {50.0,150.0,173.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(19.0,15.0,61.0,186.0,175.0,122.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(172.0,180.0,131.0,70.0,40.0,97.0)));
		bh.consume(collection.add(88.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(1.0,160.0,176.0,122.0,161.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(138.0,195.0,163.0,44.0,39.0,126.0,57.0,59.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(196.0,118.0,108.0,101.0,158.0,162.0)));
		bh.consume(collection.remove(61.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(192.0,21.0,179.0,133.0,188.0,138.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(32.0,160.0,18.0,71.0,83.0,18.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(6.0,28.0,110.0,39.0,103.0)));
		bh.consume(collection.add(190.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,71.0,109.0,47.0,39.0,47.0)));
		bh.consume(collection.add(98.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,4.0,58.0,82.0,95.0)));
		bh.consume(collection.add(48.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,36.0,103.0,14.0,161.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(30.0,175.0,54.0,179.0)));
		bh.consume(collection.add(45.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,105.0,174.0,133.0,37.0,200.0,175.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,88.0,91.0,133.0)));
		bh.consume(collection.add(148.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,80.0,200.0,141.0,97.0,143.0)));
		bh.consume(collection.add(115.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(44.0,180.0,96.0,199.0,178.0,50.0,56.0,126.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,14.0,96.0,90.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(93.0,88.0,174.0,12.0)));
		bh.consume(collection.add(105.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,168.0,55.0,5.0,155.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(7.0,137.0,129.0,127.0,58.0,77.0,169.0,50.0,101.0)));
		bh.consume(collection.add(123.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,65.0,159.0)));
		bh.consume(collection.add(68.0));
		bh.consume(collection.add(70.0));
		bh.consume(collection.add(190.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,94.0,38.0,49.0,82.0,149.0,59.0,84.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,131.0,26.0,11.0,7.0,86.0,69.0,160.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(113.0,2.0,11.0,141.0,31.0,118.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,170.0,63.0,83.0,75.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(136.0,137.0,74.0,196.0,103.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,12.0,71.0,88.0,97.0,170.0,102.0)));
		collection.toArray(new Double[] {131.0,130.0,52.0,68.0,9.0,81.0,196.0,147.0,139.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(122.0,161.0,200.0,14.0,181.0,51.0)));
		collection.toArray(new Double[] {93.0,11.0,23.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(195.0,199.0,41.0)));
		bh.consume(collection.remove(143.0));
		bh.consume(collection.add(118.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(141.0,147.0,57.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(135.0,5.0,15.0,19.0,134.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,190.0,13.0,26.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(198.0,141.0,20.0,85.0,83.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,189.0,18.0,159.0,52.0,23.0,113.0,99.0,150.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,42.0,118.0,178.0,190.0,134.0)));
		collection.toArray(new Double[] {151.0,167.0,27.0,133.0,177.0,12.0,124.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,5.0,21.0)));
		bh.consume(collection.add(143.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,35.0,102.0,155.0)));
		bh.consume(collection.add(120.0));
		bh.consume(collection.add(153.0));
		collection.toArray(new Double[] {18.0,162.0,137.0,134.0,176.0,107.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,101.0,86.0,36.0,139.0,59.0)));
		bh.consume(collection.add(164.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(75.0,121.0,54.0,123.0,26.0,187.0,169.0,184.0)));
		bh.consume(collection.add(82.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(10.0,34.0,144.0,122.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,169.0,108.0,116.0,35.0,55.0,122.0,122.0)));
		bh.consume(collection.add(175.0));
		bh.consume(collection.add(39.0));
		bh.consume(collection.remove(13.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,168.0,155.0,61.0,120.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,193.0,98.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(18.0,196.0,69.0,33.0)));
		collection.toArray(new Double[] {83.0,198.0,195.0,120.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,64.0,58.0,77.0,36.0,3.0,72.0,136.0)));
		bh.consume(collection.add(150.0));
		bh.consume(collection.remove(168.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,109.0,92.0,118.0,107.0,146.0,108.0)));
		bh.consume(collection.add(39.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(25.0,108.0,29.0,56.0,21.0,126.0,96.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(127.0,3.0,141.0,12.0,165.0,135.0,6.0,2.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,130.0,1.0,3.0,11.0,166.0,151.0,43.0,3.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,108.0,12.0,166.0,31.0,85.0)));
		bh.consume(collection.remove(113.0));
		bh.consume(collection.add(183.0));
		collection.toArray(new Double[] {40.0,70.0,99.0,128.0,110.0,197.0,92.0});
		bh.consume(collection.add(100.0));
		bh.consume(collection.add(112.0));
		bh.consume(collection.add(120.0));
		bh.consume(collection.add(99.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(41.0,128.0,159.0,108.0,114.0,145.0)));
		bh.consume(collection.add(130.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(59.0,138.0,2.0,64.0,116.0,100.0,44.0)));
		collection.toArray(new Double[] {137.0,177.0,82.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,25.0,190.0,191.0,63.0,154.0,91.0,29.0,97.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,11.0,190.0,17.0,34.0,60.0,174.0,75.0,80.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,15.0,58.0,63.0,164.0,34.0,125.0,81.0,24.0)));
		bh.consume(collection.add(77.0));
		bh.consume(collection.add(90.0));
		bh.consume(collection.add(131.0));
		bh.consume(collection.add(200.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,68.0,113.0,22.0,142.0)));
		bh.consume(collection.add(36.0));
		collection.toArray(new Double[] {86.0,94.0,19.0,130.0,146.0,10.0,62.0,73.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(39.0,184.0,181.0,166.0,15.0,85.0)));
		bh.consume(collection.add(88.0));
		bh.consume(collection.add(165.0));
		bh.consume(collection.add(125.0));
		bh.consume(collection.add(86.0));
		collection.toArray(new Double[] {186.0,32.0,34.0,23.0,188.0,93.0,111.0,28.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,27.0,48.0,183.0,151.0,66.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(80.0,16.0,10.0,25.0,4.0,119.0,12.0)));
		bh.consume(collection.remove(98.0));
		bh.consume(collection.add(55.0));
		bh.consume(collection.add(193.0));
		bh.consume(collection.add(134.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,172.0,131.0,137.0,34.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,97.0,165.0,35.0,81.0,154.0,10.0,87.0)));
		bh.consume(collection.add(112.0));
		bh.consume(collection.add(183.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,110.0,106.0)));
		bh.consume(collection.add(170.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(64.0,47.0,50.0,73.0,195.0,41.0,195.0,115.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,140.0,141.0,46.0,154.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,49.0,84.0,144.0,175.0,179.0,159.0)));
		collection.toArray(new Double[] {107.0,11.0,172.0,4.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,51.0,159.0,131.0,83.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(20.0,42.0,5.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,3.0,25.0,116.0,42.0,91.0,133.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(61.0,168.0,197.0,28.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,48.0,154.0,185.0,176.0,87.0,157.0,107.0,29.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(68.0,146.0,28.0,86.0)));
		bh.consume(collection.add(93.0));
		bh.consume(collection.add(96.0));
		collection.toArray(new Double[] {129.0,90.0,38.0,122.0,31.0,121.0});
		collection.toArray(new Double[] {64.0,142.0,148.0,177.0,69.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,50.0,199.0,88.0,133.0)));
		bh.consume(collection.add(134.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,194.0,170.0,15.0,187.0,53.0,74.0,35.0,187.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,65.0,63.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,31.0,20.0,62.0,149.0,158.0,79.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,182.0,65.0,118.0,64.0,32.0)));
		collection.toArray(new Double[] {21.0,63.0,9.0,155.0,22.0,178.0,3.0,89.0});
		collection.toArray(new Double[] {39.0,170.0,51.0,100.0,73.0});
		bh.consume(collection.add(187.0));
		bh.consume(collection.add(167.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,107.0,129.0,23.0,89.0,114.0,37.0,165.0,138.0)));
		bh.consume(collection.add(150.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,108.0,164.0,63.0,110.0,122.0,13.0,66.0,112.0)));
		bh.consume(collection.add(181.0));
		bh.consume(collection.add(95.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,94.0,156.0,130.0,31.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,107.0,6.0,200.0,28.0,88.0,178.0,49.0,145.0)));
		bh.consume(collection.add(164.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,61.0,67.0,155.0,51.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,19.0,97.0,105.0,86.0,114.0,95.0,169.0)));
		bh.consume(collection.add(82.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,64.0,167.0,92.0)));
		bh.consume(collection.add(76.0));
		bh.consume(collection.add(61.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,97.0,55.0,73.0,114.0,94.0)));
		collection.toArray(new Double[] {82.0,50.0,10.0,176.0,5.0,198.0,107.0,168.0,105.0});
		bh.consume(collection.add(12.0));
		bh.consume(collection.add(42.0));
		bh.consume(collection.add(174.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,186.0,148.0,190.0,38.0,2.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,47.0,41.0,26.0,64.0)));
		collection.toArray(new Double[] {65.0,44.0,182.0,17.0,117.0,144.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,164.0,170.0,159.0,193.0,1.0,111.0,170.0,103.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,120.0,153.0,188.0,66.0,200.0,123.0,88.0,13.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(153.0,87.0,97.0,63.0,54.0,83.0,188.0,31.0,145.0)));
		bh.consume(collection.add(33.0));
		bh.consume(collection.add(77.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,151.0,183.0,87.0,191.0,21.0,88.0,170.0,170.0)));
		bh.consume(collection.add(5.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,139.0,4.0,49.0,101.0,55.0)));
		bh.consume(collection.add(175.0));
		bh.consume(collection.add(93.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(178.0,159.0,29.0,96.0)));
		bh.consume(collection.remove(96.0));
		bh.consume(collection.add(190.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,131.0,181.0,182.0,68.0,112.0,52.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,123.0,52.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,179.0,111.0)));
		bh.consume(collection.add(38.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,20.0,80.0,52.0,135.0,124.0,31.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,93.0,151.0,175.0,153.0,82.0,124.0,6.0,155.0)));
		bh.consume(collection.add(60.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,134.0,32.0,166.0,32.0,198.0,156.0,55.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(10.0,128.0,34.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,4.0,94.0)));
		bh.consume(collection.add(57.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,133.0,147.0,127.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,122.0,71.0,89.0,189.0,36.0)));
		bh.consume(collection.add(22.0));
		bh.consume(collection.add(72.0));
		bh.consume(collection.add(160.0));
		bh.consume(collection.add(175.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(98.0,182.0,139.0,166.0,111.0,21.0,87.0,49.0,6.0)));
		bh.consume(collection.remove(165.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(113.0,139.0,84.0,159.0,156.0,83.0,19.0,60.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(30.0,101.0,174.0,188.0,6.0)));
		bh.consume(collection.add(160.0));
		bh.consume(collection.remove(114.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,139.0,84.0,49.0,70.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(174.0,163.0,55.0,107.0,54.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,26.0,190.0,93.0,193.0,16.0,172.0,26.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,61.0,17.0,165.0,139.0,39.0,194.0,80.0,151.0)));
		bh.consume(collection.remove(93.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,85.0,31.0,76.0,152.0,11.0,112.0,80.0,112.0)));
		bh.consume(collection.add(115.0));
		bh.consume(collection.add(27.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(71.0,30.0,67.0,166.0,56.0,124.0,6.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,46.0,72.0,31.0,16.0,137.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,168.0,66.0,5.0,173.0,133.0,165.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(44.0,130.0,48.0,31.0,120.0,153.0)));
		bh.consume(collection.add(127.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(109.0,98.0,25.0)));
		bh.consume(collection.add(64.0));
		bh.consume(collection.add(25.0));
		bh.consume(collection.add(59.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,151.0,46.0,84.0,44.0,52.0,125.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,194.0,69.0,37.0,189.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,119.0,176.0,91.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,34.0,145.0,177.0,45.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,76.0,20.0,95.0,122.0,153.0)));
	}
}
