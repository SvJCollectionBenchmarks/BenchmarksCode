package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile1AllSets_JHashSet_20220501132110189 {
	java.util.HashSet<Double> collection = new java.util.HashSet<>();
	@Setup(Level.Invocation)
	public void setupJHashSet() {
		collection = new java.util.HashSet<>();
		collection.add(160.0);
		collection.add(125.0);
		collection.add(176.0);
		collection.add(26.0);
		collection.add(20.0);
		collection.add(20.0);
		collection.add(145.0);
		collection.add(161.0);
		collection.add(122.0);
		collection.add(116.0);
		collection.add(89.0);
		collection.add(126.0);
		collection.add(83.0);
		collection.add(8.0);
		collection.add(6.0);
		collection.add(66.0);
		collection.add(175.0);
		collection.add(174.0);
		collection.add(46.0);
		collection.add(121.0);
		collection.add(90.0);
		collection.add(20.0);
		collection.add(35.0);
		collection.add(126.0);
		collection.add(51.0);
		collection.add(136.0);
		collection.add(75.0);
		collection.add(193.0);
		collection.add(78.0);
		collection.add(94.0);
		collection.add(109.0);
		collection.add(32.0);
		collection.add(3.0);
		collection.add(169.0);
		collection.add(102.0);
		collection.add(194.0);
		collection.add(126.0);
		collection.add(3.0);
		collection.add(15.0);
		collection.add(7.0);
		collection.add(45.0);
		collection.add(134.0);
		collection.add(41.0);
		collection.add(150.0);
		collection.add(32.0);
		collection.add(66.0);
		collection.add(171.0);
		collection.add(48.0);
		collection.add(38.0);
		collection.add(192.0);
		collection.add(186.0);
		collection.add(65.0);
		collection.add(13.0);
		collection.add(188.0);
		collection.add(108.0);
		collection.add(139.0);
		collection.add(32.0);
		collection.add(149.0);
		collection.add(8.0);
		collection.add(72.0);
		collection.add(4.0);
		collection.add(189.0);
		collection.add(118.0);
		collection.add(47.0);
		collection.add(179.0);
		collection.add(29.0);
		collection.add(38.0);
		collection.add(135.0);
		collection.add(195.0);
		collection.add(47.0);
		collection.add(165.0);
		collection.add(135.0);
		collection.add(163.0);
		collection.add(51.0);
		collection.add(43.0);
		collection.add(103.0);
		collection.add(103.0);
		collection.add(190.0);
		collection.add(147.0);
		collection.add(49.0);
		collection.add(6.0);
		collection.add(186.0);
		collection.add(36.0);
		collection.add(46.0);
		collection.add(98.0);
		collection.add(18.0);
		collection.add(17.0);
		collection.add(19.0);
		collection.add(52.0);
		collection.add(114.0);
		collection.add(52.0);
		collection.add(95.0);
		collection.add(184.0);
		collection.add(83.0);
		collection.add(95.0);
		collection.add(130.0);
		collection.add(5.0);
		collection.add(134.0);
		collection.add(91.0);
		collection.add(140.0);
		collection.add(59.0);
		collection.add(92.0);
		collection.add(169.0);
		collection.add(75.0);
		collection.add(31.0);
		collection.add(86.0);
		collection.add(106.0);
		collection.add(146.0);
		collection.add(113.0);
		collection.add(148.0);
		collection.add(78.0);
		collection.add(179.0);
		collection.add(110.0);
		collection.add(192.0);
		collection.add(134.0);
		collection.add(3.0);
		collection.add(75.0);
		collection.add(114.0);
		collection.add(65.0);
		collection.add(59.0);
		collection.add(193.0);
		collection.add(87.0);
		collection.add(57.0);
		collection.add(190.0);
		collection.add(53.0);
		collection.add(87.0);
		collection.add(185.0);
		collection.add(192.0);
		collection.add(145.0);
		collection.add(156.0);
		collection.add(183.0);
		collection.add(182.0);
		collection.add(35.0);
		collection.add(58.0);
		collection.add(176.0);
		collection.add(11.0);
		collection.add(141.0);
		collection.add(200.0);
		collection.add(140.0);
		collection.add(37.0);
		collection.add(24.0);
		collection.add(98.0);
		collection.add(133.0);
		collection.add(85.0);
		collection.add(174.0);
		collection.add(14.0);
		collection.add(80.0);
		collection.add(148.0);
		collection.add(73.0);
		collection.add(117.0);
		collection.add(192.0);
		collection.add(194.0);
		collection.add(120.0);
		collection.add(148.0);
		collection.add(125.0);
		collection.add(19.0);
		collection.add(166.0);
		collection.add(60.0);
		collection.add(196.0);
		collection.add(57.0);
		collection.add(114.0);
		collection.add(72.0);
		collection.add(73.0);
		collection.add(133.0);
		collection.add(135.0);
		collection.add(21.0);
		collection.add(57.0);
		collection.add(63.0);
		collection.add(85.0);
		collection.add(94.0);
		collection.add(47.0);
		collection.add(8.0);
		collection.add(195.0);
		collection.add(2.0);
		collection.add(65.0);
		collection.add(34.0);
		collection.add(8.0);
		collection.add(182.0);
		collection.add(100.0);
		collection.add(10.0);
		collection.add(43.0);
		collection.add(75.0);
		collection.add(185.0);
		collection.add(22.0);
		collection.add(76.0);
		collection.add(11.0);
		collection.add(186.0);
		collection.add(58.0);
		collection.add(55.0);
		collection.add(128.0);
		collection.add(82.0);
		collection.add(197.0);
		collection.add(115.0);
		collection.add(179.0);
		collection.add(127.0);
		collection.add(104.0);
		collection.add(41.0);
		collection.add(133.0);
		collection.add(83.0);
		collection.add(83.0);
		collection.add(72.0);
		collection.add(94.0);
		collection.add(80.0);
		collection.add(82.0);
		collection.add(49.0);
		collection.add(15.0);
		collection.add(88.0);
		collection.add(153.0);
		collection.add(173.0);
		collection.add(83.0);
		collection.add(8.0);
		collection.add(133.0);
		collection.add(99.0);
		collection.add(2.0);
		collection.add(150.0);
		collection.add(49.0);
		collection.add(48.0);
		collection.add(2.0);
		collection.add(91.0);
		collection.add(93.0);
		collection.add(155.0);
		collection.add(39.0);
		collection.add(50.0);
		collection.add(102.0);
		collection.add(94.0);
		collection.add(11.0);
		collection.add(61.0);
		collection.add(58.0);
		collection.add(119.0);
		collection.add(84.0);
		collection.add(196.0);
		collection.add(17.0);
		collection.add(57.0);
		collection.add(71.0);
		collection.add(97.0);
		collection.add(153.0);
		collection.add(117.0);
		collection.add(52.0);
		collection.add(107.0);
		collection.add(169.0);
		collection.add(11.0);
		collection.add(191.0);
		collection.add(67.0);
		collection.add(98.0);
		collection.add(158.0);
		collection.add(3.0);
		collection.add(3.0);
		collection.add(116.0);
		collection.add(195.0);
		collection.add(35.0);
		collection.add(153.0);
		collection.add(161.0);
		collection.add(141.0);
		collection.add(2.0);
		collection.add(145.0);
		collection.add(167.0);
		collection.add(116.0);
		collection.add(154.0);
		collection.add(53.0);
		collection.add(184.0);
		collection.add(199.0);
		collection.add(142.0);
		collection.add(175.0);
		collection.add(33.0);
		collection.add(121.0);
		collection.add(81.0);
		collection.add(68.0);
		collection.add(9.0);
		collection.add(163.0);
		collection.add(12.0);
		collection.add(149.0);
		collection.add(33.0);
		collection.add(171.0);
		collection.add(138.0);
		collection.add(83.0);
		collection.add(170.0);
		collection.add(103.0);
		collection.add(116.0);
		collection.add(61.0);
		collection.add(2.0);
		collection.add(34.0);
		collection.add(113.0);
		collection.add(50.0);
		collection.add(144.0);
		collection.add(200.0);
		collection.add(53.0);
		collection.add(182.0);
		collection.add(3.0);
		collection.add(4.0);
		collection.add(120.0);
		collection.add(77.0);
		collection.add(140.0);
		collection.add(37.0);
		collection.add(133.0);
		collection.add(113.0);
		collection.add(125.0);
		collection.add(200.0);
		collection.add(1.0);
		collection.add(9.0);
		collection.add(183.0);
		collection.add(135.0);
		collection.add(57.0);
		collection.add(195.0);
		collection.add(187.0);
		collection.add(94.0);
		collection.add(196.0);
		collection.add(69.0);
		collection.add(162.0);
		collection.add(117.0);
		collection.add(134.0);
		collection.add(60.0);
		collection.add(70.0);
		collection.add(78.0);
		collection.add(56.0);
		collection.add(188.0);
		collection.add(100.0);
		collection.add(85.0);
		collection.add(90.0);
		collection.add(154.0);
		collection.add(159.0);
		collection.add(86.0);
		collection.add(25.0);
		collection.add(35.0);
		collection.add(110.0);
		collection.add(136.0);
		collection.add(87.0);
		collection.add(62.0);
		collection.add(161.0);
		collection.add(186.0);
		collection.add(107.0);
		collection.add(190.0);
		collection.add(72.0);
		collection.add(131.0);
		collection.add(109.0);
		collection.add(186.0);
		collection.add(40.0);
		collection.add(122.0);
		collection.add(50.0);
		collection.add(175.0);
		collection.add(22.0);
		collection.add(174.0);
		collection.add(6.0);
		collection.add(70.0);
		collection.add(65.0);
		collection.add(57.0);
		collection.add(11.0);
		collection.add(177.0);
		collection.add(85.0);
		collection.add(87.0);
		collection.add(85.0);
		collection.add(193.0);
		collection.add(133.0);
		collection.add(76.0);
		collection.add(72.0);
		collection.add(30.0);
		collection.add(45.0);
		collection.add(117.0);
		collection.add(84.0);
		collection.add(178.0);
		collection.add(19.0);
		collection.add(109.0);
		collection.add(169.0);
		collection.add(85.0);
		collection.add(155.0);
		collection.add(104.0);
		collection.add(170.0);
		collection.add(103.0);
		collection.add(136.0);
		collection.add(149.0);
		collection.add(120.0);
		collection.add(15.0);
		collection.add(109.0);
		collection.add(131.0);
		collection.add(167.0);
		collection.add(136.0);
		collection.add(196.0);
		collection.add(32.0);
		collection.add(59.0);
		collection.add(44.0);
		collection.add(166.0);
		collection.add(145.0);
		collection.add(184.0);
		collection.add(54.0);
		collection.add(155.0);
		collection.add(8.0);
		collection.add(168.0);
		collection.add(191.0);
		collection.add(9.0);
		collection.add(48.0);
		collection.add(63.0);
		collection.add(193.0);
		collection.add(56.0);
		collection.add(62.0);
		collection.add(133.0);
		collection.add(77.0);
		collection.add(114.0);
		collection.add(42.0);
		collection.add(112.0);
		collection.add(117.0);
		collection.add(9.0);
		collection.add(118.0);
		collection.add(170.0);
		collection.add(123.0);
		collection.add(111.0);
		collection.add(160.0);
		collection.add(76.0);
		collection.add(90.0);
		collection.add(68.0);
		collection.add(182.0);
		collection.add(99.0);
		collection.add(21.0);
		collection.add(98.0);
		collection.add(99.0);
		collection.add(129.0);
		collection.add(92.0);
		collection.add(15.0);
		collection.add(42.0);
		collection.add(81.0);
		collection.add(158.0);
		collection.add(174.0);
		collection.add(58.0);
		collection.add(163.0);
		collection.add(43.0);
		collection.add(39.0);
		collection.add(171.0);
		collection.add(21.0);
		collection.add(148.0);
		collection.add(117.0);
		collection.add(65.0);
		collection.add(47.0);
		collection.add(167.0);
		collection.add(127.0);
		collection.add(43.0);
		collection.add(85.0);
		collection.add(145.0);
		collection.add(55.0);
		collection.add(184.0);
		collection.add(119.0);
		collection.add(188.0);
		collection.add(82.0);
		collection.add(54.0);
		collection.add(170.0);
		collection.add(99.0);
		collection.add(122.0);
		collection.add(170.0);
		collection.add(39.0);
		collection.add(14.0);
		collection.add(148.0);
		collection.add(87.0);
		collection.add(118.0);
		collection.add(98.0);
		collection.add(76.0);
		collection.add(12.0);
		collection.add(63.0);
		collection.add(83.0);
		collection.add(41.0);
		collection.add(166.0);
		collection.add(105.0);
		collection.add(134.0);
		collection.add(121.0);
		collection.add(133.0);
		collection.add(123.0);
		collection.add(96.0);
		collection.add(178.0);
		collection.add(157.0);
		collection.add(141.0);
		collection.add(23.0);
		collection.add(26.0);
		collection.add(12.0);
		collection.add(137.0);
		collection.add(89.0);
		collection.add(155.0);
		collection.add(81.0);
		collection.add(180.0);
		collection.add(84.0);
		collection.add(175.0);
		collection.add(7.0);
		collection.add(69.0);
		collection.add(64.0);
		collection.add(131.0);
		collection.add(37.0);
		collection.add(187.0);
		collection.add(154.0);
		collection.add(160.0);
		collection.add(121.0);
		collection.add(77.0);
		collection.add(25.0);
		collection.add(154.0);
		collection.add(94.0);
		collection.add(124.0);
		collection.add(153.0);
		collection.add(116.0);
		collection.add(191.0);
		collection.add(49.0);
		collection.add(84.0);
		collection.add(28.0);
		collection.add(75.0);
		collection.add(40.0);
		collection.add(58.0);
		collection.add(150.0);
		collection.add(160.0);
		collection.add(59.0);
		collection.add(195.0);
		collection.add(75.0);
		collection.add(44.0);
		collection.add(16.0);
		collection.add(146.0);
		collection.add(17.0);
		collection.add(172.0);
		collection.add(69.0);
		collection.add(6.0);
		collection.add(59.0);
		collection.add(159.0);
		collection.add(100.0);
		collection.add(97.0);
		collection.add(121.0);
		collection.add(5.0);
		collection.add(41.0);
		collection.add(179.0);
		collection.add(83.0);
		collection.add(193.0);
		collection.add(18.0);
		collection.add(124.0);
		collection.add(191.0);
		collection.add(10.0);
		collection.add(198.0);
		collection.add(17.0);
		collection.add(188.0);
		collection.add(9.0);
		collection.add(126.0);
		collection.add(32.0);
		collection.add(194.0);
		collection.add(174.0);
		collection.add(178.0);
		collection.add(86.0);
		collection.add(89.0);
		collection.add(113.0);
		collection.add(55.0);
		collection.add(28.0);
		collection.add(109.0);
		collection.add(139.0);
		collection.add(30.0);
		collection.add(26.0);
		collection.add(148.0);
		collection.add(129.0);
		collection.add(60.0);
		collection.add(34.0);
		collection.add(47.0);
		collection.add(159.0);
		collection.add(17.0);
		collection.add(33.0);
		collection.add(51.0);
		collection.add(191.0);
		collection.add(38.0);
		collection.add(142.0);
		collection.add(53.0);
		collection.add(57.0);
		collection.add(85.0);
		collection.add(184.0);
		collection.add(46.0);
		collection.add(89.0);
		collection.add(147.0);
		collection.add(38.0);
		collection.add(108.0);
		collection.add(16.0);
		collection.add(158.0);
		collection.add(150.0);
		collection.add(67.0);
		collection.add(77.0);
		collection.add(60.0);
		collection.add(160.0);
		collection.add(161.0);
		collection.add(192.0);
		collection.add(134.0);
		collection.add(177.0);
		collection.add(88.0);
		collection.add(195.0);
		collection.add(24.0);
		collection.add(102.0);
		collection.add(73.0);
		collection.add(23.0);
		collection.add(135.0);
		collection.add(160.0);
		collection.add(176.0);
		collection.add(158.0);
		collection.add(125.0);
		collection.add(50.0);
		collection.add(25.0);
		collection.add(156.0);
		collection.add(68.0);
		collection.add(49.0);
		collection.add(81.0);
		collection.add(61.0);
		collection.add(12.0);
		collection.add(194.0);
		collection.add(28.0);
		collection.add(197.0);
		collection.add(25.0);
		collection.add(101.0);
		collection.add(144.0);
		collection.add(2.0);
		collection.add(161.0);
		collection.add(50.0);
		collection.add(80.0);
		collection.add(44.0);
		collection.add(31.0);
		collection.add(128.0);
		collection.add(71.0);
		collection.add(58.0);
		collection.add(102.0);
		collection.add(200.0);
		collection.add(20.0);
		collection.add(23.0);
		collection.add(108.0);
		collection.add(166.0);
		collection.add(127.0);
		collection.add(165.0);
		collection.add(83.0);
		collection.add(184.0);
		collection.add(90.0);
		collection.add(102.0);
		collection.add(164.0);
		collection.add(84.0);
		collection.add(42.0);
		collection.add(156.0);
		collection.add(197.0);
		collection.add(132.0);
		collection.add(112.0);
		collection.add(72.0);
		collection.add(200.0);
		collection.add(45.0);
		collection.add(41.0);
		collection.add(42.0);
		collection.add(106.0);
		collection.add(168.0);
		collection.add(74.0);
		collection.add(143.0);
		collection.add(149.0);
		collection.add(199.0);
		collection.add(191.0);
		collection.add(80.0);
		collection.add(22.0);
		collection.add(108.0);
		collection.add(169.0);
		collection.add(130.0);
		collection.add(3.0);
		collection.add(188.0);
		collection.add(142.0);
		collection.add(15.0);
		collection.add(12.0);
		collection.add(13.0);
		collection.add(57.0);
		collection.add(116.0);
		collection.add(109.0);
		collection.add(114.0);
		collection.add(123.0);
		collection.add(28.0);
		collection.add(109.0);
		collection.add(126.0);
		collection.add(32.0);
		collection.add(119.0);
		collection.add(102.0);
		collection.add(106.0);
		collection.add(163.0);
		collection.add(69.0);
		collection.add(105.0);
		collection.add(126.0);
		collection.add(119.0);
		collection.add(19.0);
		collection.add(26.0);
		collection.add(10.0);
		collection.add(78.0);
		collection.add(114.0);
		collection.add(160.0);
		collection.add(33.0);
		collection.add(176.0);
		collection.add(193.0);
		collection.add(47.0);
		collection.add(129.0);
		collection.add(23.0);
		collection.add(19.0);
		collection.add(25.0);
		collection.add(178.0);
		collection.add(190.0);
		collection.add(22.0);
		collection.add(72.0);
		collection.add(44.0);
		collection.add(40.0);
		collection.add(132.0);
		collection.add(41.0);
		collection.add(61.0);
		collection.add(1.0);
		collection.add(94.0);
		collection.add(106.0);
		collection.add(200.0);
		collection.add(79.0);
		collection.add(114.0);
		collection.add(77.0);
		collection.add(112.0);
		collection.add(179.0);
		collection.add(83.0);
		collection.add(11.0);
		collection.add(15.0);
		collection.add(148.0);
		collection.add(86.0);
		collection.add(119.0);
		collection.add(173.0);
		collection.add(95.0);
		collection.add(153.0);
		collection.add(158.0);
		collection.add(47.0);
		collection.add(6.0);
		collection.add(84.0);
		collection.add(31.0);
		collection.add(125.0);
		collection.add(66.0);
		collection.add(101.0);
		collection.add(118.0);
		collection.add(28.0);
		collection.add(104.0);
		collection.add(149.0);
		collection.add(88.0);
		collection.add(45.0);
		collection.add(83.0);
		collection.add(106.0);
		collection.add(183.0);
		collection.add(71.0);
		collection.add(19.0);
		collection.add(29.0);
		collection.add(13.0);
		collection.add(4.0);
		collection.add(69.0);
		collection.add(106.0);
		collection.add(69.0);
		collection.add(70.0);
		collection.add(43.0);
		collection.add(157.0);
		collection.add(172.0);
		collection.add(91.0);
		collection.add(174.0);
		collection.add(54.0);
		collection.add(129.0);
		collection.add(117.0);
		collection.add(80.0);
		collection.add(172.0);
		collection.add(61.0);
		collection.add(59.0);
		collection.add(39.0);
		collection.add(62.0);
		collection.add(176.0);
		collection.add(187.0);
		collection.add(187.0);
		collection.add(54.0);
		collection.add(13.0);
		collection.add(31.0);
		collection.add(12.0);
		collection.add(77.0);
		collection.add(161.0);
		collection.add(65.0);
		collection.add(34.0);
		collection.add(119.0);
		collection.add(24.0);
		collection.add(69.0);
		collection.add(152.0);
		collection.add(83.0);
		collection.add(106.0);
		collection.add(110.0);
		collection.add(154.0);
		collection.add(148.0);
		collection.add(34.0);
		collection.add(90.0);
		collection.add(134.0);
		collection.add(111.0);
		collection.add(83.0);
		collection.add(176.0);
		collection.add(186.0);
		collection.add(147.0);
		collection.add(5.0);
		collection.add(88.0);
		collection.add(142.0);
		collection.add(123.0);
		collection.add(50.0);
		collection.add(99.0);
		collection.add(178.0);
		collection.add(106.0);
		collection.add(132.0);
		collection.add(99.0);
		collection.add(121.0);
		collection.add(200.0);
		collection.add(19.0);
		collection.add(28.0);
		collection.add(85.0);
		collection.add(141.0);
		collection.add(62.0);
		collection.add(73.0);
		collection.add(34.0);
		collection.add(62.0);
		collection.add(92.0);
		collection.add(86.0);
		collection.add(142.0);
		collection.add(100.0);
		collection.add(145.0);
		collection.add(199.0);
		collection.add(187.0);
		collection.add(189.0);
		collection.add(185.0);
		collection.add(68.0);
		collection.add(19.0);
		collection.add(77.0);
		collection.add(151.0);
		collection.add(107.0);
		collection.add(32.0);
		collection.add(21.0);
		collection.add(76.0);
		collection.add(193.0);
		collection.add(9.0);
		collection.add(7.0);
		collection.add(83.0);
		collection.add(128.0);
		collection.add(105.0);
		collection.add(5.0);
		collection.add(178.0);
		collection.add(95.0);
		collection.add(16.0);
		collection.add(83.0);
		collection.add(136.0);
		collection.add(50.0);
		collection.add(121.0);
		collection.add(144.0);
		collection.add(33.0);
		collection.add(29.0);
		collection.add(178.0);
		collection.add(72.0);
		collection.add(63.0);
		collection.add(192.0);
		collection.add(101.0);
		collection.add(67.0);
		collection.add(17.0);
		collection.add(162.0);
		collection.add(83.0);
		collection.add(174.0);
		collection.add(110.0);
		collection.add(187.0);
		collection.add(140.0);
		collection.add(198.0);
		collection.add(74.0);
		collection.add(170.0);
		collection.add(121.0);
		collection.add(39.0);
		collection.add(160.0);
		collection.add(162.0);
		collection.add(67.0);
		collection.add(92.0);
		collection.add(7.0);
		collection.add(189.0);
		collection.add(83.0);
		collection.add(50.0);
		collection.add(104.0);
		collection.add(26.0);
		collection.add(37.0);
		collection.add(198.0);
		collection.add(152.0);
		collection.add(34.0);
		collection.add(66.0);
		collection.add(161.0);
		collection.add(73.0);
		collection.add(167.0);
		collection.add(18.0);
		collection.add(89.0);
		collection.add(60.0);
		collection.add(152.0);
		collection.add(45.0);
		collection.add(143.0);
		collection.add(66.0);
		collection.add(123.0);
		collection.add(33.0);
		collection.add(82.0);
		collection.add(66.0);
		collection.add(134.0);
		collection.add(41.0);
		collection.add(15.0);
		collection.add(52.0);
		collection.add(57.0);
		collection.add(43.0);
		collection.add(63.0);
		collection.add(166.0);
		collection.add(40.0);
		collection.add(79.0);
		collection.add(79.0);
		collection.add(176.0);
		collection.add(75.0);
		collection.add(199.0);
		collection.add(108.0);
		collection.add(24.0);
		collection.add(84.0);
		collection.add(191.0);
		collection.add(119.0);
		collection.add(32.0);
		collection.add(32.0);
		collection.add(146.0);
		collection.add(84.0);
		collection.add(161.0);
		collection.add(76.0);
		collection.add(55.0);
		collection.add(83.0);
		collection.add(161.0);
		collection.add(149.0);
		collection.add(40.0);
		collection.add(36.0);
		collection.add(10.0);
		collection.add(145.0);
		collection.add(83.0);
		collection.add(45.0);
		collection.add(189.0);
		collection.add(192.0);
		collection.add(90.0);
		collection.add(195.0);
		collection.add(96.0);
		collection.add(14.0);
		collection.add(110.0);
		collection.add(105.0);
		collection.add(64.0);
		collection.add(79.0);
		collection.add(145.0);
		collection.add(74.0);
		collection.add(126.0);
		collection.add(167.0);
		collection.add(191.0);
		collection.add(185.0);
		collection.add(118.0);
		collection.add(31.0);
		collection.add(59.0);
		collection.add(13.0);
		collection.add(58.0);
		collection.add(25.0);
		collection.add(132.0);
		collection.add(47.0);
		collection.add(27.0);
		collection.add(7.0);
		collection.add(138.0);
		collection.add(50.0);
		collection.add(131.0);
		collection.add(165.0);
		collection.add(24.0);
		collection.add(48.0);
		collection.add(73.0);
		collection.add(182.0);
		collection.add(93.0);
		collection.add(17.0);
		collection.add(64.0);
		collection.add(9.0);
		collection.add(140.0);
		collection.add(178.0);
		collection.add(82.0);
		collection.add(173.0);
		collection.add(139.0);
		collection.add(79.0);
		collection.add(99.0);
		collection.add(84.0);
		collection.add(129.0);
		collection.add(6.0);
		collection.add(113.0);
		collection.add(150.0);
		collection.add(4.0);
		collection.add(175.0);
		collection.add(160.0);
		collection.add(30.0);
		collection.add(48.0);
		collection.add(15.0);
		collection.add(34.0);
		collection.add(120.0);
		collection.add(5.0);
		collection.add(158.0);
		collection.add(62.0);
		collection.add(149.0);
		collection.add(99.0);
		collection.add(150.0);
		collection.add(44.0);
		collection.add(53.0);
		collection.add(106.0);
		collection.add(162.0);
		collection.add(20.0);
		collection.add(20.0);
		collection.add(83.0);
		collection.add(102.0);
		collection.add(195.0);
		collection.add(155.0);
		collection.add(108.0);
		collection.add(108.0);
		collection.add(139.0);
		collection.add(47.0);
		collection.add(105.0);
		collection.add(135.0);
		collection.add(45.0);
		collection.add(137.0);
		collection.add(163.0);
		collection.add(161.0);
		collection.add(99.0);
		collection.add(5.0);
		collection.add(37.0);
		collection.add(29.0);
		collection.add(179.0);
		collection.add(125.0);
		collection.add(97.0);
		collection.add(110.0);
		collection.add(46.0);
		collection.add(17.0);
		collection.add(1.0);
		collection.add(172.0);
		collection.add(2.0);
		collection.add(55.0);
		collection.add(56.0);
		collection.add(102.0);
		collection.add(98.0);
		collection.add(77.0);
		collection.add(53.0);
		collection.add(17.0);
		collection.add(185.0);
		collection.add(17.0);
		collection.add(30.0);
		collection.add(61.0);
		collection.add(159.0);
		collection.add(8.0);
		collection.add(50.0);
		collection.add(82.0);
		collection.add(182.0);
		collection.add(49.0);
		collection.add(110.0);
		collection.add(89.0);
		collection.add(49.0);
		collection.add(85.0);
		collection.add(16.0);
		collection.add(161.0);
		collection.add(155.0);
		collection.add(59.0);
		collection.add(187.0);
		collection.add(200.0);
		collection.add(51.0);
		collection.add(7.0);
		collection.add(120.0);
		collection.add(110.0);
		collection.add(200.0);
		collection.add(36.0);
		collection.add(93.0);
		collection.add(123.0);
		collection.add(52.0);
		collection.add(198.0);
		collection.add(126.0);
		collection.add(166.0);
		collection.add(112.0);
		collection.add(125.0);
		collection.add(150.0);
		collection.add(9.0);
		collection.add(88.0);
		collection.add(138.0);
		collection.add(39.0);
		collection.add(170.0);
		collection.add(109.0);
		collection.add(174.0);
		collection.add(87.0);
		collection.add(78.0);
		collection.add(152.0);
		collection.add(179.0);
		collection.add(198.0);
		collection.add(172.0);
		collection.add(157.0);
		collection.add(124.0);
		collection.add(164.0);
		collection.add(49.0);
		collection.add(144.0);
		collection.add(51.0);
		collection.add(133.0);
		collection.add(38.0);
		collection.add(115.0);
		collection.add(146.0);
		collection.add(134.0);
		collection.add(33.0);
		collection.add(197.0);
		collection.add(19.0);
		collection.add(123.0);
		collection.add(108.0);
		collection.add(109.0);
		collection.add(169.0);
		collection.add(74.0);
		collection.add(80.0);
		collection.add(181.0);
		collection.add(150.0);
		collection.add(189.0);
		collection.add(15.0);
		collection.add(132.0);
		collection.add(116.0);
		collection.add(6.0);
		collection.add(174.0);
		collection.add(29.0);
		collection.add(31.0);
		collection.add(54.0);
		collection.add(163.0);
		collection.add(9.0);
		collection.add(183.0);
		collection.add(184.0);
		collection.add(108.0);
		collection.add(99.0);
		collection.add(140.0);
		collection.add(129.0);
		collection.add(169.0);
		collection.add(135.0);
		collection.add(67.0);
		collection.add(36.0);
		collection.add(59.0);
		collection.add(29.0);
		collection.add(40.0);
		collection.add(24.0);
		collection.add(38.0);
		collection.add(176.0);
		collection.add(41.0);
		collection.add(68.0);
		collection.add(146.0);
		collection.add(98.0);
		collection.add(122.0);
		collection.add(168.0);
		collection.add(152.0);
		collection.add(47.0);
		collection.add(29.0);
		collection.add(84.0);
		collection.add(193.0);
		collection.add(134.0);
		collection.add(172.0);
		collection.add(191.0);
		collection.add(5.0);
		collection.add(166.0);
		collection.add(100.0);
		collection.add(116.0);
		collection.add(122.0);
		collection.add(75.0);
		collection.add(181.0);
		collection.add(80.0);
		collection.add(131.0);
		collection.add(108.0);
		collection.add(116.0);
		collection.add(24.0);
		collection.add(172.0);
		collection.add(76.0);
		collection.add(200.0);
		collection.add(173.0);
		collection.add(78.0);
		collection.add(133.0);
		collection.add(8.0);
		collection.add(87.0);
		collection.add(153.0);
		collection.add(102.0);
		collection.add(83.0);
		collection.add(75.0);
		collection.add(188.0);
		collection.add(30.0);
		collection.add(152.0);
		collection.add(174.0);
		collection.add(159.0);
		collection.add(18.0);
		collection.add(170.0);
		collection.add(82.0);
		collection.add(186.0);
		collection.add(50.0);
		collection.add(128.0);
		collection.add(72.0);
		collection.add(53.0);
		collection.add(133.0);
		collection.add(125.0);
		collection.add(74.0);
		collection.add(146.0);
		collection.add(127.0);
		collection.add(22.0);
		collection.add(172.0);
		collection.add(197.0);
		collection.add(16.0);
		collection.add(92.0);
		collection.add(28.0);
		collection.add(164.0);
		collection.add(147.0);
		collection.add(85.0);
		collection.add(102.0);
		collection.add(109.0);
		collection.add(45.0);
		collection.add(49.0);
		collection.add(146.0);
		collection.add(146.0);
		collection.add(145.0);
		collection.add(3.0);
		collection.add(151.0);
		collection.add(109.0);
		collection.add(167.0);
		collection.add(133.0);
		collection.add(10.0);
		collection.add(91.0);
		collection.add(102.0);
		collection.add(126.0);
		collection.add(175.0);
		collection.add(127.0);
		collection.add(137.0);
		collection.add(171.0);
		collection.add(151.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JHashSet(Blackhole bh) {
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,17.0,114.0,134.0)));
		bh.consume(collection.add(161.0));
		bh.consume(collection.add(131.0));
		collection.toArray(new Double[] {13.0,73.0,30.0,112.0,184.0,65.0,147.0,126.0,16.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,100.0,43.0,60.0,38.0)));
		bh.consume(collection.add(125.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,5.0,191.0,81.0,110.0)));
		bh.consume(collection.remove(48.0));
		bh.consume(collection.add(169.0));
		bh.consume(collection.remove(141.0));
		bh.consume(collection.remove(31.0));
		bh.consume(collection.add(41.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(112.0,91.0,105.0)));
		bh.consume(collection.add(8.0));
		bh.consume(collection.add(87.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,183.0,119.0,107.0,190.0,138.0,127.0,154.0,132.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(75.0,53.0,94.0,68.0,194.0,123.0,56.0)));
		bh.consume(collection.contains(2.0));
		bh.consume(collection.add(99.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,83.0,183.0,133.0)));
		bh.consume(collection.contains(91.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(182.0,50.0,72.0,65.0,25.0)));
		bh.consume(collection.add(186.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(66.0,137.0,195.0,85.0)));
		bh.consume(collection.contains(21.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(32.0,40.0,112.0,170.0)));
		bh.consume(collection.remove(29.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,108.0,165.0,198.0,65.0)));
		bh.consume(collection.add(62.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(188.0,15.0,37.0,156.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(30.0,75.0,78.0,138.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,22.0,74.0,151.0,176.0,145.0)));
		bh.consume(collection.add(68.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(186.0,118.0,77.0,142.0,111.0,119.0,130.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(130.0,41.0,48.0,174.0,38.0,148.0)));
		bh.consume(collection.add(86.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(128.0,99.0,147.0,138.0,114.0,121.0,73.0,166.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,82.0,126.0,116.0,31.0,139.0,7.0)));
		bh.consume(collection.contains(50.0));
		bh.consume(collection.add(113.0));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.remove(69.0));
		bh.consume(collection.contains(110.0));
		bh.consume(collection.add(197.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,31.0,194.0,101.0,17.0,53.0,46.0,76.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,174.0,78.0,104.0,129.0,161.0,83.0,108.0,95.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,47.0,65.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,109.0,140.0,24.0,28.0,180.0,133.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(26.0,42.0,20.0,13.0,141.0,113.0,18.0,21.0,19.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,77.0,191.0,21.0,35.0,41.0,99.0,153.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,168.0,107.0,27.0,58.0,80.0,110.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,7.0,35.0,158.0,81.0,73.0,65.0,28.0,180.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(198.0,57.0,92.0)));
		bh.consume(collection.contains(178.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(70.0,11.0,122.0,30.0,196.0,71.0,49.0)));
		bh.consume(collection.add(40.0));
		bh.consume(collection.add(42.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(35.0,187.0,173.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,180.0,128.0,171.0)));
		bh.consume(collection.add(82.0));
		collection.toArray(new Double[] {63.0,132.0,21.0,36.0,157.0,154.0,72.0});
		bh.consume(collection.remove(175.0));
		bh.consume(collection.add(116.0));
		collection.toArray(new Double[] {97.0,76.0,115.0,54.0,36.0,160.0,139.0,171.0,163.0});
		bh.consume(collection.add(52.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(43.0,45.0,20.0,138.0,83.0,77.0,87.0,179.0)));
		bh.consume(collection.remove(148.0));
		bh.consume(collection.remove(178.0));
		bh.consume(collection.add(172.0));
		bh.consume(collection.remove(167.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,148.0,36.0,173.0,101.0,9.0,42.0,17.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(111.0,147.0,99.0,29.0,189.0,99.0,3.0,70.0,174.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(162.0,168.0,4.0)));
		bh.consume(collection.remove(1.0));
		collection.toArray(new Double[] {5.0,10.0,57.0,132.0,183.0,195.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(173.0,37.0,50.0)));
		collection.toArray(new Double[] {100.0,90.0,188.0,55.0,45.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,72.0,192.0,111.0,199.0,71.0,13.0,138.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,60.0,176.0,5.0,81.0,74.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,122.0,54.0,180.0,179.0,75.0,42.0,29.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,178.0,179.0,200.0)));
		bh.consume(collection.add(120.0));
		bh.consume(collection.remove(105.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,34.0,95.0,19.0,167.0,37.0,89.0,171.0,29.0)));
		bh.consume(collection.add(168.0));
		bh.consume(collection.add(115.0));
		bh.consume(collection.remove(56.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(80.0,143.0,135.0,175.0)));
		bh.consume(collection.add(167.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(41.0,145.0,34.0,181.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,10.0,63.0,163.0,70.0,95.0)));
		bh.consume(collection.add(156.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,112.0,118.0,152.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(193.0,158.0,68.0,81.0,112.0,110.0)));
		bh.consume(collection.remove(132.0));
		collection.toArray(new Double[] {121.0,169.0,142.0,113.0,58.0,16.0});
		bh.consume(collection.contains(10.0));
		bh.consume(collection.contains(50.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,159.0,191.0,73.0,123.0,134.0,71.0)));
		collection.toArray(new Double[] {183.0,68.0,52.0,169.0,33.0,9.0,33.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(193.0,194.0,143.0,161.0,14.0)));
		collection.toArray(new Double[] {198.0,151.0,174.0,173.0});
		bh.consume(collection.add(8.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,123.0,140.0,32.0,132.0,39.0,69.0)));
		bh.consume(collection.remove(89.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(72.0,59.0,178.0,51.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,63.0,117.0,55.0,186.0,61.0,111.0)));
		bh.consume(collection.add(133.0));
		bh.consume(collection.add(107.0));
		bh.consume(collection.remove(65.0));
		bh.consume(collection.remove(36.0));
		collection.toArray(new Double[] {13.0,27.0,196.0,66.0,13.0,146.0,46.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,77.0,183.0,163.0,103.0,76.0,127.0,137.0,170.0)));
		collection.toArray(new Double[] {75.0,183.0,115.0,14.0,110.0,137.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(194.0,150.0,148.0,190.0,51.0,86.0,70.0,49.0,141.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(175.0,189.0,47.0,53.0,150.0,132.0)));
		bh.consume(collection.contains(107.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,5.0,185.0,198.0,162.0,76.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,63.0,71.0,115.0,70.0,160.0)));
		bh.consume(collection.add(120.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,172.0,121.0,4.0,194.0,20.0,151.0)));
		bh.consume(collection.add(174.0));
		bh.consume(collection.remove(2.0));
		bh.consume(collection.add(5.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,59.0,173.0,194.0,13.0,169.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,140.0,79.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(198.0,79.0,121.0,187.0,116.0,134.0,75.0,15.0,2.0)));
		bh.consume(collection.add(194.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(42.0,157.0,114.0,72.0,86.0,28.0,62.0,140.0)));
		bh.consume(collection.contains(60.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,169.0,121.0)));
		bh.consume(collection.add(139.0));
		bh.consume(collection.add(3.0));
		bh.consume(collection.contains(144.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,31.0,115.0,107.0,185.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(69.0,5.0,147.0,93.0,22.0,186.0)));
		bh.consume(collection.contains(66.0));
		bh.consume(collection.add(21.0));
		bh.consume(collection.add(122.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(182.0,153.0,181.0,15.0,1.0,52.0,7.0,172.0)));
		bh.consume(collection.add(99.0));
		bh.consume(collection.add(93.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(15.0,86.0,190.0,135.0,83.0,161.0,121.0,129.0,78.0)));
		bh.consume(collection.add(111.0));
		bh.consume(collection.add(187.0));
		bh.consume(collection.remove(120.0));
		collection.toArray(new Double[] {93.0,40.0,41.0,40.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,38.0,12.0,166.0,164.0)));
		bh.consume(collection.add(57.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,158.0,176.0,178.0,200.0,181.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,106.0,113.0,38.0,119.0,93.0,34.0,119.0,39.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,2.0,40.0)));
		bh.consume(collection.add(154.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,179.0,100.0,41.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,72.0,112.0,32.0,171.0,131.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,153.0,146.0,122.0,14.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(158.0,162.0,122.0)));
		bh.consume(collection.add(88.0));
		collection.toArray(new Double[] {91.0,199.0,183.0,133.0,177.0,138.0,47.0,154.0,37.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,169.0,67.0,59.0,24.0,19.0,152.0,120.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(188.0,117.0,109.0,42.0,28.0,37.0,64.0,118.0)));
		bh.consume(collection.remove(141.0));
		bh.consume(collection.add(107.0));
		bh.consume(collection.add(107.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(5.0,163.0,95.0,71.0,22.0,85.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(135.0,54.0,157.0,165.0,102.0,109.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(189.0,6.0,50.0,20.0)));
		bh.consume(collection.remove(55.0));
		bh.consume(collection.contains(9.0));
		bh.consume(collection.remove(181.0));
		bh.consume(collection.remove(173.0));
		bh.consume(collection.add(17.0));
		bh.consume(collection.add(28.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(200.0,183.0,65.0,121.0)));
		collection.toArray(new Double[] {85.0,93.0,191.0,4.0,109.0,116.0,109.0,106.0});
		bh.consume(collection.add(64.0));
		bh.consume(collection.remove(43.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,200.0,149.0,135.0,55.0,7.0)));
		bh.consume(collection.add(8.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,129.0,77.0,26.0,25.0,37.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,23.0,13.0,120.0,155.0,169.0,74.0,106.0,15.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(30.0,35.0,134.0,123.0)));
		bh.consume(collection.add(82.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,66.0,83.0,190.0,19.0,143.0,111.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,135.0,112.0,85.0,144.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,187.0,171.0,98.0,23.0)));
		bh.consume(collection.remove(119.0));
		bh.consume(collection.add(86.0));
		bh.consume(collection.contains(195.0));
		bh.consume(collection.remove(21.0));
		bh.consume(collection.add(86.0));
		bh.consume(collection.add(168.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,111.0,13.0,153.0,127.0,95.0,13.0)));
		bh.consume(collection.remove(183.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,120.0,56.0,136.0,50.0,182.0,93.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(109.0,77.0,26.0,167.0,105.0,30.0)));
		bh.consume(collection.add(168.0));
		bh.consume(collection.remove(108.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,51.0,148.0,199.0,170.0,180.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(133.0,85.0,184.0,42.0,57.0,64.0)));
		bh.consume(collection.add(121.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,15.0,106.0,104.0,128.0,142.0,24.0,9.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(167.0,82.0,6.0,66.0,185.0,106.0,36.0,13.0,88.0)));
		collection.toArray(new Double[] {11.0,73.0,192.0,116.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,20.0,105.0,69.0,13.0,68.0,70.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,87.0,38.0)));
		bh.consume(collection.add(2.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,94.0,98.0)));
		bh.consume(collection.add(142.0));
		bh.consume(collection.add(139.0));
		bh.consume(collection.add(186.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,44.0,34.0,89.0,72.0,66.0,40.0,154.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,124.0,164.0,94.0,72.0,146.0,130.0)));
		bh.consume(collection.add(22.0));
		bh.consume(collection.add(144.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(160.0,15.0,12.0,155.0,133.0,119.0,149.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,147.0,153.0,87.0,90.0,118.0,135.0,130.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(106.0,3.0,159.0,87.0,19.0,134.0,124.0,2.0)));
		bh.consume(collection.remove(158.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,13.0,123.0,138.0,180.0,116.0,20.0)));
		bh.consume(collection.remove(37.0));
		bh.consume(collection.add(3.0));
		bh.consume(collection.remove(66.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,12.0,116.0,53.0,117.0,151.0)));
		bh.consume(collection.remove(118.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,67.0,176.0,9.0)));
		bh.consume(collection.add(148.0));
		bh.consume(collection.add(174.0));
		bh.consume(collection.add(132.0));
		bh.consume(collection.contains(155.0));
		bh.consume(collection.contains(58.0));
		collection.toArray(new Double[] {89.0,27.0,12.0,18.0,38.0});
		bh.consume(collection.add(137.0));
		bh.consume(collection.add(53.0));
		bh.consume(collection.add(20.0));
		bh.consume(collection.add(82.0));
		bh.consume(collection.add(124.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,80.0,127.0,34.0,56.0,35.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,100.0,44.0,151.0,50.0,116.0,54.0)));
		bh.consume(collection.add(93.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,181.0,62.0,169.0,187.0,35.0,88.0)));
		bh.consume(collection.contains(20.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,24.0,166.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,87.0,119.0,185.0,23.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,122.0,28.0,116.0,192.0,194.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,31.0,144.0,191.0,2.0,165.0,194.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(162.0,167.0,145.0,74.0,123.0,147.0,28.0,151.0,127.0)));
		bh.consume(collection.contains(174.0));
		bh.consume(collection.add(74.0));
		bh.consume(collection.contains(71.0));
		bh.consume(collection.contains(90.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(104.0,90.0,5.0,93.0,194.0,69.0,137.0,47.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(128.0,136.0,72.0,139.0,182.0,146.0,76.0)));
		collection.toArray(new Double[] {52.0,195.0,79.0,2.0,140.0,96.0,120.0,95.0});
		bh.consume(collection.contains(89.0));
		bh.consume(collection.add(139.0));
		bh.consume(collection.contains(71.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(44.0,55.0,41.0,182.0,37.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(193.0,154.0,15.0)));
		bh.consume(collection.add(168.0));
		bh.consume(collection.add(67.0));
		bh.consume(collection.remove(192.0));
		bh.consume(collection.remove(107.0));
		bh.consume(collection.contains(1.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,182.0,12.0,178.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(155.0,78.0,128.0,143.0,125.0,20.0)));
		bh.consume(collection.add(143.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,70.0,149.0,79.0,194.0,72.0,140.0,98.0,55.0)));
		bh.consume(collection.add(158.0));
		bh.consume(collection.add(144.0));
		bh.consume(collection.add(11.0));
		bh.consume(collection.remove(2.0));
		bh.consume(collection.add(144.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,90.0,109.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(128.0,156.0,7.0,166.0,169.0)));
		bh.consume(collection.add(7.0));
		bh.consume(collection.contains(95.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,52.0,67.0)));
		bh.consume(collection.add(145.0));
		bh.consume(collection.add(44.0));
		bh.consume(collection.remove(154.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,195.0,74.0,95.0,95.0,189.0,150.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(56.0,125.0,150.0,180.0,138.0,120.0)));
		bh.consume(collection.contains(164.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,22.0,153.0,127.0,142.0,175.0)));
		bh.consume(collection.remove(110.0));
		bh.consume(collection.add(150.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,163.0,39.0,106.0)));
		bh.consume(collection.remove(113.0));
		bh.consume(collection.add(56.0));
		collection.toArray(new Double[] {102.0,161.0,23.0,41.0});
		bh.consume(collection.add(171.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(145.0,35.0,151.0,176.0,67.0,69.0,43.0)));
		bh.consume(collection.add(37.0));
		bh.consume(collection.contains(168.0));
		bh.consume(collection.add(19.0));
		bh.consume(collection.contains(139.0));
		bh.consume(collection.remove(30.0));
		bh.consume(collection.remove(197.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(11.0,128.0,122.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,121.0,51.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,70.0,117.0,108.0,21.0,167.0,126.0)));
		bh.consume(collection.remove(184.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(162.0,198.0,189.0,17.0,39.0)));
		bh.consume(collection.contains(141.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,97.0,61.0,13.0)));
		bh.consume(collection.remove(97.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(131.0,128.0,66.0,198.0)));
		bh.consume(collection.contains(50.0));
		bh.consume(collection.remove(55.0));
		bh.consume(collection.add(139.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,9.0,133.0,135.0,141.0,168.0,139.0,19.0,39.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,141.0,23.0,118.0,93.0,111.0,41.0,149.0,103.0)));
		bh.consume(collection.remove(67.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,31.0,38.0,127.0,186.0,111.0,49.0)));
		collection.toArray(new Double[] {7.0,127.0,199.0,65.0,99.0});
		bh.consume(collection.remove(182.0));
		collection.toArray(new Double[] {57.0,108.0,35.0,79.0,26.0,144.0,32.0});
		bh.consume(collection.add(7.0));
		collection.toArray(new Double[] {35.0,93.0,88.0,61.0,101.0,193.0,54.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(19.0,47.0,130.0,8.0,175.0,119.0,61.0,2.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,106.0,50.0,25.0,117.0,185.0,90.0,55.0,55.0)));
		bh.consume(collection.contains(161.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,60.0,61.0,197.0,64.0,159.0)));
		bh.consume(collection.contains(84.0));
		bh.consume(collection.remove(196.0));
		bh.consume(collection.remove(92.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(110.0,63.0,39.0,167.0,163.0,116.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,54.0,144.0,126.0,105.0)));
		bh.consume(collection.add(17.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,10.0,183.0,178.0,106.0,109.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,7.0,152.0,38.0,80.0,6.0,133.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,28.0,109.0,41.0,198.0,156.0,37.0,28.0,155.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(111.0,87.0,139.0,197.0,50.0,141.0,7.0)));
		bh.consume(collection.contains(178.0));
		bh.consume(collection.contains(41.0));
		bh.consume(collection.add(165.0));
		bh.consume(collection.add(115.0));
		bh.consume(collection.add(25.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(35.0,48.0,66.0,163.0,70.0,86.0,181.0,4.0,84.0)));
		bh.consume(collection.add(42.0));
		bh.consume(collection.add(90.0));
		bh.consume(collection.remove(197.0));
		bh.consume(collection.add(124.0));
		collection.toArray(new Double[] {66.0,98.0,163.0,42.0,80.0,47.0});
		bh.consume(collection.add(152.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,194.0,34.0,50.0,67.0,28.0)));
		bh.consume(collection.contains(186.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,16.0,75.0,176.0)));
		bh.consume(collection.add(33.0));
		bh.consume(collection.add(48.0));
		collection.toArray(new Double[] {185.0,11.0,13.0,178.0,152.0,139.0,156.0,84.0,55.0});
		bh.consume(collection.add(44.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,193.0,81.0,99.0,152.0,149.0,199.0)));
		bh.consume(collection.add(109.0));
		bh.consume(collection.add(100.0));
		bh.consume(collection.add(51.0));
		bh.consume(collection.remove(5.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,37.0,101.0,2.0,125.0,193.0,54.0)));
		bh.consume(collection.remove(172.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,31.0,199.0,191.0,69.0,134.0,141.0,138.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(106.0,8.0,61.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,79.0,62.0,135.0,121.0,158.0,93.0,112.0,103.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(46.0,42.0,71.0,121.0,41.0,59.0,115.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,62.0,60.0,145.0,172.0,196.0)));
		collection.toArray(new Double[] {12.0,151.0,78.0,193.0,196.0,16.0});
		bh.consume(collection.add(7.0));
		bh.consume(collection.add(166.0));
		bh.consume(collection.add(153.0));
		bh.consume(collection.remove(52.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,183.0,194.0,31.0)));
		bh.consume(collection.add(41.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,185.0,19.0,177.0,188.0,17.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,127.0,21.0,158.0,58.0,10.0,193.0,57.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,92.0,26.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,163.0,24.0,149.0,139.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,22.0,149.0,48.0)));
		collection.toArray(new Double[] {58.0,186.0,124.0,117.0});
		bh.consume(collection.remove(100.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,69.0,79.0,81.0,174.0,63.0,155.0)));
		bh.consume(collection.add(92.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,87.0,43.0,59.0,51.0,93.0,168.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,107.0,111.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,53.0,172.0)));
		collection.toArray(new Double[] {74.0,158.0,182.0,195.0,188.0,191.0,151.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,177.0,41.0,133.0,13.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,130.0,198.0,96.0,113.0,182.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(39.0,115.0,69.0,192.0,2.0,69.0,133.0,197.0,165.0)));
		bh.consume(collection.remove(34.0));
		bh.consume(collection.remove(43.0));
		collection.toArray(new Double[] {178.0,133.0,200.0,83.0,75.0,41.0,131.0});
		bh.consume(collection.add(175.0));
		bh.consume(collection.add(44.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(140.0,114.0,26.0,21.0,38.0,104.0,34.0,159.0,173.0)));
		bh.consume(collection.remove(36.0));
		bh.consume(collection.remove(14.0));
		bh.consume(collection.add(85.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,162.0,35.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(132.0,143.0,48.0,136.0,38.0)));
		bh.consume(collection.add(106.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,161.0,165.0,10.0,35.0,125.0,147.0)));
		bh.consume(collection.add(115.0));
		bh.consume(collection.add(6.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,32.0,1.0,22.0,117.0,159.0,147.0,121.0)));
		bh.consume(collection.add(172.0));
		bh.consume(collection.add(82.0));
		bh.consume(collection.remove(52.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(77.0,147.0,169.0,15.0,34.0,46.0,115.0,129.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(87.0,66.0,109.0,4.0,192.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(142.0,58.0,161.0,176.0,68.0)));
		bh.consume(collection.add(44.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,190.0,91.0,52.0,74.0,144.0,70.0)));
		bh.consume(collection.remove(6.0));
		bh.consume(collection.remove(29.0));
		bh.consume(collection.add(69.0));
		bh.consume(collection.add(173.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,66.0,108.0,193.0,59.0,47.0,107.0,136.0)));
		bh.consume(collection.add(70.0));
		bh.consume(collection.add(34.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(156.0,73.0,42.0)));
		bh.consume(collection.add(85.0));
		bh.consume(collection.remove(164.0));
		bh.consume(collection.contains(172.0));
		bh.consume(collection.add(159.0));
		bh.consume(collection.remove(32.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,130.0,62.0,60.0,5.0,52.0)));
		collection.toArray(new Double[] {165.0,174.0,153.0,117.0,82.0,161.0,14.0,106.0,1.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,51.0,30.0,107.0,43.0,176.0,147.0,198.0,123.0)));
		bh.consume(collection.add(29.0));
		bh.consume(collection.remove(43.0));
		bh.consume(collection.add(26.0));
		bh.consume(collection.remove(79.0));
		bh.consume(collection.add(57.0));
		bh.consume(collection.add(48.0));
		bh.consume(collection.add(96.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,197.0,42.0,190.0)));
		bh.consume(collection.add(42.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,53.0,135.0,18.0,184.0,127.0,79.0)));
		bh.consume(collection.add(114.0));
		collection.toArray(new Double[] {112.0,183.0,179.0,107.0});
		bh.consume(collection.add(149.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(121.0,82.0,191.0,59.0,189.0,57.0,58.0,146.0,162.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,194.0,93.0,119.0,161.0,126.0,97.0)));
		bh.consume(collection.remove(21.0));
		bh.consume(collection.add(97.0));
		bh.consume(collection.add(101.0));
		bh.consume(collection.add(133.0));
		bh.consume(collection.add(140.0));
		bh.consume(collection.add(30.0));
		bh.consume(collection.contains(22.0));
		bh.consume(collection.contains(114.0));
		bh.consume(collection.remove(36.0));
		bh.consume(collection.add(66.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(51.0,24.0,68.0)));
		bh.consume(collection.add(39.0));
		bh.consume(collection.contains(92.0));
		bh.consume(collection.contains(137.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,92.0,5.0,197.0,164.0,183.0)));
		bh.consume(collection.add(175.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,36.0,199.0,133.0,96.0,116.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(5.0,114.0,18.0,3.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(116.0,88.0,100.0,73.0)));
		bh.consume(collection.add(84.0));
		bh.consume(collection.remove(20.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,134.0,151.0,197.0,49.0,72.0)));
		bh.consume(collection.remove(2.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,192.0,135.0,28.0)));
		bh.consume(collection.remove(166.0));
		bh.consume(collection.remove(102.0));
		bh.consume(collection.add(76.0));
		collection.toArray(new Double[] {74.0,194.0,175.0,113.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,166.0,167.0,129.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(18.0,159.0,119.0,146.0,3.0)));
		bh.consume(collection.remove(149.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,34.0,139.0,118.0,76.0,115.0,37.0,30.0)));
		bh.consume(collection.add(192.0));
		bh.consume(collection.remove(86.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(163.0,147.0,30.0,84.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,10.0,41.0,92.0,177.0,183.0,12.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(42.0,121.0,181.0,107.0,23.0,115.0,169.0,1.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(42.0,111.0,78.0,165.0,153.0,100.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,94.0,162.0,170.0,147.0,119.0)));
		bh.consume(collection.remove(22.0));
		bh.consume(collection.add(57.0));
		bh.consume(collection.add(130.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,119.0,84.0,121.0,31.0,13.0,34.0,18.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(125.0,56.0,185.0)));
		bh.consume(collection.add(116.0));
		bh.consume(collection.add(118.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(189.0,118.0,91.0)));
		bh.consume(collection.remove(177.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(86.0,87.0,152.0,129.0,83.0,122.0,92.0)));
		collection.toArray(new Double[] {190.0,183.0,122.0});
		collection.toArray(new Double[] {13.0,120.0,185.0,140.0,33.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,198.0,52.0,195.0)));
		bh.consume(collection.add(76.0));
		bh.consume(collection.add(38.0));
		bh.consume(collection.remove(77.0));
		bh.consume(collection.remove(66.0));
		bh.consume(collection.add(194.0));
	}
}
