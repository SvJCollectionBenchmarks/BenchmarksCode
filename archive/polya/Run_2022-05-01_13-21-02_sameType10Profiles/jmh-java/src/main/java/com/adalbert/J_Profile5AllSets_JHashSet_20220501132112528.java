package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile5AllSets_JHashSet_20220501132112528 {
	java.util.HashSet<Double> collection = new java.util.HashSet<>();
	@Setup(Level.Invocation)
	public void setupJHashSet() {
		collection = new java.util.HashSet<>();
		collection.add(171.0);
		collection.add(74.0);
		collection.add(87.0);
		collection.add(96.0);
		collection.add(64.0);
		collection.add(81.0);
		collection.add(113.0);
		collection.add(70.0);
		collection.add(32.0);
		collection.add(175.0);
		collection.add(32.0);
		collection.add(6.0);
		collection.add(182.0);
		collection.add(197.0);
		collection.add(87.0);
		collection.add(93.0);
		collection.add(158.0);
		collection.add(171.0);
		collection.add(192.0);
		collection.add(97.0);
		collection.add(120.0);
		collection.add(106.0);
		collection.add(48.0);
		collection.add(20.0);
		collection.add(90.0);
		collection.add(37.0);
		collection.add(58.0);
		collection.add(96.0);
		collection.add(13.0);
		collection.add(194.0);
		collection.add(112.0);
		collection.add(173.0);
		collection.add(50.0);
		collection.add(95.0);
		collection.add(150.0);
		collection.add(30.0);
		collection.add(111.0);
		collection.add(94.0);
		collection.add(141.0);
		collection.add(139.0);
		collection.add(39.0);
		collection.add(171.0);
		collection.add(20.0);
		collection.add(142.0);
		collection.add(36.0);
		collection.add(84.0);
		collection.add(189.0);
		collection.add(185.0);
		collection.add(97.0);
		collection.add(116.0);
		collection.add(96.0);
		collection.add(41.0);
		collection.add(91.0);
		collection.add(125.0);
		collection.add(4.0);
		collection.add(200.0);
		collection.add(193.0);
		collection.add(156.0);
		collection.add(74.0);
		collection.add(2.0);
		collection.add(11.0);
		collection.add(93.0);
		collection.add(59.0);
		collection.add(97.0);
		collection.add(151.0);
		collection.add(172.0);
		collection.add(139.0);
		collection.add(7.0);
		collection.add(94.0);
		collection.add(183.0);
		collection.add(106.0);
		collection.add(140.0);
		collection.add(154.0);
		collection.add(153.0);
		collection.add(165.0);
		collection.add(28.0);
		collection.add(2.0);
		collection.add(160.0);
		collection.add(153.0);
		collection.add(197.0);
		collection.add(114.0);
		collection.add(172.0);
		collection.add(67.0);
		collection.add(10.0);
		collection.add(113.0);
		collection.add(61.0);
		collection.add(106.0);
		collection.add(71.0);
		collection.add(169.0);
		collection.add(92.0);
		collection.add(49.0);
		collection.add(121.0);
		collection.add(106.0);
		collection.add(118.0);
		collection.add(152.0);
		collection.add(127.0);
		collection.add(55.0);
		collection.add(31.0);
		collection.add(196.0);
		collection.add(133.0);
		collection.add(70.0);
		collection.add(139.0);
		collection.add(100.0);
		collection.add(38.0);
		collection.add(167.0);
		collection.add(86.0);
		collection.add(117.0);
		collection.add(38.0);
		collection.add(184.0);
		collection.add(153.0);
		collection.add(151.0);
		collection.add(32.0);
		collection.add(53.0);
		collection.add(184.0);
		collection.add(189.0);
		collection.add(151.0);
		collection.add(16.0);
		collection.add(17.0);
		collection.add(51.0);
		collection.add(196.0);
		collection.add(101.0);
		collection.add(70.0);
		collection.add(160.0);
		collection.add(179.0);
		collection.add(73.0);
		collection.add(182.0);
		collection.add(85.0);
		collection.add(3.0);
		collection.add(76.0);
		collection.add(2.0);
		collection.add(1.0);
		collection.add(168.0);
		collection.add(100.0);
		collection.add(97.0);
		collection.add(47.0);
		collection.add(161.0);
		collection.add(21.0);
		collection.add(142.0);
		collection.add(45.0);
		collection.add(176.0);
		collection.add(169.0);
		collection.add(56.0);
		collection.add(33.0);
		collection.add(53.0);
		collection.add(161.0);
		collection.add(121.0);
		collection.add(169.0);
		collection.add(33.0);
		collection.add(181.0);
		collection.add(71.0);
		collection.add(100.0);
		collection.add(100.0);
		collection.add(118.0);
		collection.add(25.0);
		collection.add(200.0);
		collection.add(1.0);
		collection.add(97.0);
		collection.add(69.0);
		collection.add(78.0);
		collection.add(188.0);
		collection.add(4.0);
		collection.add(103.0);
		collection.add(170.0);
		collection.add(97.0);
		collection.add(125.0);
		collection.add(69.0);
		collection.add(163.0);
		collection.add(70.0);
		collection.add(102.0);
		collection.add(74.0);
		collection.add(103.0);
		collection.add(126.0);
		collection.add(184.0);
		collection.add(76.0);
		collection.add(53.0);
		collection.add(138.0);
		collection.add(37.0);
		collection.add(139.0);
		collection.add(36.0);
		collection.add(108.0);
		collection.add(150.0);
		collection.add(97.0);
		collection.add(131.0);
		collection.add(121.0);
		collection.add(166.0);
		collection.add(134.0);
		collection.add(62.0);
		collection.add(191.0);
		collection.add(88.0);
		collection.add(169.0);
		collection.add(88.0);
		collection.add(192.0);
		collection.add(23.0);
		collection.add(67.0);
		collection.add(111.0);
		collection.add(81.0);
		collection.add(129.0);
		collection.add(66.0);
		collection.add(160.0);
		collection.add(52.0);
		collection.add(10.0);
		collection.add(127.0);
		collection.add(142.0);
		collection.add(9.0);
		collection.add(178.0);
		collection.add(87.0);
		collection.add(74.0);
		collection.add(26.0);
		collection.add(193.0);
		collection.add(139.0);
		collection.add(107.0);
		collection.add(171.0);
		collection.add(128.0);
		collection.add(110.0);
		collection.add(119.0);
		collection.add(127.0);
		collection.add(88.0);
		collection.add(37.0);
		collection.add(192.0);
		collection.add(136.0);
		collection.add(195.0);
		collection.add(47.0);
		collection.add(35.0);
		collection.add(161.0);
		collection.add(134.0);
		collection.add(200.0);
		collection.add(82.0);
		collection.add(75.0);
		collection.add(79.0);
		collection.add(192.0);
		collection.add(135.0);
		collection.add(149.0);
		collection.add(73.0);
		collection.add(19.0);
		collection.add(14.0);
		collection.add(72.0);
		collection.add(151.0);
		collection.add(35.0);
		collection.add(103.0);
		collection.add(162.0);
		collection.add(4.0);
		collection.add(165.0);
		collection.add(21.0);
		collection.add(88.0);
		collection.add(184.0);
		collection.add(105.0);
		collection.add(5.0);
		collection.add(4.0);
		collection.add(135.0);
		collection.add(64.0);
		collection.add(188.0);
		collection.add(88.0);
		collection.add(89.0);
		collection.add(142.0);
		collection.add(119.0);
		collection.add(129.0);
		collection.add(139.0);
		collection.add(187.0);
		collection.add(150.0);
		collection.add(161.0);
		collection.add(130.0);
		collection.add(167.0);
		collection.add(181.0);
		collection.add(147.0);
		collection.add(23.0);
		collection.add(47.0);
		collection.add(197.0);
		collection.add(19.0);
		collection.add(160.0);
		collection.add(2.0);
		collection.add(54.0);
		collection.add(96.0);
		collection.add(18.0);
		collection.add(175.0);
		collection.add(183.0);
		collection.add(93.0);
		collection.add(103.0);
		collection.add(153.0);
		collection.add(181.0);
		collection.add(145.0);
		collection.add(192.0);
		collection.add(95.0);
		collection.add(56.0);
		collection.add(128.0);
		collection.add(60.0);
		collection.add(50.0);
		collection.add(68.0);
		collection.add(165.0);
		collection.add(168.0);
		collection.add(57.0);
		collection.add(92.0);
		collection.add(81.0);
		collection.add(47.0);
		collection.add(179.0);
		collection.add(142.0);
		collection.add(61.0);
		collection.add(195.0);
		collection.add(200.0);
		collection.add(69.0);
		collection.add(33.0);
		collection.add(165.0);
		collection.add(107.0);
		collection.add(74.0);
		collection.add(200.0);
		collection.add(143.0);
		collection.add(47.0);
		collection.add(50.0);
		collection.add(80.0);
		collection.add(14.0);
		collection.add(21.0);
		collection.add(119.0);
		collection.add(107.0);
		collection.add(152.0);
		collection.add(154.0);
		collection.add(45.0);
		collection.add(37.0);
		collection.add(9.0);
		collection.add(44.0);
		collection.add(92.0);
		collection.add(68.0);
		collection.add(33.0);
		collection.add(192.0);
		collection.add(183.0);
		collection.add(55.0);
		collection.add(196.0);
		collection.add(115.0);
		collection.add(175.0);
		collection.add(138.0);
		collection.add(60.0);
		collection.add(155.0);
		collection.add(71.0);
		collection.add(54.0);
		collection.add(69.0);
		collection.add(70.0);
		collection.add(181.0);
		collection.add(132.0);
		collection.add(152.0);
		collection.add(30.0);
		collection.add(71.0);
		collection.add(179.0);
		collection.add(159.0);
		collection.add(2.0);
		collection.add(4.0);
		collection.add(46.0);
		collection.add(24.0);
		collection.add(150.0);
		collection.add(50.0);
		collection.add(136.0);
		collection.add(75.0);
		collection.add(166.0);
		collection.add(82.0);
		collection.add(85.0);
		collection.add(150.0);
		collection.add(119.0);
		collection.add(10.0);
		collection.add(14.0);
		collection.add(12.0);
		collection.add(173.0);
		collection.add(86.0);
		collection.add(36.0);
		collection.add(82.0);
		collection.add(173.0);
		collection.add(57.0);
		collection.add(198.0);
		collection.add(12.0);
		collection.add(40.0);
		collection.add(156.0);
		collection.add(187.0);
		collection.add(60.0);
		collection.add(147.0);
		collection.add(20.0);
		collection.add(156.0);
		collection.add(162.0);
		collection.add(48.0);
		collection.add(61.0);
		collection.add(32.0);
		collection.add(157.0);
		collection.add(141.0);
		collection.add(146.0);
		collection.add(55.0);
		collection.add(99.0);
		collection.add(151.0);
		collection.add(38.0);
		collection.add(121.0);
		collection.add(99.0);
		collection.add(78.0);
		collection.add(148.0);
		collection.add(40.0);
		collection.add(176.0);
		collection.add(65.0);
		collection.add(168.0);
		collection.add(180.0);
		collection.add(142.0);
		collection.add(15.0);
		collection.add(195.0);
		collection.add(136.0);
		collection.add(21.0);
		collection.add(51.0);
		collection.add(54.0);
		collection.add(15.0);
		collection.add(92.0);
		collection.add(90.0);
		collection.add(158.0);
		collection.add(82.0);
		collection.add(110.0);
		collection.add(32.0);
		collection.add(160.0);
		collection.add(18.0);
		collection.add(55.0);
		collection.add(61.0);
		collection.add(194.0);
		collection.add(74.0);
		collection.add(109.0);
		collection.add(30.0);
		collection.add(40.0);
		collection.add(13.0);
		collection.add(154.0);
		collection.add(46.0);
		collection.add(104.0);
		collection.add(7.0);
		collection.add(25.0);
		collection.add(43.0);
		collection.add(28.0);
		collection.add(26.0);
		collection.add(1.0);
		collection.add(6.0);
		collection.add(13.0);
		collection.add(152.0);
		collection.add(151.0);
		collection.add(167.0);
		collection.add(45.0);
		collection.add(106.0);
		collection.add(18.0);
		collection.add(80.0);
		collection.add(120.0);
		collection.add(36.0);
		collection.add(126.0);
		collection.add(196.0);
		collection.add(65.0);
		collection.add(77.0);
		collection.add(28.0);
		collection.add(93.0);
		collection.add(81.0);
		collection.add(171.0);
		collection.add(143.0);
		collection.add(88.0);
		collection.add(81.0);
		collection.add(24.0);
		collection.add(3.0);
		collection.add(154.0);
		collection.add(188.0);
		collection.add(5.0);
		collection.add(73.0);
		collection.add(35.0);
		collection.add(103.0);
		collection.add(95.0);
		collection.add(179.0);
		collection.add(7.0);
		collection.add(52.0);
		collection.add(105.0);
		collection.add(17.0);
		collection.add(76.0);
		collection.add(128.0);
		collection.add(57.0);
		collection.add(184.0);
		collection.add(76.0);
		collection.add(101.0);
		collection.add(67.0);
		collection.add(104.0);
		collection.add(122.0);
		collection.add(130.0);
		collection.add(111.0);
		collection.add(97.0);
		collection.add(129.0);
		collection.add(76.0);
		collection.add(197.0);
		collection.add(181.0);
		collection.add(16.0);
		collection.add(173.0);
		collection.add(42.0);
		collection.add(53.0);
		collection.add(138.0);
		collection.add(37.0);
		collection.add(88.0);
		collection.add(36.0);
		collection.add(84.0);
		collection.add(143.0);
		collection.add(77.0);
		collection.add(84.0);
		collection.add(148.0);
		collection.add(130.0);
		collection.add(38.0);
		collection.add(159.0);
		collection.add(58.0);
		collection.add(174.0);
		collection.add(190.0);
		collection.add(142.0);
		collection.add(128.0);
		collection.add(108.0);
		collection.add(14.0);
		collection.add(65.0);
		collection.add(37.0);
		collection.add(168.0);
		collection.add(196.0);
		collection.add(45.0);
		collection.add(68.0);
		collection.add(41.0);
		collection.add(77.0);
		collection.add(58.0);
		collection.add(105.0);
		collection.add(63.0);
		collection.add(134.0);
		collection.add(137.0);
		collection.add(30.0);
		collection.add(66.0);
		collection.add(29.0);
		collection.add(29.0);
		collection.add(109.0);
		collection.add(89.0);
		collection.add(110.0);
		collection.add(175.0);
		collection.add(31.0);
		collection.add(85.0);
		collection.add(37.0);
		collection.add(109.0);
		collection.add(60.0);
		collection.add(171.0);
		collection.add(122.0);
		collection.add(104.0);
		collection.add(164.0);
		collection.add(12.0);
		collection.add(199.0);
		collection.add(6.0);
		collection.add(181.0);
		collection.add(135.0);
		collection.add(49.0);
		collection.add(83.0);
		collection.add(81.0);
		collection.add(95.0);
		collection.add(8.0);
		collection.add(143.0);
		collection.add(11.0);
		collection.add(75.0);
		collection.add(68.0);
		collection.add(4.0);
		collection.add(105.0);
		collection.add(197.0);
		collection.add(116.0);
		collection.add(116.0);
		collection.add(91.0);
		collection.add(89.0);
		collection.add(56.0);
		collection.add(27.0);
		collection.add(4.0);
		collection.add(12.0);
		collection.add(93.0);
		collection.add(23.0);
		collection.add(22.0);
		collection.add(3.0);
		collection.add(45.0);
		collection.add(174.0);
		collection.add(1.0);
		collection.add(114.0);
		collection.add(154.0);
		collection.add(80.0);
		collection.add(179.0);
		collection.add(61.0);
		collection.add(60.0);
		collection.add(143.0);
		collection.add(2.0);
		collection.add(129.0);
		collection.add(176.0);
		collection.add(54.0);
		collection.add(34.0);
		collection.add(63.0);
		collection.add(83.0);
		collection.add(93.0);
		collection.add(34.0);
		collection.add(169.0);
		collection.add(170.0);
		collection.add(147.0);
		collection.add(108.0);
		collection.add(72.0);
		collection.add(114.0);
		collection.add(167.0);
		collection.add(70.0);
		collection.add(21.0);
		collection.add(194.0);
		collection.add(19.0);
		collection.add(101.0);
		collection.add(63.0);
		collection.add(28.0);
		collection.add(165.0);
		collection.add(42.0);
		collection.add(6.0);
		collection.add(34.0);
		collection.add(99.0);
		collection.add(160.0);
		collection.add(183.0);
		collection.add(172.0);
		collection.add(66.0);
		collection.add(11.0);
		collection.add(139.0);
		collection.add(2.0);
		collection.add(90.0);
		collection.add(45.0);
		collection.add(11.0);
		collection.add(178.0);
		collection.add(131.0);
		collection.add(39.0);
		collection.add(148.0);
		collection.add(121.0);
		collection.add(174.0);
		collection.add(78.0);
		collection.add(66.0);
		collection.add(59.0);
		collection.add(168.0);
		collection.add(58.0);
		collection.add(186.0);
		collection.add(2.0);
		collection.add(119.0);
		collection.add(26.0);
		collection.add(31.0);
		collection.add(100.0);
		collection.add(115.0);
		collection.add(63.0);
		collection.add(158.0);
		collection.add(48.0);
		collection.add(123.0);
		collection.add(127.0);
		collection.add(122.0);
		collection.add(18.0);
		collection.add(150.0);
		collection.add(178.0);
		collection.add(167.0);
		collection.add(196.0);
		collection.add(63.0);
		collection.add(89.0);
		collection.add(17.0);
		collection.add(195.0);
		collection.add(126.0);
		collection.add(99.0);
		collection.add(38.0);
		collection.add(17.0);
		collection.add(110.0);
		collection.add(31.0);
		collection.add(37.0);
		collection.add(110.0);
		collection.add(53.0);
		collection.add(43.0);
		collection.add(164.0);
		collection.add(21.0);
		collection.add(154.0);
		collection.add(118.0);
		collection.add(189.0);
		collection.add(146.0);
		collection.add(63.0);
		collection.add(123.0);
		collection.add(152.0);
		collection.add(117.0);
		collection.add(165.0);
		collection.add(33.0);
		collection.add(73.0);
		collection.add(61.0);
		collection.add(123.0);
		collection.add(41.0);
		collection.add(145.0);
		collection.add(48.0);
		collection.add(122.0);
		collection.add(181.0);
		collection.add(8.0);
		collection.add(114.0);
		collection.add(30.0);
		collection.add(137.0);
		collection.add(28.0);
		collection.add(17.0);
		collection.add(94.0);
		collection.add(30.0);
		collection.add(100.0);
		collection.add(9.0);
		collection.add(110.0);
		collection.add(164.0);
		collection.add(76.0);
		collection.add(132.0);
		collection.add(152.0);
		collection.add(143.0);
		collection.add(123.0);
		collection.add(7.0);
		collection.add(45.0);
		collection.add(191.0);
		collection.add(74.0);
		collection.add(187.0);
		collection.add(48.0);
		collection.add(167.0);
		collection.add(51.0);
		collection.add(187.0);
		collection.add(163.0);
		collection.add(92.0);
		collection.add(46.0);
		collection.add(35.0);
		collection.add(143.0);
		collection.add(54.0);
		collection.add(78.0);
		collection.add(57.0);
		collection.add(181.0);
		collection.add(140.0);
		collection.add(152.0);
		collection.add(190.0);
		collection.add(141.0);
		collection.add(64.0);
		collection.add(16.0);
		collection.add(2.0);
		collection.add(80.0);
		collection.add(50.0);
		collection.add(11.0);
		collection.add(5.0);
		collection.add(165.0);
		collection.add(45.0);
		collection.add(108.0);
		collection.add(11.0);
		collection.add(125.0);
		collection.add(163.0);
		collection.add(139.0);
		collection.add(53.0);
		collection.add(170.0);
		collection.add(45.0);
		collection.add(16.0);
		collection.add(150.0);
		collection.add(154.0);
		collection.add(147.0);
		collection.add(187.0);
		collection.add(5.0);
		collection.add(141.0);
		collection.add(76.0);
		collection.add(24.0);
		collection.add(153.0);
		collection.add(57.0);
		collection.add(110.0);
		collection.add(78.0);
		collection.add(189.0);
		collection.add(193.0);
		collection.add(83.0);
		collection.add(171.0);
		collection.add(91.0);
		collection.add(175.0);
		collection.add(121.0);
		collection.add(57.0);
		collection.add(129.0);
		collection.add(148.0);
		collection.add(137.0);
		collection.add(7.0);
		collection.add(191.0);
		collection.add(42.0);
		collection.add(119.0);
		collection.add(138.0);
		collection.add(185.0);
		collection.add(130.0);
		collection.add(12.0);
		collection.add(51.0);
		collection.add(105.0);
		collection.add(105.0);
		collection.add(169.0);
		collection.add(113.0);
		collection.add(168.0);
		collection.add(165.0);
		collection.add(160.0);
		collection.add(7.0);
		collection.add(196.0);
		collection.add(140.0);
		collection.add(48.0);
		collection.add(38.0);
		collection.add(53.0);
		collection.add(45.0);
		collection.add(93.0);
		collection.add(134.0);
		collection.add(65.0);
		collection.add(74.0);
		collection.add(177.0);
		collection.add(150.0);
		collection.add(46.0);
		collection.add(57.0);
		collection.add(198.0);
		collection.add(53.0);
		collection.add(40.0);
		collection.add(135.0);
		collection.add(2.0);
		collection.add(162.0);
		collection.add(197.0);
		collection.add(105.0);
		collection.add(35.0);
		collection.add(36.0);
		collection.add(108.0);
		collection.add(173.0);
		collection.add(64.0);
		collection.add(186.0);
		collection.add(102.0);
		collection.add(110.0);
		collection.add(171.0);
		collection.add(160.0);
		collection.add(186.0);
		collection.add(120.0);
		collection.add(178.0);
		collection.add(52.0);
		collection.add(88.0);
		collection.add(185.0);
		collection.add(143.0);
		collection.add(20.0);
		collection.add(126.0);
		collection.add(57.0);
		collection.add(79.0);
		collection.add(111.0);
		collection.add(40.0);
		collection.add(115.0);
		collection.add(87.0);
		collection.add(54.0);
		collection.add(147.0);
		collection.add(16.0);
		collection.add(191.0);
		collection.add(163.0);
		collection.add(18.0);
		collection.add(66.0);
		collection.add(3.0);
		collection.add(41.0);
		collection.add(151.0);
		collection.add(115.0);
		collection.add(12.0);
		collection.add(83.0);
		collection.add(13.0);
		collection.add(188.0);
		collection.add(32.0);
		collection.add(161.0);
		collection.add(160.0);
		collection.add(23.0);
		collection.add(175.0);
		collection.add(35.0);
		collection.add(77.0);
		collection.add(149.0);
		collection.add(156.0);
		collection.add(193.0);
		collection.add(140.0);
		collection.add(170.0);
		collection.add(159.0);
		collection.add(161.0);
		collection.add(130.0);
		collection.add(157.0);
		collection.add(164.0);
		collection.add(162.0);
		collection.add(10.0);
		collection.add(96.0);
		collection.add(167.0);
		collection.add(119.0);
		collection.add(64.0);
		collection.add(17.0);
		collection.add(43.0);
		collection.add(145.0);
		collection.add(63.0);
		collection.add(116.0);
		collection.add(7.0);
		collection.add(176.0);
		collection.add(42.0);
		collection.add(120.0);
		collection.add(166.0);
		collection.add(18.0);
		collection.add(89.0);
		collection.add(2.0);
		collection.add(117.0);
		collection.add(187.0);
		collection.add(18.0);
		collection.add(14.0);
		collection.add(30.0);
		collection.add(144.0);
		collection.add(19.0);
		collection.add(177.0);
		collection.add(77.0);
		collection.add(160.0);
		collection.add(154.0);
		collection.add(9.0);
		collection.add(19.0);
		collection.add(132.0);
		collection.add(108.0);
		collection.add(81.0);
		collection.add(143.0);
		collection.add(158.0);
		collection.add(59.0);
		collection.add(24.0);
		collection.add(11.0);
		collection.add(106.0);
		collection.add(106.0);
		collection.add(118.0);
		collection.add(41.0);
		collection.add(106.0);
		collection.add(91.0);
		collection.add(134.0);
		collection.add(148.0);
		collection.add(139.0);
		collection.add(18.0);
		collection.add(34.0);
		collection.add(110.0);
		collection.add(26.0);
		collection.add(97.0);
		collection.add(121.0);
		collection.add(120.0);
		collection.add(28.0);
		collection.add(82.0);
		collection.add(14.0);
		collection.add(174.0);
		collection.add(63.0);
		collection.add(109.0);
		collection.add(62.0);
		collection.add(92.0);
		collection.add(48.0);
		collection.add(194.0);
		collection.add(95.0);
		collection.add(16.0);
		collection.add(199.0);
		collection.add(92.0);
		collection.add(158.0);
		collection.add(15.0);
		collection.add(136.0);
		collection.add(138.0);
		collection.add(162.0);
		collection.add(66.0);
		collection.add(162.0);
		collection.add(19.0);
		collection.add(142.0);
		collection.add(17.0);
		collection.add(145.0);
		collection.add(196.0);
		collection.add(59.0);
		collection.add(163.0);
		collection.add(62.0);
		collection.add(15.0);
		collection.add(102.0);
		collection.add(26.0);
		collection.add(118.0);
		collection.add(112.0);
		collection.add(79.0);
		collection.add(94.0);
		collection.add(164.0);
		collection.add(124.0);
		collection.add(104.0);
		collection.add(65.0);
		collection.add(81.0);
		collection.add(170.0);
		collection.add(178.0);
		collection.add(3.0);
		collection.add(62.0);
		collection.add(80.0);
		collection.add(133.0);
		collection.add(120.0);
		collection.add(115.0);
		collection.add(73.0);
		collection.add(46.0);
		collection.add(141.0);
		collection.add(30.0);
		collection.add(47.0);
		collection.add(184.0);
		collection.add(19.0);
		collection.add(103.0);
		collection.add(107.0);
		collection.add(112.0);
		collection.add(61.0);
		collection.add(48.0);
		collection.add(126.0);
		collection.add(161.0);
		collection.add(39.0);
		collection.add(53.0);
		collection.add(179.0);
		collection.add(127.0);
		collection.add(2.0);
		collection.add(95.0);
		collection.add(130.0);
		collection.add(111.0);
		collection.add(86.0);
		collection.add(184.0);
		collection.add(154.0);
		collection.add(78.0);
		collection.add(13.0);
		collection.add(11.0);
		collection.add(11.0);
		collection.add(68.0);
		collection.add(2.0);
		collection.add(166.0);
		collection.add(139.0);
		collection.add(94.0);
		collection.add(171.0);
		collection.add(102.0);
		collection.add(107.0);
		collection.add(88.0);
		collection.add(167.0);
		collection.add(59.0);
		collection.add(7.0);
		collection.add(12.0);
		collection.add(34.0);
		collection.add(159.0);
		collection.add(77.0);
		collection.add(158.0);
		collection.add(31.0);
		collection.add(78.0);
		collection.add(198.0);
		collection.add(71.0);
		collection.add(114.0);
		collection.add(45.0);
		collection.add(16.0);
		collection.add(90.0);
		collection.add(12.0);
		collection.add(158.0);
		collection.add(137.0);
		collection.add(125.0);
		collection.add(15.0);
		collection.add(140.0);
		collection.add(36.0);
		collection.add(174.0);
		collection.add(149.0);
		collection.add(168.0);
		collection.add(26.0);
		collection.add(31.0);
		collection.add(159.0);
		collection.add(4.0);
		collection.add(33.0);
		collection.add(189.0);
		collection.add(67.0);
		collection.add(40.0);
		collection.add(35.0);
		collection.add(112.0);
		collection.add(109.0);
		collection.add(115.0);
		collection.add(159.0);
		collection.add(127.0);
		collection.add(100.0);
		collection.add(142.0);
		collection.add(60.0);
		collection.add(66.0);
		collection.add(177.0);
		collection.add(56.0);
		collection.add(2.0);
		collection.add(162.0);
		collection.add(162.0);
		collection.add(196.0);
		collection.add(6.0);
		collection.add(108.0);
		collection.add(119.0);
		collection.add(66.0);
		collection.add(61.0);
		collection.add(42.0);
		collection.add(26.0);
		collection.add(16.0);
		collection.add(29.0);
		collection.add(73.0);
		collection.add(196.0);
		collection.add(191.0);
		collection.add(41.0);
		collection.add(101.0);
		collection.add(107.0);
		collection.add(131.0);
		collection.add(1.0);
		collection.add(189.0);
		collection.add(48.0);
		collection.add(125.0);
		collection.add(35.0);
		collection.add(181.0);
		collection.add(45.0);
		collection.add(14.0);
		collection.add(148.0);
		collection.add(79.0);
		collection.add(163.0);
		collection.add(166.0);
		collection.add(45.0);
		collection.add(192.0);
		collection.add(41.0);
		collection.add(45.0);
		collection.add(8.0);
		collection.add(2.0);
		collection.add(94.0);
		collection.add(62.0);
		collection.add(155.0);
		collection.add(110.0);
		collection.add(107.0);
		collection.add(196.0);
		collection.add(7.0);
		collection.add(159.0);
		collection.add(186.0);
		collection.add(114.0);
		collection.add(99.0);
		collection.add(69.0);
		collection.add(89.0);
		collection.add(1.0);
		collection.add(182.0);
		collection.add(42.0);
		collection.add(186.0);
		collection.add(50.0);
		collection.add(74.0);
		collection.add(62.0);
		collection.add(146.0);
		collection.add(7.0);
		collection.add(43.0);
		collection.add(135.0);
		collection.add(108.0);
		collection.add(11.0);
		collection.add(84.0);
		collection.add(58.0);
		collection.add(85.0);
		collection.add(96.0);
		collection.add(57.0);
		collection.add(105.0);
		collection.add(34.0);
		collection.add(182.0);
		collection.add(35.0);
		collection.add(27.0);
		collection.add(76.0);
		collection.add(92.0);
		collection.add(104.0);
		collection.add(122.0);
		collection.add(160.0);
		collection.add(107.0);
		collection.add(70.0);
		collection.add(82.0);
		collection.add(83.0);
		collection.add(17.0);
		collection.add(51.0);
		collection.add(55.0);
		collection.add(64.0);
		collection.add(93.0);
		collection.add(160.0);
		collection.add(126.0);
		collection.add(60.0);
		collection.add(139.0);
		collection.add(167.0);
		collection.add(88.0);
		collection.add(44.0);
		collection.add(91.0);
		collection.add(21.0);
		collection.add(185.0);
		collection.add(142.0);
		collection.add(177.0);
		collection.add(139.0);
		collection.add(32.0);
		collection.add(154.0);
		collection.add(193.0);
		collection.add(53.0);
		collection.add(67.0);
		collection.add(52.0);
		collection.add(161.0);
		collection.add(128.0);
		collection.add(189.0);
		collection.add(38.0);
		collection.add(20.0);
		collection.add(169.0);
		collection.add(175.0);
		collection.add(39.0);
		collection.add(185.0);
		collection.add(57.0);
		collection.add(143.0);
		collection.add(119.0);
		collection.add(63.0);
		collection.add(184.0);
		collection.add(181.0);
		collection.add(58.0);
		collection.add(180.0);
		collection.add(27.0);
		collection.add(66.0);
		collection.add(111.0);
		collection.add(102.0);
		collection.add(170.0);
		collection.add(190.0);
		collection.add(32.0);
		collection.add(18.0);
		collection.add(113.0);
		collection.add(159.0);
		collection.add(81.0);
		collection.add(43.0);
		collection.add(35.0);
		collection.add(119.0);
		collection.add(47.0);
		collection.add(144.0);
		collection.add(83.0);
		collection.add(64.0);
		collection.add(172.0);
		collection.add(173.0);
		collection.add(178.0);
		collection.add(162.0);
		collection.add(100.0);
		collection.add(104.0);
		collection.add(170.0);
		collection.add(67.0);
		collection.add(96.0);
		collection.add(74.0);
		collection.add(81.0);
		collection.add(129.0);
		collection.add(200.0);
		collection.add(180.0);
		collection.add(58.0);
		collection.add(167.0);
		collection.add(188.0);
		collection.add(168.0);
		collection.add(122.0);
		collection.add(113.0);
		collection.add(172.0);
		collection.add(78.0);
		collection.add(44.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JHashSet(Blackhole bh) {
		bh.consume(collection.addAll(java.util.Arrays.asList(30.0,79.0,45.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,184.0,173.0)));
		bh.consume(collection.contains(73.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(63.0,193.0,84.0,103.0,87.0,125.0,60.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,132.0,119.0,82.0,61.0,133.0,7.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,85.0,144.0)));
		bh.consume(collection.add(49.0));
		bh.consume(collection.contains(50.0));
		bh.consume(collection.add(66.0));
		bh.consume(collection.add(49.0));
		bh.consume(collection.add(85.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(56.0,20.0,47.0,29.0)));
		bh.consume(collection.contains(158.0));
		bh.consume(collection.contains(159.0));
		bh.consume(collection.contains(78.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,162.0,84.0,5.0,63.0,8.0,146.0,166.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(92.0,90.0,157.0,4.0,171.0,161.0,89.0,120.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(132.0,19.0,104.0,113.0,69.0,84.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(155.0,139.0,4.0,1.0,47.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(87.0,7.0,27.0)));
		bh.consume(collection.contains(144.0));
		bh.consume(collection.add(21.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,131.0,83.0,89.0,133.0,25.0,46.0)));
		bh.consume(collection.add(97.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,112.0,156.0,135.0,177.0,154.0)));
		bh.consume(collection.remove(190.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,14.0,28.0,199.0,58.0,130.0,11.0,175.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,130.0,197.0,147.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(128.0,53.0,180.0,3.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(163.0,124.0,165.0,72.0,95.0)));
		bh.consume(collection.add(51.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,110.0,64.0,7.0,119.0,42.0)));
		bh.consume(collection.contains(32.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(116.0,163.0,190.0,134.0,147.0,184.0,53.0)));
		bh.consume(collection.add(17.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,84.0,79.0,136.0)));
		bh.consume(collection.contains(170.0));
		bh.consume(collection.contains(41.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,142.0,28.0,69.0,171.0,180.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(28.0,124.0,160.0,41.0,51.0,1.0,123.0,110.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(146.0,145.0,40.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(102.0,62.0,120.0,17.0,108.0,194.0,141.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(80.0,25.0,14.0,54.0,171.0,116.0,90.0)));
		bh.consume(collection.contains(13.0));
		bh.consume(collection.contains(58.0));
		bh.consume(collection.contains(176.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,181.0,113.0,17.0,139.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(105.0,76.0,54.0,154.0,53.0,35.0,178.0,154.0,175.0)));
		bh.consume(collection.contains(168.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(192.0,25.0,16.0,94.0,153.0,139.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(120.0,103.0,148.0,39.0,142.0,62.0,147.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(168.0,196.0,39.0,119.0,68.0,49.0,68.0,83.0,140.0)));
		collection.toArray(new Double[] {138.0,47.0,22.0,90.0,109.0,17.0,127.0,18.0,8.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,4.0,139.0)));
		bh.consume(collection.contains(103.0));
		bh.consume(collection.contains(77.0));
		bh.consume(collection.add(75.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(33.0,128.0,178.0,89.0,39.0,183.0,160.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,118.0,84.0,158.0,78.0,19.0,80.0)));
		bh.consume(collection.contains(149.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,123.0,170.0,46.0,172.0,74.0)));
		bh.consume(collection.contains(68.0));
		bh.consume(collection.contains(195.0));
		bh.consume(collection.contains(62.0));
		bh.consume(collection.contains(190.0));
		bh.consume(collection.add(5.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,15.0,13.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(35.0,136.0,30.0,136.0,12.0)));
		bh.consume(collection.contains(200.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(56.0,62.0,66.0,126.0,123.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,105.0,193.0,147.0,110.0)));
		bh.consume(collection.remove(193.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,36.0,1.0,133.0,135.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(96.0,3.0,86.0,36.0,92.0,119.0,35.0,51.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(129.0,64.0,151.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,119.0,29.0,49.0,146.0,61.0,94.0)));
		bh.consume(collection.contains(43.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(120.0,117.0,130.0,141.0,55.0,179.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(165.0,49.0,17.0,86.0,141.0,92.0,87.0,127.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,103.0,57.0,32.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,54.0,65.0,31.0)));
		bh.consume(collection.add(196.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(176.0,66.0,84.0,153.0,191.0,172.0,60.0,157.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,76.0,117.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(133.0,177.0,1.0,95.0,105.0,166.0,20.0,3.0,4.0)));
		bh.consume(collection.contains(55.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(14.0,75.0,47.0,38.0,32.0,155.0,36.0)));
		bh.consume(collection.add(51.0));
		bh.consume(collection.add(168.0));
		bh.consume(collection.contains(51.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,169.0,197.0,83.0,81.0,151.0,126.0,58.0,34.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,22.0,127.0,6.0,191.0,142.0,69.0)));
		bh.consume(collection.contains(128.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(33.0,151.0,149.0,39.0,86.0,187.0,68.0,162.0)));
		bh.consume(collection.contains(10.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,194.0,3.0,127.0,58.0,8.0,49.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,34.0,65.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,48.0,158.0,188.0,194.0,152.0,117.0,73.0)));
		bh.consume(collection.contains(117.0));
		bh.consume(collection.add(130.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(119.0,146.0,10.0,129.0,65.0,8.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,155.0,109.0,199.0,73.0,59.0,10.0)));
		bh.consume(collection.contains(32.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(25.0,13.0,187.0,158.0,194.0,149.0)));
		bh.consume(collection.contains(39.0));
		bh.consume(collection.remove(22.0));
		bh.consume(collection.add(158.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,21.0,124.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(141.0,28.0,97.0,125.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,86.0,42.0,136.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,33.0,108.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,95.0,15.0,165.0)));
		bh.consume(collection.contains(196.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,113.0,22.0,62.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,6.0,6.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,132.0,3.0,145.0,192.0,176.0,186.0)));
		bh.consume(collection.contains(85.0));
		bh.consume(collection.contains(15.0));
		bh.consume(collection.add(178.0));
		bh.consume(collection.contains(30.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,173.0,33.0,49.0,108.0,65.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,144.0,182.0,28.0,144.0,107.0,100.0,96.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,110.0,56.0,11.0,179.0,52.0,141.0,195.0)));
		bh.consume(collection.add(106.0));
		bh.consume(collection.contains(97.0));
		bh.consume(collection.add(105.0));
		bh.consume(collection.add(188.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,198.0,122.0,200.0,153.0,152.0,49.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,158.0,80.0)));
		bh.consume(collection.contains(143.0));
		bh.consume(collection.add(186.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,91.0,122.0,141.0,15.0,176.0,193.0,49.0)));
		bh.consume(collection.contains(131.0));
		bh.consume(collection.add(157.0));
		bh.consume(collection.add(197.0));
		bh.consume(collection.add(170.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,108.0,135.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(187.0,63.0,145.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,196.0,157.0,82.0,105.0,51.0,77.0)));
		bh.consume(collection.remove(32.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,54.0,80.0,139.0,181.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(8.0,13.0,81.0)));
		bh.consume(collection.contains(171.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,69.0,196.0,81.0,126.0,114.0,77.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,120.0,2.0,145.0,128.0,58.0,22.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(128.0,112.0,24.0,158.0,11.0,120.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(67.0,129.0,12.0,111.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(142.0,42.0,120.0,196.0,149.0,62.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,138.0,26.0,31.0,189.0,31.0,43.0,184.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,99.0,186.0,159.0)));
		bh.consume(collection.contains(122.0));
		bh.consume(collection.contains(4.0));
		bh.consume(collection.add(73.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(140.0,172.0,179.0,160.0)));
		bh.consume(collection.add(75.0));
		bh.consume(collection.contains(63.0));
		bh.consume(collection.add(14.0));
		bh.consume(collection.contains(34.0));
		bh.consume(collection.add(76.0));
		bh.consume(collection.contains(197.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(136.0,41.0,119.0,192.0,200.0,168.0,194.0,161.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(153.0,29.0,11.0,136.0,170.0,38.0,192.0,27.0,48.0)));
		bh.consume(collection.add(129.0));
		bh.consume(collection.add(138.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(31.0,35.0,159.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(79.0,93.0,9.0,122.0,15.0,90.0,179.0,47.0,70.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(162.0,82.0,173.0,142.0,61.0,54.0,104.0,86.0,103.0)));
		bh.consume(collection.contains(134.0));
		bh.consume(collection.add(191.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(51.0,154.0,5.0,196.0,132.0,10.0,149.0)));
		bh.consume(collection.add(62.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,73.0,9.0,45.0,166.0)));
		bh.consume(collection.contains(90.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,6.0,200.0,44.0,153.0,153.0,61.0,116.0,105.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,150.0,28.0,51.0,22.0,95.0,150.0,171.0,173.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(23.0,194.0,168.0,105.0,71.0,141.0,154.0)));
		bh.consume(collection.contains(139.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,182.0,105.0,92.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(128.0,13.0,198.0,123.0)));
		bh.consume(collection.add(164.0));
		bh.consume(collection.contains(174.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(118.0,103.0,176.0,89.0,176.0,86.0,6.0,11.0)));
		bh.consume(collection.add(18.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(105.0,197.0,103.0,154.0,64.0,56.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,144.0,179.0,123.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,88.0,101.0,62.0)));
		bh.consume(collection.add(67.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,129.0,67.0)));
		bh.consume(collection.add(109.0));
		bh.consume(collection.add(21.0));
		bh.consume(collection.contains(5.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(11.0,179.0,171.0,50.0,113.0,132.0,58.0,20.0,82.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(198.0,55.0,194.0,172.0,102.0,129.0,168.0,128.0,199.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(162.0,25.0,75.0,78.0,58.0,136.0,39.0,164.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,8.0,199.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(114.0,48.0,132.0,190.0,136.0,116.0,100.0)));
		bh.consume(collection.contains(152.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,135.0,153.0,175.0,71.0,99.0,103.0,6.0)));
		bh.consume(collection.contains(191.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,172.0,156.0,106.0,193.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(129.0,83.0,82.0)));
		bh.consume(collection.contains(35.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,19.0,198.0,60.0,136.0,11.0,61.0,127.0,22.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,70.0,67.0,101.0,142.0)));
		bh.consume(collection.contains(74.0));
		bh.consume(collection.add(81.0));
		bh.consume(collection.contains(152.0));
		bh.consume(collection.contains(124.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(56.0,84.0,143.0,64.0,30.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(74.0,149.0,24.0,164.0,141.0,34.0,185.0,71.0,4.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,97.0,55.0,1.0,60.0,111.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(73.0,136.0,182.0,10.0,156.0,18.0,191.0,119.0,145.0)));
		bh.consume(collection.add(94.0));
		bh.consume(collection.contains(185.0));
		bh.consume(collection.add(139.0));
		bh.consume(collection.contains(62.0));
		bh.consume(collection.contains(149.0));
		bh.consume(collection.contains(186.0));
		bh.consume(collection.contains(170.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(76.0,141.0,136.0,13.0,132.0,34.0,197.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(64.0,45.0,2.0,54.0,18.0)));
		bh.consume(collection.contains(24.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,200.0,160.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,185.0,67.0,29.0,197.0,18.0,3.0)));
		bh.consume(collection.contains(55.0));
		bh.consume(collection.contains(17.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(86.0,97.0,33.0,142.0,88.0,53.0,87.0,88.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(143.0,6.0,109.0,57.0,176.0)));
		bh.consume(collection.add(45.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(187.0,187.0,46.0,172.0,7.0,178.0,180.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(199.0,136.0,189.0,134.0,71.0,80.0,76.0,126.0)));
		bh.consume(collection.contains(15.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(139.0,153.0,32.0,155.0,196.0,178.0,143.0,63.0,39.0)));
		bh.consume(collection.contains(190.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,124.0,79.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(102.0,48.0,12.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,72.0,120.0,115.0,72.0,30.0)));
		bh.consume(collection.contains(93.0));
		bh.consume(collection.add(113.0));
		bh.consume(collection.add(108.0));
		bh.consume(collection.contains(162.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,143.0,14.0,37.0,11.0,149.0,19.0,154.0,28.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(32.0,23.0,177.0,148.0,38.0)));
		bh.consume(collection.add(102.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(150.0,74.0,159.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(99.0,167.0,139.0,136.0,156.0)));
		bh.consume(collection.contains(127.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,60.0,164.0,53.0,18.0,163.0,127.0,93.0,116.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(183.0,89.0,72.0)));
		bh.consume(collection.contains(49.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,101.0,12.0,169.0,14.0,29.0,120.0,190.0,5.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,187.0,123.0,22.0,126.0,139.0,166.0,109.0,113.0)));
		bh.consume(collection.contains(185.0));
		bh.consume(collection.add(154.0));
		bh.consume(collection.contains(98.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(122.0,61.0,84.0,112.0,182.0,133.0)));
		bh.consume(collection.contains(89.0));
		bh.consume(collection.contains(143.0));
		bh.consume(collection.contains(63.0));
		bh.consume(collection.contains(3.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,183.0,99.0)));
		bh.consume(collection.contains(190.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(71.0,164.0,26.0,73.0,109.0,115.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(46.0,26.0,112.0,93.0,20.0,145.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,157.0,163.0,103.0,128.0,72.0)));
		bh.consume(collection.contains(55.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,54.0,97.0,17.0,99.0,1.0,22.0)));
		bh.consume(collection.add(16.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(61.0,78.0,70.0,21.0,106.0,29.0,123.0)));
		bh.consume(collection.add(128.0));
		bh.consume(collection.contains(131.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,33.0,70.0,60.0,73.0)));
		bh.consume(collection.contains(179.0));
		bh.consume(collection.add(168.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,164.0,12.0,95.0,145.0,165.0,58.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(8.0,65.0,162.0,2.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,171.0,122.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(153.0,145.0,89.0,67.0,6.0,190.0,193.0,73.0,30.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(180.0,175.0,187.0,45.0,143.0,49.0,187.0,47.0,104.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,65.0,164.0,192.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,9.0,80.0,155.0)));
		bh.consume(collection.contains(82.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,120.0,98.0)));
		bh.consume(collection.contains(176.0));
		bh.consume(collection.contains(43.0));
		bh.consume(collection.add(7.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,32.0,71.0,192.0,131.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(182.0,66.0,61.0,101.0,130.0,7.0,86.0,84.0,17.0)));
		bh.consume(collection.add(67.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(46.0,151.0,147.0,119.0,130.0,53.0,53.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,160.0,49.0,143.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(70.0,61.0,124.0,108.0)));
		bh.consume(collection.contains(165.0));
		bh.consume(collection.add(85.0));
		bh.consume(collection.add(123.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,33.0,113.0,22.0,128.0,35.0)));
		bh.consume(collection.add(17.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(149.0,94.0,187.0,44.0,33.0,139.0,113.0,35.0,9.0)));
		bh.consume(collection.add(77.0));
		bh.consume(collection.contains(33.0));
		bh.consume(collection.contains(79.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(137.0,22.0,55.0,62.0,51.0,66.0,82.0,24.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,135.0,136.0,186.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(109.0,154.0,196.0,86.0,132.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(13.0,90.0,190.0)));
		bh.consume(collection.contains(100.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(133.0,193.0,87.0,12.0,35.0)));
		bh.consume(collection.contains(22.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,125.0,184.0)));
		bh.consume(collection.contains(105.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,76.0,14.0,183.0,98.0,35.0,129.0,11.0,76.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(167.0,44.0,17.0,39.0,53.0,34.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,42.0,184.0,177.0,167.0,196.0,46.0,141.0)));
		bh.consume(collection.contains(20.0));
		bh.consume(collection.contains(164.0));
		bh.consume(collection.contains(186.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(137.0,44.0,37.0,127.0,82.0,63.0,77.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(77.0,53.0,98.0,23.0,78.0,102.0,39.0,64.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(188.0,104.0,130.0,150.0,156.0,95.0,58.0,160.0,65.0)));
		bh.consume(collection.contains(163.0));
		bh.consume(collection.add(141.0));
		bh.consume(collection.contains(55.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,13.0,33.0,137.0,115.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,57.0,59.0,71.0,142.0)));
		bh.consume(collection.contains(86.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(177.0,191.0,197.0,11.0,193.0,25.0,142.0,151.0,90.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,33.0,161.0,107.0,31.0,124.0,143.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,97.0,34.0,64.0,25.0,43.0)));
		bh.consume(collection.contains(90.0));
		bh.consume(collection.contains(17.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(105.0,56.0,156.0)));
		bh.consume(collection.contains(99.0));
		bh.consume(collection.contains(162.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(157.0,87.0,80.0)));
		bh.consume(collection.add(153.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,46.0,5.0,173.0,171.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(54.0,147.0,69.0,57.0,10.0,16.0,102.0,159.0)));
		bh.consume(collection.contains(172.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(116.0,82.0,141.0,190.0)));
		bh.consume(collection.contains(91.0));
		bh.consume(collection.contains(78.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(139.0,93.0,41.0,40.0,187.0,97.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(41.0,119.0,165.0,103.0,180.0,100.0,166.0,11.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(50.0,41.0,110.0,117.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(173.0,7.0,30.0,39.0,197.0,129.0,133.0,160.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,57.0,90.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(169.0,49.0,189.0,105.0)));
		bh.consume(collection.add(86.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(5.0,22.0,177.0,159.0,121.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(165.0,145.0,167.0,150.0,135.0,54.0,35.0,105.0,150.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(163.0,60.0,80.0,5.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(62.0,1.0,73.0,126.0,155.0,138.0,107.0,190.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(186.0,21.0,61.0,172.0,88.0,181.0,83.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,123.0,149.0,87.0,64.0,59.0,103.0)));
		bh.consume(collection.contains(74.0));
		bh.consume(collection.contains(150.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(117.0,75.0,14.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,145.0,141.0,174.0,197.0,43.0,34.0,168.0,47.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,91.0,65.0,186.0,116.0,181.0,28.0,185.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(198.0,7.0,128.0,176.0,68.0,135.0,171.0,14.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(5.0,140.0,94.0,162.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(180.0,9.0,187.0)));
		bh.consume(collection.add(51.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(74.0,16.0,111.0)));
		bh.consume(collection.contains(47.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,31.0,87.0)));
		bh.consume(collection.add(66.0));
		bh.consume(collection.add(88.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,47.0,57.0,68.0,94.0,50.0,86.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,195.0,154.0,20.0)));
		bh.consume(collection.contains(73.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,56.0,184.0)));
		bh.consume(collection.contains(87.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(195.0,93.0,45.0,66.0,149.0,140.0,54.0,72.0)));
		bh.consume(collection.add(9.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(67.0,163.0,195.0,67.0,70.0,93.0,103.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(65.0,54.0,60.0,20.0,174.0,76.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(6.0,65.0,68.0,171.0,71.0,178.0,193.0,23.0)));
		bh.consume(collection.add(69.0));
		bh.consume(collection.contains(69.0));
		bh.consume(collection.contains(52.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(68.0,120.0,113.0,40.0,38.0,186.0,114.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(143.0,106.0,123.0,150.0,58.0,42.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,189.0,131.0,6.0,48.0,75.0,19.0,21.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,136.0,15.0,55.0)));
		bh.consume(collection.add(55.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,80.0,200.0,119.0,151.0,186.0,198.0,182.0,150.0)));
		bh.consume(collection.add(125.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(109.0,32.0,102.0,143.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(168.0,157.0,38.0,16.0,127.0,164.0,36.0)));
		bh.consume(collection.add(55.0));
		bh.consume(collection.contains(106.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,55.0,178.0,104.0,14.0)));
		bh.consume(collection.contains(109.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,14.0,111.0,137.0,33.0,200.0)));
		bh.consume(collection.contains(52.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,111.0,130.0,167.0,145.0,170.0)));
		bh.consume(collection.add(12.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(77.0,149.0,81.0,123.0,15.0,41.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(124.0,191.0,125.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,164.0,7.0,148.0,117.0,60.0,106.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,164.0,130.0)));
		bh.consume(collection.add(83.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(51.0,72.0,175.0,38.0)));
		bh.consume(collection.contains(179.0));
		bh.consume(collection.contains(5.0));
		bh.consume(collection.contains(108.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,4.0,172.0,92.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(45.0,123.0,181.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(52.0,48.0,74.0,83.0,69.0,5.0,63.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(101.0,151.0,190.0,147.0,3.0,151.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,168.0,61.0,145.0,134.0,141.0)));
		bh.consume(collection.contains(58.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,67.0,135.0,138.0,33.0,87.0,127.0,30.0,158.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(5.0,132.0,148.0,84.0)));
		bh.consume(collection.add(127.0));
		bh.consume(collection.add(174.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(38.0,31.0,22.0,37.0,27.0,52.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(171.0,123.0,122.0,130.0,93.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,75.0,78.0,45.0,135.0,37.0,93.0,97.0,65.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(195.0,116.0,105.0,136.0,2.0,12.0,161.0)));
		bh.consume(collection.contains(27.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,66.0,24.0,171.0,17.0)));
		bh.consume(collection.add(15.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(155.0,89.0,20.0,140.0,186.0,124.0,12.0)));
		bh.consume(collection.add(127.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(105.0,196.0,186.0,119.0,190.0)));
		bh.consume(collection.contains(115.0));
		bh.consume(collection.add(171.0));
		bh.consume(collection.contains(43.0));
		bh.consume(collection.add(198.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,123.0,132.0,154.0,84.0,69.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(176.0,83.0,173.0,23.0,8.0,122.0,191.0,9.0,95.0)));
		bh.consume(collection.contains(3.0));
		bh.consume(collection.contains(146.0));
		bh.consume(collection.add(50.0));
		bh.consume(collection.contains(155.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,68.0,74.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,154.0,189.0,197.0,80.0,48.0,81.0,194.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,73.0,10.0,10.0,167.0,1.0,157.0,159.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,165.0,193.0,115.0)));
		bh.consume(collection.contains(90.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(81.0,199.0,45.0)));
		bh.consume(collection.contains(98.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,45.0,164.0,26.0,200.0,10.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,70.0,23.0,34.0,37.0,166.0,26.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,188.0,33.0,100.0,55.0)));
		bh.consume(collection.add(144.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(107.0,94.0,125.0,7.0,124.0,153.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,176.0,150.0,90.0,156.0)));
		bh.consume(collection.contains(27.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(77.0,104.0,72.0,33.0,18.0,169.0,140.0)));
		bh.consume(collection.contains(24.0));
		bh.consume(collection.add(41.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(193.0,36.0,100.0,127.0,77.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(120.0,139.0,65.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(131.0,176.0,197.0)));
		bh.consume(collection.add(175.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(54.0,149.0,163.0,65.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,185.0,15.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,7.0,89.0,93.0,128.0)));
		bh.consume(collection.contains(119.0));
		bh.consume(collection.contains(161.0));
		bh.consume(collection.add(25.0));
		bh.consume(collection.contains(37.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,173.0,132.0,164.0,56.0,140.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(109.0,26.0,43.0,3.0,176.0,24.0,7.0,14.0)));
		bh.consume(collection.contains(193.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(16.0,67.0,123.0,46.0,75.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,75.0,197.0,100.0,159.0,112.0,170.0,176.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(82.0,106.0,129.0,95.0,125.0,89.0)));
		bh.consume(collection.contains(60.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(156.0,156.0,4.0)));
		bh.consume(collection.contains(132.0));
		bh.consume(collection.contains(25.0));
		bh.consume(collection.add(191.0));
		bh.consume(collection.add(57.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(95.0,173.0,96.0,160.0,24.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,53.0,29.0,72.0,137.0,141.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(16.0,62.0,3.0,71.0)));
		bh.consume(collection.add(132.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(179.0,101.0,141.0,117.0,141.0,72.0)));
		bh.consume(collection.contains(187.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(115.0,12.0,167.0,159.0,1.0,12.0)));
		bh.consume(collection.add(143.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,50.0,190.0,113.0,164.0,120.0,81.0,15.0)));
		bh.consume(collection.contains(15.0));
		bh.consume(collection.contains(132.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,163.0,154.0,20.0,20.0,170.0,66.0,22.0,1.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,119.0,25.0,183.0,4.0,34.0,156.0,52.0,35.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(176.0,61.0,160.0,7.0)));
		bh.consume(collection.contains(199.0));
		bh.consume(collection.add(166.0));
		bh.consume(collection.contains(91.0));
		bh.consume(collection.contains(62.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(75.0,45.0,183.0,3.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,164.0,33.0,78.0,158.0,133.0,97.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(60.0,95.0,184.0,88.0,108.0,147.0,87.0,187.0,138.0)));
		bh.consume(collection.contains(120.0));
		bh.consume(collection.contains(54.0));
	}
}
