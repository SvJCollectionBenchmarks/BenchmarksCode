package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile2AllSets_JHashSet_20220501132110738 {
	java.util.HashSet<Double> collection = new java.util.HashSet<>();
	@Setup(Level.Invocation)
	public void setupJHashSet() {
		collection = new java.util.HashSet<>();
		collection.add(128.0);
		collection.add(64.0);
		collection.add(65.0);
		collection.add(142.0);
		collection.add(71.0);
		collection.add(107.0);
		collection.add(112.0);
		collection.add(26.0);
		collection.add(59.0);
		collection.add(47.0);
		collection.add(69.0);
		collection.add(31.0);
		collection.add(71.0);
		collection.add(49.0);
		collection.add(33.0);
		collection.add(97.0);
		collection.add(156.0);
		collection.add(42.0);
		collection.add(101.0);
		collection.add(97.0);
		collection.add(143.0);
		collection.add(156.0);
		collection.add(174.0);
		collection.add(28.0);
		collection.add(78.0);
		collection.add(79.0);
		collection.add(126.0);
		collection.add(141.0);
		collection.add(44.0);
		collection.add(20.0);
		collection.add(58.0);
		collection.add(6.0);
		collection.add(11.0);
		collection.add(121.0);
		collection.add(39.0);
		collection.add(180.0);
		collection.add(63.0);
		collection.add(18.0);
		collection.add(93.0);
		collection.add(199.0);
		collection.add(124.0);
		collection.add(88.0);
		collection.add(68.0);
		collection.add(1.0);
		collection.add(9.0);
		collection.add(155.0);
		collection.add(109.0);
		collection.add(49.0);
		collection.add(109.0);
		collection.add(117.0);
		collection.add(57.0);
		collection.add(157.0);
		collection.add(197.0);
		collection.add(167.0);
		collection.add(64.0);
		collection.add(87.0);
		collection.add(161.0);
		collection.add(59.0);
		collection.add(152.0);
		collection.add(126.0);
		collection.add(60.0);
		collection.add(85.0);
		collection.add(125.0);
		collection.add(190.0);
		collection.add(123.0);
		collection.add(54.0);
		collection.add(53.0);
		collection.add(77.0);
		collection.add(107.0);
		collection.add(124.0);
		collection.add(35.0);
		collection.add(84.0);
		collection.add(194.0);
		collection.add(42.0);
		collection.add(140.0);
		collection.add(164.0);
		collection.add(91.0);
		collection.add(138.0);
		collection.add(17.0);
		collection.add(167.0);
		collection.add(66.0);
		collection.add(71.0);
		collection.add(50.0);
		collection.add(29.0);
		collection.add(9.0);
		collection.add(169.0);
		collection.add(157.0);
		collection.add(18.0);
		collection.add(138.0);
		collection.add(143.0);
		collection.add(56.0);
		collection.add(97.0);
		collection.add(162.0);
		collection.add(50.0);
		collection.add(170.0);
		collection.add(161.0);
		collection.add(33.0);
		collection.add(65.0);
		collection.add(188.0);
		collection.add(168.0);
		collection.add(161.0);
		collection.add(88.0);
		collection.add(125.0);
		collection.add(91.0);
		collection.add(4.0);
		collection.add(75.0);
		collection.add(171.0);
		collection.add(62.0);
		collection.add(169.0);
		collection.add(126.0);
		collection.add(192.0);
		collection.add(168.0);
		collection.add(84.0);
		collection.add(30.0);
		collection.add(42.0);
		collection.add(41.0);
		collection.add(155.0);
		collection.add(23.0);
		collection.add(70.0);
		collection.add(7.0);
		collection.add(75.0);
		collection.add(162.0);
		collection.add(104.0);
		collection.add(175.0);
		collection.add(170.0);
		collection.add(115.0);
		collection.add(155.0);
		collection.add(66.0);
		collection.add(103.0);
		collection.add(159.0);
		collection.add(113.0);
		collection.add(61.0);
		collection.add(163.0);
		collection.add(174.0);
		collection.add(54.0);
		collection.add(141.0);
		collection.add(11.0);
		collection.add(198.0);
		collection.add(195.0);
		collection.add(97.0);
		collection.add(70.0);
		collection.add(160.0);
		collection.add(53.0);
		collection.add(94.0);
		collection.add(56.0);
		collection.add(117.0);
		collection.add(117.0);
		collection.add(43.0);
		collection.add(167.0);
		collection.add(30.0);
		collection.add(161.0);
		collection.add(63.0);
		collection.add(155.0);
		collection.add(70.0);
		collection.add(10.0);
		collection.add(177.0);
		collection.add(6.0);
		collection.add(179.0);
		collection.add(162.0);
		collection.add(99.0);
		collection.add(89.0);
		collection.add(79.0);
		collection.add(134.0);
		collection.add(133.0);
		collection.add(140.0);
		collection.add(131.0);
		collection.add(64.0);
		collection.add(194.0);
		collection.add(179.0);
		collection.add(128.0);
		collection.add(73.0);
		collection.add(83.0);
		collection.add(180.0);
		collection.add(119.0);
		collection.add(51.0);
		collection.add(106.0);
		collection.add(90.0);
		collection.add(105.0);
		collection.add(112.0);
		collection.add(3.0);
		collection.add(181.0);
		collection.add(3.0);
		collection.add(118.0);
		collection.add(114.0);
		collection.add(42.0);
		collection.add(12.0);
		collection.add(157.0);
		collection.add(146.0);
		collection.add(48.0);
		collection.add(24.0);
		collection.add(131.0);
		collection.add(28.0);
		collection.add(81.0);
		collection.add(49.0);
		collection.add(123.0);
		collection.add(10.0);
		collection.add(92.0);
		collection.add(35.0);
		collection.add(92.0);
		collection.add(27.0);
		collection.add(73.0);
		collection.add(53.0);
		collection.add(123.0);
		collection.add(146.0);
		collection.add(23.0);
		collection.add(128.0);
		collection.add(141.0);
		collection.add(33.0);
		collection.add(34.0);
		collection.add(17.0);
		collection.add(31.0);
		collection.add(69.0);
		collection.add(193.0);
		collection.add(64.0);
		collection.add(101.0);
		collection.add(129.0);
		collection.add(10.0);
		collection.add(181.0);
		collection.add(43.0);
		collection.add(53.0);
		collection.add(67.0);
		collection.add(106.0);
		collection.add(93.0);
		collection.add(143.0);
		collection.add(87.0);
		collection.add(182.0);
		collection.add(144.0);
		collection.add(154.0);
		collection.add(4.0);
		collection.add(36.0);
		collection.add(128.0);
		collection.add(10.0);
		collection.add(67.0);
		collection.add(155.0);
		collection.add(87.0);
		collection.add(33.0);
		collection.add(130.0);
		collection.add(78.0);
		collection.add(105.0);
		collection.add(38.0);
		collection.add(82.0);
		collection.add(63.0);
		collection.add(23.0);
		collection.add(99.0);
		collection.add(3.0);
		collection.add(112.0);
		collection.add(96.0);
		collection.add(2.0);
		collection.add(70.0);
		collection.add(190.0);
		collection.add(176.0);
		collection.add(115.0);
		collection.add(185.0);
		collection.add(22.0);
		collection.add(75.0);
		collection.add(192.0);
		collection.add(127.0);
		collection.add(128.0);
		collection.add(94.0);
		collection.add(197.0);
		collection.add(115.0);
		collection.add(120.0);
		collection.add(189.0);
		collection.add(24.0);
		collection.add(115.0);
		collection.add(23.0);
		collection.add(101.0);
		collection.add(110.0);
		collection.add(88.0);
		collection.add(57.0);
		collection.add(128.0);
		collection.add(185.0);
		collection.add(82.0);
		collection.add(154.0);
		collection.add(65.0);
		collection.add(98.0);
		collection.add(50.0);
		collection.add(171.0);
		collection.add(7.0);
		collection.add(103.0);
		collection.add(49.0);
		collection.add(13.0);
		collection.add(193.0);
		collection.add(11.0);
		collection.add(76.0);
		collection.add(111.0);
		collection.add(83.0);
		collection.add(170.0);
		collection.add(116.0);
		collection.add(56.0);
		collection.add(186.0);
		collection.add(162.0);
		collection.add(186.0);
		collection.add(191.0);
		collection.add(156.0);
		collection.add(120.0);
		collection.add(141.0);
		collection.add(85.0);
		collection.add(141.0);
		collection.add(167.0);
		collection.add(42.0);
		collection.add(67.0);
		collection.add(89.0);
		collection.add(197.0);
		collection.add(36.0);
		collection.add(141.0);
		collection.add(77.0);
		collection.add(75.0);
		collection.add(3.0);
		collection.add(29.0);
		collection.add(84.0);
		collection.add(87.0);
		collection.add(137.0);
		collection.add(118.0);
		collection.add(116.0);
		collection.add(60.0);
		collection.add(111.0);
		collection.add(81.0);
		collection.add(183.0);
		collection.add(196.0);
		collection.add(127.0);
		collection.add(118.0);
		collection.add(152.0);
		collection.add(130.0);
		collection.add(4.0);
		collection.add(66.0);
		collection.add(146.0);
		collection.add(35.0);
		collection.add(26.0);
		collection.add(58.0);
		collection.add(113.0);
		collection.add(148.0);
		collection.add(2.0);
		collection.add(141.0);
		collection.add(195.0);
		collection.add(179.0);
		collection.add(128.0);
		collection.add(135.0);
		collection.add(196.0);
		collection.add(76.0);
		collection.add(68.0);
		collection.add(102.0);
		collection.add(37.0);
		collection.add(69.0);
		collection.add(84.0);
		collection.add(39.0);
		collection.add(50.0);
		collection.add(80.0);
		collection.add(112.0);
		collection.add(137.0);
		collection.add(33.0);
		collection.add(127.0);
		collection.add(58.0);
		collection.add(78.0);
		collection.add(189.0);
		collection.add(137.0);
		collection.add(58.0);
		collection.add(153.0);
		collection.add(96.0);
		collection.add(90.0);
		collection.add(176.0);
		collection.add(30.0);
		collection.add(20.0);
		collection.add(128.0);
		collection.add(72.0);
		collection.add(194.0);
		collection.add(56.0);
		collection.add(175.0);
		collection.add(116.0);
		collection.add(101.0);
		collection.add(155.0);
		collection.add(48.0);
		collection.add(165.0);
		collection.add(29.0);
		collection.add(146.0);
		collection.add(123.0);
		collection.add(3.0);
		collection.add(73.0);
		collection.add(198.0);
		collection.add(84.0);
		collection.add(86.0);
		collection.add(109.0);
		collection.add(28.0);
		collection.add(145.0);
		collection.add(142.0);
		collection.add(133.0);
		collection.add(177.0);
		collection.add(45.0);
		collection.add(133.0);
		collection.add(32.0);
		collection.add(142.0);
		collection.add(110.0);
		collection.add(179.0);
		collection.add(102.0);
		collection.add(180.0);
		collection.add(172.0);
		collection.add(94.0);
		collection.add(45.0);
		collection.add(178.0);
		collection.add(45.0);
		collection.add(89.0);
		collection.add(115.0);
		collection.add(189.0);
		collection.add(50.0);
		collection.add(7.0);
		collection.add(119.0);
		collection.add(146.0);
		collection.add(166.0);
		collection.add(8.0);
		collection.add(111.0);
		collection.add(91.0);
		collection.add(75.0);
		collection.add(111.0);
		collection.add(103.0);
		collection.add(10.0);
		collection.add(179.0);
		collection.add(42.0);
		collection.add(44.0);
		collection.add(198.0);
		collection.add(33.0);
		collection.add(45.0);
		collection.add(62.0);
		collection.add(124.0);
		collection.add(145.0);
		collection.add(66.0);
		collection.add(121.0);
		collection.add(54.0);
		collection.add(41.0);
		collection.add(128.0);
		collection.add(84.0);
		collection.add(121.0);
		collection.add(150.0);
		collection.add(135.0);
		collection.add(197.0);
		collection.add(177.0);
		collection.add(19.0);
		collection.add(181.0);
		collection.add(24.0);
		collection.add(187.0);
		collection.add(17.0);
		collection.add(133.0);
		collection.add(147.0);
		collection.add(125.0);
		collection.add(34.0);
		collection.add(49.0);
		collection.add(127.0);
		collection.add(145.0);
		collection.add(161.0);
		collection.add(4.0);
		collection.add(98.0);
		collection.add(24.0);
		collection.add(143.0);
		collection.add(90.0);
		collection.add(66.0);
		collection.add(137.0);
		collection.add(134.0);
		collection.add(84.0);
		collection.add(169.0);
		collection.add(195.0);
		collection.add(126.0);
		collection.add(121.0);
		collection.add(78.0);
		collection.add(31.0);
		collection.add(193.0);
		collection.add(39.0);
		collection.add(123.0);
		collection.add(72.0);
		collection.add(10.0);
		collection.add(131.0);
		collection.add(153.0);
		collection.add(129.0);
		collection.add(37.0);
		collection.add(167.0);
		collection.add(153.0);
		collection.add(69.0);
		collection.add(98.0);
		collection.add(144.0);
		collection.add(200.0);
		collection.add(77.0);
		collection.add(112.0);
		collection.add(30.0);
		collection.add(163.0);
		collection.add(46.0);
		collection.add(175.0);
		collection.add(70.0);
		collection.add(54.0);
		collection.add(200.0);
		collection.add(151.0);
		collection.add(35.0);
		collection.add(13.0);
		collection.add(191.0);
		collection.add(115.0);
		collection.add(136.0);
		collection.add(124.0);
		collection.add(49.0);
		collection.add(101.0);
		collection.add(2.0);
		collection.add(57.0);
		collection.add(47.0);
		collection.add(25.0);
		collection.add(195.0);
		collection.add(163.0);
		collection.add(92.0);
		collection.add(16.0);
		collection.add(159.0);
		collection.add(108.0);
		collection.add(171.0);
		collection.add(148.0);
		collection.add(114.0);
		collection.add(168.0);
		collection.add(162.0);
		collection.add(105.0);
		collection.add(48.0);
		collection.add(194.0);
		collection.add(44.0);
		collection.add(78.0);
		collection.add(137.0);
		collection.add(6.0);
		collection.add(104.0);
		collection.add(60.0);
		collection.add(200.0);
		collection.add(192.0);
		collection.add(195.0);
		collection.add(115.0);
		collection.add(136.0);
		collection.add(100.0);
		collection.add(95.0);
		collection.add(115.0);
		collection.add(73.0);
		collection.add(150.0);
		collection.add(57.0);
		collection.add(4.0);
		collection.add(20.0);
		collection.add(120.0);
		collection.add(149.0);
		collection.add(23.0);
		collection.add(46.0);
		collection.add(33.0);
		collection.add(49.0);
		collection.add(46.0);
		collection.add(45.0);
		collection.add(185.0);
		collection.add(198.0);
		collection.add(159.0);
		collection.add(170.0);
		collection.add(90.0);
		collection.add(149.0);
		collection.add(170.0);
		collection.add(91.0);
		collection.add(114.0);
		collection.add(69.0);
		collection.add(196.0);
		collection.add(97.0);
		collection.add(2.0);
		collection.add(91.0);
		collection.add(25.0);
		collection.add(89.0);
		collection.add(191.0);
		collection.add(167.0);
		collection.add(48.0);
		collection.add(67.0);
		collection.add(76.0);
		collection.add(122.0);
		collection.add(112.0);
		collection.add(174.0);
		collection.add(123.0);
		collection.add(188.0);
		collection.add(33.0);
		collection.add(90.0);
		collection.add(91.0);
		collection.add(94.0);
		collection.add(10.0);
		collection.add(60.0);
		collection.add(196.0);
		collection.add(141.0);
		collection.add(92.0);
		collection.add(55.0);
		collection.add(66.0);
		collection.add(165.0);
		collection.add(57.0);
		collection.add(133.0);
		collection.add(122.0);
		collection.add(199.0);
		collection.add(41.0);
		collection.add(51.0);
		collection.add(129.0);
		collection.add(105.0);
		collection.add(11.0);
		collection.add(160.0);
		collection.add(81.0);
		collection.add(141.0);
		collection.add(110.0);
		collection.add(116.0);
		collection.add(5.0);
		collection.add(188.0);
		collection.add(11.0);
		collection.add(198.0);
		collection.add(89.0);
		collection.add(173.0);
		collection.add(147.0);
		collection.add(169.0);
		collection.add(121.0);
		collection.add(4.0);
		collection.add(142.0);
		collection.add(114.0);
		collection.add(149.0);
		collection.add(17.0);
		collection.add(63.0);
		collection.add(70.0);
		collection.add(109.0);
		collection.add(192.0);
		collection.add(130.0);
		collection.add(173.0);
		collection.add(192.0);
		collection.add(30.0);
		collection.add(17.0);
		collection.add(132.0);
		collection.add(73.0);
		collection.add(149.0);
		collection.add(21.0);
		collection.add(30.0);
		collection.add(101.0);
		collection.add(184.0);
		collection.add(64.0);
		collection.add(6.0);
		collection.add(16.0);
		collection.add(110.0);
		collection.add(3.0);
		collection.add(160.0);
		collection.add(170.0);
		collection.add(29.0);
		collection.add(47.0);
		collection.add(148.0);
		collection.add(190.0);
		collection.add(192.0);
		collection.add(166.0);
		collection.add(64.0);
		collection.add(186.0);
		collection.add(144.0);
		collection.add(6.0);
		collection.add(41.0);
		collection.add(98.0);
		collection.add(100.0);
		collection.add(37.0);
		collection.add(25.0);
		collection.add(52.0);
		collection.add(42.0);
		collection.add(12.0);
		collection.add(36.0);
		collection.add(149.0);
		collection.add(75.0);
		collection.add(17.0);
		collection.add(107.0);
		collection.add(73.0);
		collection.add(96.0);
		collection.add(198.0);
		collection.add(105.0);
		collection.add(111.0);
		collection.add(71.0);
		collection.add(88.0);
		collection.add(155.0);
		collection.add(47.0);
		collection.add(11.0);
		collection.add(177.0);
		collection.add(97.0);
		collection.add(167.0);
		collection.add(5.0);
		collection.add(21.0);
		collection.add(67.0);
		collection.add(32.0);
		collection.add(198.0);
		collection.add(152.0);
		collection.add(2.0);
		collection.add(193.0);
		collection.add(106.0);
		collection.add(179.0);
		collection.add(191.0);
		collection.add(196.0);
		collection.add(139.0);
		collection.add(74.0);
		collection.add(179.0);
		collection.add(108.0);
		collection.add(90.0);
		collection.add(96.0);
		collection.add(148.0);
		collection.add(162.0);
		collection.add(157.0);
		collection.add(95.0);
		collection.add(5.0);
		collection.add(169.0);
		collection.add(173.0);
		collection.add(197.0);
		collection.add(184.0);
		collection.add(6.0);
		collection.add(91.0);
		collection.add(3.0);
		collection.add(122.0);
		collection.add(103.0);
		collection.add(156.0);
		collection.add(179.0);
		collection.add(107.0);
		collection.add(25.0);
		collection.add(15.0);
		collection.add(156.0);
		collection.add(146.0);
		collection.add(18.0);
		collection.add(194.0);
		collection.add(71.0);
		collection.add(117.0);
		collection.add(13.0);
		collection.add(169.0);
		collection.add(90.0);
		collection.add(155.0);
		collection.add(158.0);
		collection.add(156.0);
		collection.add(63.0);
		collection.add(16.0);
		collection.add(176.0);
		collection.add(70.0);
		collection.add(142.0);
		collection.add(160.0);
		collection.add(153.0);
		collection.add(139.0);
		collection.add(79.0);
		collection.add(43.0);
		collection.add(105.0);
		collection.add(57.0);
		collection.add(10.0);
		collection.add(146.0);
		collection.add(164.0);
		collection.add(42.0);
		collection.add(21.0);
		collection.add(54.0);
		collection.add(146.0);
		collection.add(22.0);
		collection.add(53.0);
		collection.add(17.0);
		collection.add(194.0);
		collection.add(45.0);
		collection.add(170.0);
		collection.add(15.0);
		collection.add(78.0);
		collection.add(66.0);
		collection.add(118.0);
		collection.add(177.0);
		collection.add(145.0);
		collection.add(13.0);
		collection.add(165.0);
		collection.add(144.0);
		collection.add(66.0);
		collection.add(47.0);
		collection.add(61.0);
		collection.add(143.0);
		collection.add(38.0);
		collection.add(144.0);
		collection.add(151.0);
		collection.add(31.0);
		collection.add(140.0);
		collection.add(35.0);
		collection.add(132.0);
		collection.add(149.0);
		collection.add(48.0);
		collection.add(95.0);
		collection.add(44.0);
		collection.add(68.0);
		collection.add(75.0);
		collection.add(140.0);
		collection.add(65.0);
		collection.add(7.0);
		collection.add(41.0);
		collection.add(132.0);
		collection.add(59.0);
		collection.add(108.0);
		collection.add(186.0);
		collection.add(161.0);
		collection.add(37.0);
		collection.add(150.0);
		collection.add(162.0);
		collection.add(40.0);
		collection.add(137.0);
		collection.add(110.0);
		collection.add(1.0);
		collection.add(67.0);
		collection.add(143.0);
		collection.add(88.0);
		collection.add(19.0);
		collection.add(102.0);
		collection.add(188.0);
		collection.add(172.0);
		collection.add(132.0);
		collection.add(167.0);
		collection.add(141.0);
		collection.add(113.0);
		collection.add(123.0);
		collection.add(83.0);
		collection.add(196.0);
		collection.add(47.0);
		collection.add(82.0);
		collection.add(90.0);
		collection.add(173.0);
		collection.add(23.0);
		collection.add(188.0);
		collection.add(28.0);
		collection.add(192.0);
		collection.add(133.0);
		collection.add(132.0);
		collection.add(90.0);
		collection.add(25.0);
		collection.add(192.0);
		collection.add(187.0);
		collection.add(158.0);
		collection.add(76.0);
		collection.add(2.0);
		collection.add(71.0);
		collection.add(31.0);
		collection.add(157.0);
		collection.add(133.0);
		collection.add(93.0);
		collection.add(139.0);
		collection.add(69.0);
		collection.add(92.0);
		collection.add(7.0);
		collection.add(166.0);
		collection.add(24.0);
		collection.add(97.0);
		collection.add(9.0);
		collection.add(162.0);
		collection.add(41.0);
		collection.add(95.0);
		collection.add(53.0);
		collection.add(132.0);
		collection.add(38.0);
		collection.add(195.0);
		collection.add(101.0);
		collection.add(70.0);
		collection.add(195.0);
		collection.add(59.0);
		collection.add(11.0);
		collection.add(118.0);
		collection.add(154.0);
		collection.add(125.0);
		collection.add(169.0);
		collection.add(128.0);
		collection.add(102.0);
		collection.add(192.0);
		collection.add(46.0);
		collection.add(60.0);
		collection.add(144.0);
		collection.add(23.0);
		collection.add(131.0);
		collection.add(73.0);
		collection.add(105.0);
		collection.add(54.0);
		collection.add(115.0);
		collection.add(187.0);
		collection.add(151.0);
		collection.add(161.0);
		collection.add(19.0);
		collection.add(180.0);
		collection.add(86.0);
		collection.add(13.0);
		collection.add(51.0);
		collection.add(172.0);
		collection.add(1.0);
		collection.add(25.0);
		collection.add(116.0);
		collection.add(24.0);
		collection.add(178.0);
		collection.add(73.0);
		collection.add(85.0);
		collection.add(115.0);
		collection.add(179.0);
		collection.add(144.0);
		collection.add(174.0);
		collection.add(2.0);
		collection.add(85.0);
		collection.add(150.0);
		collection.add(47.0);
		collection.add(124.0);
		collection.add(9.0);
		collection.add(47.0);
		collection.add(94.0);
		collection.add(55.0);
		collection.add(32.0);
		collection.add(87.0);
		collection.add(159.0);
		collection.add(61.0);
		collection.add(129.0);
		collection.add(180.0);
		collection.add(107.0);
		collection.add(120.0);
		collection.add(49.0);
		collection.add(54.0);
		collection.add(149.0);
		collection.add(86.0);
		collection.add(115.0);
		collection.add(105.0);
		collection.add(197.0);
		collection.add(133.0);
		collection.add(196.0);
		collection.add(12.0);
		collection.add(64.0);
		collection.add(50.0);
		collection.add(124.0);
		collection.add(68.0);
		collection.add(70.0);
		collection.add(148.0);
		collection.add(30.0);
		collection.add(79.0);
		collection.add(62.0);
		collection.add(119.0);
		collection.add(110.0);
		collection.add(122.0);
		collection.add(17.0);
		collection.add(76.0);
		collection.add(146.0);
		collection.add(115.0);
		collection.add(54.0);
		collection.add(162.0);
		collection.add(161.0);
		collection.add(52.0);
		collection.add(109.0);
		collection.add(127.0);
		collection.add(194.0);
		collection.add(66.0);
		collection.add(79.0);
		collection.add(169.0);
		collection.add(136.0);
		collection.add(120.0);
		collection.add(137.0);
		collection.add(78.0);
		collection.add(129.0);
		collection.add(144.0);
		collection.add(76.0);
		collection.add(164.0);
		collection.add(188.0);
		collection.add(191.0);
		collection.add(108.0);
		collection.add(22.0);
		collection.add(77.0);
		collection.add(181.0);
		collection.add(75.0);
		collection.add(105.0);
		collection.add(93.0);
		collection.add(31.0);
		collection.add(46.0);
		collection.add(167.0);
		collection.add(18.0);
		collection.add(115.0);
		collection.add(178.0);
		collection.add(170.0);
		collection.add(183.0);
		collection.add(184.0);
		collection.add(86.0);
		collection.add(118.0);
		collection.add(182.0);
		collection.add(22.0);
		collection.add(75.0);
		collection.add(123.0);
		collection.add(19.0);
		collection.add(190.0);
		collection.add(91.0);
		collection.add(181.0);
		collection.add(176.0);
		collection.add(12.0);
		collection.add(105.0);
		collection.add(11.0);
		collection.add(80.0);
		collection.add(21.0);
		collection.add(152.0);
		collection.add(56.0);
		collection.add(146.0);
		collection.add(176.0);
		collection.add(99.0);
		collection.add(141.0);
		collection.add(174.0);
		collection.add(197.0);
		collection.add(178.0);
		collection.add(187.0);
		collection.add(91.0);
		collection.add(112.0);
		collection.add(50.0);
		collection.add(116.0);
		collection.add(18.0);
		collection.add(32.0);
		collection.add(101.0);
		collection.add(40.0);
		collection.add(183.0);
		collection.add(25.0);
		collection.add(4.0);
		collection.add(10.0);
		collection.add(11.0);
		collection.add(1.0);
		collection.add(52.0);
		collection.add(137.0);
		collection.add(121.0);
		collection.add(10.0);
		collection.add(69.0);
		collection.add(27.0);
		collection.add(38.0);
		collection.add(55.0);
		collection.add(50.0);
		collection.add(49.0);
		collection.add(127.0);
		collection.add(139.0);
		collection.add(15.0);
		collection.add(110.0);
		collection.add(87.0);
		collection.add(187.0);
		collection.add(100.0);
		collection.add(11.0);
		collection.add(62.0);
		collection.add(72.0);
		collection.add(93.0);
		collection.add(120.0);
		collection.add(125.0);
		collection.add(134.0);
		collection.add(179.0);
		collection.add(87.0);
		collection.add(186.0);
		collection.add(34.0);
		collection.add(191.0);
		collection.add(51.0);
		collection.add(94.0);
		collection.add(192.0);
		collection.add(121.0);
		collection.add(183.0);
		collection.add(108.0);
		collection.add(119.0);
		collection.add(149.0);
		collection.add(45.0);
		collection.add(110.0);
		collection.add(150.0);
		collection.add(23.0);
		collection.add(164.0);
		collection.add(66.0);
		collection.add(69.0);
		collection.add(46.0);
		collection.add(168.0);
		collection.add(10.0);
		collection.add(171.0);
		collection.add(54.0);
		collection.add(75.0);
		collection.add(169.0);
		collection.add(159.0);
		collection.add(131.0);
		collection.add(134.0);
		collection.add(74.0);
		collection.add(72.0);
		collection.add(33.0);
		collection.add(115.0);
		collection.add(128.0);
		collection.add(47.0);
		collection.add(126.0);
		collection.add(91.0);
		collection.add(89.0);
		collection.add(29.0);
		collection.add(146.0);
		collection.add(4.0);
		collection.add(65.0);
		collection.add(156.0);
		collection.add(37.0);
		collection.add(131.0);
		collection.add(14.0);
		collection.add(160.0);
		collection.add(80.0);
		collection.add(57.0);
		collection.add(177.0);
		collection.add(6.0);
		collection.add(3.0);
		collection.add(36.0);
		collection.add(177.0);
		collection.add(96.0);
		collection.add(126.0);
		collection.add(18.0);
		collection.add(24.0);
		collection.add(128.0);
		collection.add(81.0);
		collection.add(77.0);
		collection.add(167.0);
		collection.add(97.0);
		collection.add(173.0);
		collection.add(60.0);
		collection.add(124.0);
		collection.add(197.0);
		collection.add(63.0);
		collection.add(34.0);
		collection.add(192.0);
		collection.add(55.0);
		collection.add(61.0);
		collection.add(166.0);
		collection.add(55.0);
		collection.add(26.0);
		collection.add(57.0);
		collection.add(109.0);
		collection.add(51.0);
		collection.add(141.0);
		collection.add(3.0);
		collection.add(114.0);
		collection.add(1.0);
		collection.add(97.0);
		collection.add(141.0);
		collection.add(119.0);
		collection.add(61.0);
		collection.add(181.0);
		collection.add(197.0);
		collection.add(81.0);
		collection.add(8.0);
		collection.add(126.0);
		collection.add(70.0);
		collection.add(35.0);
		collection.add(169.0);
		collection.add(98.0);
		collection.add(67.0);
		collection.add(94.0);
		collection.add(177.0);
		collection.add(188.0);
		collection.add(80.0);
		collection.add(104.0);
		collection.add(76.0);
		collection.add(198.0);
		collection.add(42.0);
		collection.add(165.0);
		collection.add(194.0);
		collection.add(41.0);
		collection.add(11.0);
		collection.add(46.0);
		collection.add(102.0);
		collection.add(158.0);
		collection.add(79.0);
		collection.add(66.0);
		collection.add(155.0);
		collection.add(20.0);
		collection.add(75.0);
		collection.add(51.0);
		collection.add(178.0);
		collection.add(81.0);
		collection.add(2.0);
		collection.add(90.0);
		collection.add(184.0);
		collection.add(65.0);
		collection.add(135.0);
		collection.add(189.0);
		collection.add(60.0);
		collection.add(149.0);
		collection.add(171.0);
		collection.add(153.0);
		collection.add(75.0);
		collection.add(85.0);
		collection.add(135.0);
		collection.add(118.0);
		collection.add(127.0);
		collection.add(5.0);
		collection.add(131.0);
		collection.add(95.0);
		collection.add(27.0);
		collection.add(128.0);
		collection.add(188.0);
		collection.add(81.0);
		collection.add(36.0);
		collection.add(98.0);
		collection.add(14.0);
		collection.add(41.0);
		collection.add(90.0);
		collection.add(31.0);
		collection.add(30.0);
		collection.add(78.0);
		collection.add(91.0);
		collection.add(136.0);
		collection.add(155.0);
		collection.add(78.0);
		collection.add(147.0);
		collection.add(135.0);
		collection.add(39.0);
		collection.add(188.0);
		collection.add(90.0);
		collection.add(180.0);
		collection.add(104.0);
		collection.add(159.0);
		collection.add(70.0);
		collection.add(1.0);
		collection.add(83.0);
		collection.add(111.0);
		collection.add(102.0);
		collection.add(29.0);
		collection.add(80.0);
		collection.add(95.0);
		collection.add(74.0);
		collection.add(154.0);
		collection.add(52.0);
		collection.add(197.0);
		collection.add(183.0);
		collection.add(23.0);
		collection.add(69.0);
		collection.add(123.0);
		collection.add(148.0);
		collection.add(70.0);
		collection.add(183.0);
		collection.add(74.0);
		collection.add(3.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JHashSet(Blackhole bh) {
		bh.consume(collection.remove(26.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,101.0,53.0,169.0,38.0,99.0,175.0,122.0,37.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(140.0,29.0,103.0,25.0,142.0,125.0,48.0)));
		collection.toArray(new Double[] {159.0,79.0,131.0});
		bh.consume(collection.contains(105.0));
		collection.toArray(new Double[] {62.0,76.0,1.0,22.0,14.0,169.0});
		collection.toArray(new Double[] {103.0,91.0,183.0,176.0,53.0,29.0,13.0,196.0,28.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,136.0,164.0,45.0,110.0,10.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(81.0,199.0,194.0,178.0,122.0,137.0)));
		bh.consume(collection.contains(124.0));
		collection.toArray(new Double[] {131.0,131.0,115.0,99.0,142.0,54.0,74.0,34.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,159.0,173.0)));
		collection.toArray(new Double[] {198.0,154.0,187.0,86.0,182.0,4.0,100.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,110.0,200.0,152.0,94.0,179.0,88.0,142.0,35.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(140.0,116.0,78.0)));
		bh.consume(collection.add(121.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(6.0,125.0,94.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,186.0,169.0,112.0)));
		collection.toArray(new Double[] {130.0,141.0,182.0,84.0,50.0,78.0,41.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,38.0,159.0,138.0,176.0,158.0,40.0,82.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(162.0,5.0,2.0,90.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,59.0,88.0,17.0,99.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,20.0,188.0,103.0,143.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(58.0,56.0,8.0,45.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,80.0,196.0,199.0,138.0,188.0,3.0,145.0,26.0)));
		bh.consume(collection.contains(34.0));
		bh.consume(collection.contains(130.0));
		collection.toArray(new Double[] {150.0,51.0,157.0,94.0,125.0,142.0,185.0,197.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,140.0,199.0,67.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(193.0,178.0,76.0,114.0,27.0,195.0,140.0,142.0,54.0)));
		bh.consume(collection.remove(155.0));
		bh.consume(collection.add(44.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(92.0,133.0,192.0,171.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(67.0,20.0,166.0,7.0,111.0,35.0,61.0,181.0,178.0)));
		collection.toArray(new Double[] {65.0,61.0,70.0,77.0,136.0,48.0,138.0});
		collection.toArray(new Double[] {13.0,42.0,71.0,136.0,145.0,189.0,118.0,190.0,169.0});
		bh.consume(collection.add(157.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,78.0,76.0)));
		collection.toArray(new Double[] {44.0,191.0,10.0,65.0,9.0,3.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(9.0,4.0,184.0,27.0,192.0,171.0)));
		bh.consume(collection.add(105.0));
		bh.consume(collection.add(107.0));
		collection.toArray(new Double[] {56.0,86.0,30.0,10.0,36.0,9.0,47.0,33.0});
		bh.consume(collection.remove(44.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(143.0,118.0,110.0,39.0,109.0,156.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(6.0,176.0,4.0,91.0,92.0,166.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(112.0,167.0,75.0,46.0,12.0,57.0,126.0,37.0,103.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,79.0,103.0,79.0,141.0,134.0,155.0,40.0,147.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,37.0,52.0,49.0,90.0,129.0,145.0)));
		collection.toArray(new Double[] {183.0,37.0,46.0,54.0,139.0,140.0,34.0,85.0});
		bh.consume(collection.remove(155.0));
		bh.consume(collection.contains(2.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(150.0,7.0,120.0,57.0,184.0,52.0,19.0)));
		collection.toArray(new Double[] {6.0,24.0,149.0,178.0});
		collection.toArray(new Double[] {154.0,92.0,193.0,175.0});
		bh.consume(collection.add(171.0));
		bh.consume(collection.remove(67.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,30.0,99.0,197.0,75.0)));
		bh.consume(collection.add(72.0));
		bh.consume(collection.add(80.0));
		bh.consume(collection.contains(22.0));
		bh.consume(collection.add(199.0));
		bh.consume(collection.add(31.0));
		bh.consume(collection.add(45.0));
		collection.toArray(new Double[] {7.0,133.0,40.0});
		bh.consume(collection.contains(6.0));
		bh.consume(collection.add(88.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(120.0,93.0,9.0,34.0,170.0,177.0,95.0,52.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,179.0,171.0,121.0,180.0,55.0,5.0,190.0,173.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(5.0,161.0,134.0,14.0,81.0,77.0,36.0,57.0,98.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(187.0,115.0,199.0,185.0,11.0,136.0,166.0,28.0)));
		collection.toArray(new Double[] {150.0,133.0,156.0,61.0,176.0});
		collection.toArray(new Double[] {122.0,14.0,78.0,91.0,187.0,155.0,161.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,16.0,148.0,87.0)));
		bh.consume(collection.contains(48.0));
		bh.consume(collection.remove(47.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,184.0,193.0,102.0,105.0,93.0,113.0,127.0,65.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(136.0,159.0,42.0,191.0,161.0)));
		collection.toArray(new Double[] {131.0,26.0,18.0,142.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,72.0,150.0,134.0,61.0,174.0,47.0,10.0,193.0)));
		bh.consume(collection.remove(57.0));
		collection.toArray(new Double[] {91.0,74.0,128.0,76.0,161.0,197.0,182.0,66.0});
		bh.consume(collection.add(142.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(15.0,27.0,154.0,32.0,141.0,60.0,116.0,128.0,163.0)));
		bh.consume(collection.contains(172.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,86.0,135.0,121.0,159.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,35.0,135.0,175.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,105.0,152.0,116.0,167.0,77.0,165.0)));
		bh.consume(collection.remove(134.0));
		collection.toArray(new Double[] {108.0,69.0,79.0,191.0,165.0,47.0,190.0});
		bh.consume(collection.contains(128.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,157.0,14.0,125.0,37.0,18.0)));
		collection.toArray(new Double[] {8.0,114.0,106.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(175.0,53.0,164.0,127.0,74.0,19.0,26.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(183.0,19.0,169.0,194.0,112.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(148.0,35.0,42.0,90.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,41.0,82.0,24.0,90.0,2.0,27.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,154.0,182.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,157.0,88.0,113.0,181.0,116.0,26.0)));
		collection.toArray(new Double[] {62.0,144.0,156.0,70.0,50.0,180.0,104.0,143.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(117.0,148.0,52.0,81.0,183.0,63.0,171.0)));
		bh.consume(collection.remove(73.0));
		bh.consume(collection.contains(178.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(44.0,185.0,149.0,177.0,27.0,68.0,42.0,52.0)));
		bh.consume(collection.remove(147.0));
		bh.consume(collection.remove(91.0));
		bh.consume(collection.add(15.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(76.0,60.0,38.0,91.0,19.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,181.0,15.0,83.0,194.0,41.0,182.0,111.0)));
		collection.toArray(new Double[] {130.0,181.0,90.0,125.0,125.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,59.0,124.0,199.0,166.0,104.0,93.0,3.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(80.0,139.0,80.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,15.0,44.0)));
		collection.toArray(new Double[] {73.0,114.0,19.0,194.0,198.0,30.0,94.0,182.0,53.0});
		bh.consume(collection.remove(106.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(13.0,142.0,117.0,181.0,119.0)));
		bh.consume(collection.contains(55.0));
		bh.consume(collection.remove(7.0));
		collection.toArray(new Double[] {33.0,42.0,117.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,69.0,64.0,150.0,174.0,65.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(173.0,107.0,16.0,151.0)));
		collection.toArray(new Double[] {175.0,100.0,17.0,13.0,97.0,36.0,16.0,169.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(196.0,142.0,86.0,151.0,148.0,154.0)));
		collection.toArray(new Double[] {144.0,127.0,158.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(49.0,181.0,116.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,84.0,124.0,61.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(96.0,168.0,72.0,63.0,161.0,73.0,146.0,34.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(157.0,152.0,37.0,130.0,54.0,21.0)));
		bh.consume(collection.contains(36.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(199.0,116.0,87.0)));
		collection.toArray(new Double[] {152.0,95.0,77.0,87.0,122.0,59.0,22.0,88.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,98.0,29.0,26.0,6.0,102.0,199.0,71.0,81.0)));
		collection.toArray(new Double[] {19.0,85.0,47.0,122.0,22.0,92.0,80.0});
		bh.consume(collection.contains(47.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(7.0,47.0,112.0,120.0,103.0,179.0,164.0,44.0)));
		bh.consume(collection.contains(141.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(98.0,133.0,87.0,50.0)));
		bh.consume(collection.remove(4.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(184.0,48.0,91.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(1.0,169.0,28.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(65.0,176.0,103.0,104.0,90.0,148.0,18.0,141.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(8.0,89.0,126.0,120.0,129.0,154.0)));
		bh.consume(collection.remove(87.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,36.0,129.0,157.0,84.0,29.0,186.0,25.0,127.0)));
		bh.consume(collection.contains(118.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(182.0,167.0,156.0,132.0,109.0,128.0,132.0,2.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,160.0,162.0,170.0,62.0,103.0,60.0,90.0,52.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,56.0,174.0,26.0,108.0,107.0,130.0,5.0)));
		bh.consume(collection.contains(7.0));
		bh.consume(collection.contains(17.0));
		bh.consume(collection.remove(95.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(21.0,197.0,4.0,150.0,180.0,50.0,178.0)));
		collection.toArray(new Double[] {32.0,119.0,6.0,102.0,132.0,100.0,136.0,33.0});
		bh.consume(collection.add(90.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,126.0,191.0,119.0,177.0,163.0,13.0)));
		bh.consume(collection.contains(196.0));
		bh.consume(collection.contains(122.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,69.0,195.0,53.0,165.0,14.0,56.0,85.0,128.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,11.0,177.0)));
		collection.toArray(new Double[] {64.0,47.0,50.0});
		bh.consume(collection.remove(157.0));
		bh.consume(collection.remove(194.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(122.0,3.0,16.0,38.0)));
		collection.toArray(new Double[] {199.0,191.0,176.0,25.0,152.0,163.0,186.0,27.0});
		bh.consume(collection.contains(161.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,190.0,92.0,94.0,165.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,45.0,55.0,91.0,20.0,136.0,5.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,70.0,78.0,1.0,22.0,42.0,146.0,46.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,144.0,174.0,24.0,190.0,166.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,138.0,65.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(174.0,185.0,44.0,196.0,175.0,191.0,93.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,114.0,21.0,67.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(84.0,118.0,109.0,99.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(111.0,55.0,185.0,199.0,100.0,174.0,198.0)));
		bh.consume(collection.remove(47.0));
		bh.consume(collection.add(21.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,128.0,115.0,117.0,174.0,48.0,96.0,58.0,134.0)));
		bh.consume(collection.contains(85.0));
		collection.toArray(new Double[] {157.0,37.0,182.0,106.0,30.0,50.0,31.0,18.0,178.0});
		bh.consume(collection.contains(115.0));
		bh.consume(collection.contains(165.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,112.0,35.0,15.0,169.0)));
		collection.toArray(new Double[] {29.0,188.0,155.0,143.0,132.0,14.0,124.0,31.0});
		bh.consume(collection.contains(114.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,158.0,128.0,113.0,183.0,113.0)));
		collection.toArray(new Double[] {84.0,8.0,28.0,39.0,34.0,27.0,51.0,178.0});
		collection.toArray(new Double[] {78.0,158.0,99.0,6.0,183.0});
		collection.toArray(new Double[] {83.0,121.0,56.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,114.0,8.0,114.0,71.0)));
		collection.toArray(new Double[] {147.0,191.0,196.0,142.0,101.0,171.0,68.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(31.0,45.0,173.0,108.0,38.0,120.0,97.0,32.0)));
		collection.toArray(new Double[] {138.0,118.0,94.0,145.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,125.0,152.0,41.0,182.0,174.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,112.0,9.0,114.0)));
		collection.toArray(new Double[] {128.0,82.0,76.0,73.0,133.0,142.0,51.0,108.0,160.0});
		collection.toArray(new Double[] {154.0,111.0,137.0,67.0});
		bh.consume(collection.remove(146.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(118.0,82.0,159.0)));
		collection.toArray(new Double[] {94.0,80.0,3.0,120.0,59.0});
		collection.toArray(new Double[] {35.0,98.0,27.0,8.0,178.0,161.0,162.0,2.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(19.0,167.0,91.0,86.0,100.0,48.0,137.0,172.0,63.0)));
		bh.consume(collection.add(119.0));
		bh.consume(collection.contains(1.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,90.0,113.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,168.0,7.0,188.0,113.0,22.0)));
		bh.consume(collection.contains(19.0));
		collection.toArray(new Double[] {177.0,140.0,145.0});
		collection.toArray(new Double[] {117.0,6.0,83.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(85.0,81.0,80.0,86.0,129.0,160.0,128.0,174.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(173.0,192.0,64.0,3.0,174.0)));
		collection.toArray(new Double[] {110.0,200.0,31.0,95.0,200.0,73.0,135.0,37.0});
		bh.consume(collection.contains(145.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,191.0,98.0,14.0,126.0,148.0,139.0,147.0,110.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,6.0,22.0,198.0,139.0,139.0,17.0,122.0,115.0)));
		bh.consume(collection.remove(69.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(159.0,109.0,187.0,73.0,132.0,67.0,70.0,16.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(183.0,103.0,130.0,158.0,132.0,137.0)));
		bh.consume(collection.contains(126.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(74.0,119.0,81.0,76.0,44.0,144.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,92.0,173.0,136.0,179.0)));
		bh.consume(collection.contains(127.0));
		bh.consume(collection.add(191.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(191.0,55.0,182.0,134.0,148.0,151.0)));
		bh.consume(collection.remove(36.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,24.0,113.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(180.0,47.0,120.0,50.0,111.0)));
		collection.toArray(new Double[] {62.0,40.0,68.0,186.0,64.0,87.0,129.0});
		collection.toArray(new Double[] {71.0,15.0,159.0,95.0,41.0,3.0,77.0});
		bh.consume(collection.contains(92.0));
		collection.toArray(new Double[] {179.0,103.0,55.0,187.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(97.0,89.0,21.0,172.0,34.0,100.0,137.0,44.0,159.0)));
		bh.consume(collection.remove(182.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(146.0,197.0,103.0,181.0,196.0,193.0,183.0,87.0,1.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,180.0,46.0,154.0,57.0,39.0,79.0,10.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,33.0,137.0,184.0,85.0,25.0,42.0,99.0,26.0)));
		collection.toArray(new Double[] {68.0,130.0,189.0,20.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(13.0,153.0,72.0,50.0,169.0)));
		bh.consume(collection.add(70.0));
		bh.consume(collection.add(153.0));
		bh.consume(collection.remove(49.0));
		collection.toArray(new Double[] {52.0,176.0,41.0,94.0,130.0,12.0,51.0,26.0,150.0});
		bh.consume(collection.remove(98.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(1.0,19.0,147.0,195.0,86.0,90.0,100.0,157.0,146.0)));
		bh.consume(collection.contains(16.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,46.0,196.0,99.0,80.0,138.0,24.0,105.0,13.0)));
		collection.toArray(new Double[] {193.0,151.0,127.0,162.0,136.0,169.0,1.0});
		collection.toArray(new Double[] {72.0,61.0,42.0,40.0,167.0,117.0,112.0,77.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(120.0,97.0,19.0,32.0,133.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,99.0,106.0,150.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(77.0,124.0,148.0,49.0,4.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(99.0,93.0,45.0,193.0,24.0,60.0,158.0,142.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(125.0,102.0,89.0,189.0,27.0,167.0,51.0,8.0,94.0)));
		bh.consume(collection.add(34.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,130.0,107.0,37.0,4.0,119.0,153.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(95.0,76.0,90.0,131.0,171.0,66.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(92.0,2.0,116.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(77.0,185.0,72.0,2.0,199.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,48.0,42.0,112.0,168.0,179.0,145.0,135.0)));
		bh.consume(collection.remove(142.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,110.0,185.0,123.0)));
		bh.consume(collection.remove(75.0));
		bh.consume(collection.contains(38.0));
		bh.consume(collection.contains(99.0));
		bh.consume(collection.contains(87.0));
		collection.toArray(new Double[] {163.0,88.0,107.0,78.0,173.0,37.0});
		bh.consume(collection.remove(109.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,21.0,142.0,169.0,168.0,26.0,130.0,36.0)));
		collection.toArray(new Double[] {28.0,108.0,12.0,95.0,101.0,197.0,75.0,17.0,181.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(180.0,21.0,144.0,70.0,135.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(105.0,27.0,149.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(133.0,129.0,56.0,118.0,105.0,58.0)));
		collection.toArray(new Double[] {1.0,199.0,109.0,132.0});
		bh.consume(collection.remove(122.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(174.0,81.0,177.0,80.0,26.0)));
		collection.toArray(new Double[] {141.0,176.0,199.0,154.0,37.0,27.0,192.0,121.0});
		bh.consume(collection.remove(168.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(14.0,9.0,163.0,199.0,46.0,110.0,169.0,37.0,152.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,24.0,123.0,42.0,200.0,178.0,70.0,2.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(148.0,172.0,56.0,100.0,27.0,68.0,138.0,155.0,115.0)));
		collection.toArray(new Double[] {96.0,119.0,46.0,11.0,109.0});
		bh.consume(collection.contains(1.0));
		bh.consume(collection.remove(150.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(10.0,34.0,49.0,42.0,26.0,138.0,94.0,194.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(41.0,81.0,188.0,43.0,199.0,136.0,143.0,16.0,139.0)));
		bh.consume(collection.contains(85.0));
		collection.toArray(new Double[] {99.0,105.0,99.0,47.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(97.0,7.0,57.0,125.0,196.0,195.0,4.0,190.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,99.0,121.0,159.0,168.0,84.0)));
		collection.toArray(new Double[] {165.0,58.0,1.0,127.0,58.0,161.0,188.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(107.0,24.0,145.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(169.0,117.0,170.0,63.0)));
		bh.consume(collection.contains(15.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(78.0,162.0,77.0,51.0,182.0,3.0,7.0,36.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(95.0,81.0,97.0,99.0,128.0,93.0,167.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(120.0,64.0,123.0,115.0,1.0,84.0,134.0)));
		collection.toArray(new Double[] {109.0,95.0,26.0,161.0,55.0,86.0,129.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,53.0,17.0,28.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,39.0,129.0,190.0,151.0,75.0,186.0,64.0,108.0)));
		collection.toArray(new Double[] {76.0,52.0,26.0,160.0,41.0,95.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(99.0,97.0,76.0)));
		bh.consume(collection.contains(80.0));
		bh.consume(collection.contains(200.0));
		collection.toArray(new Double[] {169.0,199.0,119.0,79.0,160.0,16.0,118.0,59.0,99.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,152.0,13.0)));
		bh.consume(collection.contains(177.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(106.0,126.0,193.0)));
		bh.consume(collection.remove(188.0));
		collection.toArray(new Double[] {132.0,3.0,48.0,15.0,41.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(74.0,172.0,158.0,189.0,100.0,111.0,88.0)));
		collection.toArray(new Double[] {187.0,97.0,7.0,149.0,192.0,53.0,62.0});
		collection.toArray(new Double[] {48.0,50.0,197.0,145.0,9.0,4.0,163.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(160.0,152.0,103.0,116.0,67.0,5.0,135.0,199.0,168.0)));
		bh.consume(collection.add(84.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(200.0,169.0,107.0)));
		bh.consume(collection.remove(91.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,42.0,72.0)));
		collection.toArray(new Double[] {79.0,115.0,29.0,117.0,166.0,122.0,184.0,135.0});
		collection.toArray(new Double[] {93.0,61.0,177.0,200.0,117.0,42.0,108.0,175.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(125.0,14.0,195.0,184.0,133.0,72.0,48.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,1.0,134.0,194.0,13.0,139.0,127.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,163.0,162.0,138.0,144.0,23.0,17.0,78.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(106.0,117.0,95.0,87.0,19.0,43.0)));
		bh.consume(collection.contains(64.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(191.0,15.0,136.0,14.0,104.0,72.0,124.0,183.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(198.0,137.0,30.0,4.0,194.0,74.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,159.0,58.0,186.0,13.0,10.0)));
		collection.toArray(new Double[] {127.0,3.0,139.0,158.0,33.0,123.0,104.0,154.0});
		collection.toArray(new Double[] {49.0,140.0,174.0,83.0});
		bh.consume(collection.add(117.0));
		collection.toArray(new Double[] {166.0,106.0,82.0,87.0,81.0,93.0,9.0,29.0,157.0});
		collection.toArray(new Double[] {67.0,195.0,185.0});
		bh.consume(collection.contains(152.0));
		bh.consume(collection.contains(130.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,183.0,63.0,109.0,90.0,79.0)));
		bh.consume(collection.remove(142.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(197.0,154.0,181.0,72.0,62.0,69.0,87.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,115.0,23.0,137.0,187.0,151.0)));
		bh.consume(collection.contains(30.0));
		collection.toArray(new Double[] {30.0,79.0,21.0,163.0,39.0,14.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,63.0,4.0)));
		bh.consume(collection.contains(159.0));
		bh.consume(collection.contains(77.0));
		bh.consume(collection.contains(161.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(160.0,198.0,40.0,9.0)));
		bh.consume(collection.remove(196.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,152.0,171.0,146.0,190.0,98.0,40.0,97.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,144.0,57.0,187.0,160.0,130.0,149.0)));
		bh.consume(collection.add(192.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(189.0,179.0,39.0,142.0,179.0,44.0,127.0,193.0,190.0)));
		collection.toArray(new Double[] {16.0,64.0,61.0,49.0,8.0});
		bh.consume(collection.add(121.0));
		bh.consume(collection.add(152.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(43.0,39.0,160.0,24.0,37.0,112.0,118.0,198.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,42.0,32.0,68.0,134.0,15.0,123.0,82.0,79.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,74.0,117.0,143.0)));
		bh.consume(collection.add(124.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,188.0,188.0,40.0,170.0)));
		bh.consume(collection.contains(113.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(173.0,91.0,157.0,77.0,145.0,105.0,177.0,172.0)));
		bh.consume(collection.add(26.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(40.0,51.0,29.0,175.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,171.0,40.0,84.0,17.0)));
		bh.consume(collection.add(166.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(47.0,126.0,32.0,64.0,100.0,146.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(188.0,104.0,67.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(182.0,14.0,64.0,48.0,195.0,26.0,100.0,77.0,70.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,78.0,185.0,24.0,127.0,172.0,4.0,53.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(192.0,117.0,87.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,7.0,54.0,172.0,91.0)));
		bh.consume(collection.contains(178.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(191.0,158.0,94.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,1.0,149.0)));
		bh.consume(collection.contains(37.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,5.0,92.0,38.0)));
		collection.toArray(new Double[] {94.0,3.0,131.0,32.0,184.0,63.0,120.0,69.0});
		collection.toArray(new Double[] {130.0,156.0,149.0,185.0,30.0,98.0,137.0});
		bh.consume(collection.remove(30.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,83.0,99.0,52.0,46.0,134.0,39.0)));
		bh.consume(collection.contains(108.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,74.0,83.0,175.0)));
		bh.consume(collection.remove(109.0));
		bh.consume(collection.remove(126.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,27.0,96.0,136.0)));
		collection.toArray(new Double[] {106.0,32.0,107.0,124.0,109.0,174.0,22.0,44.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,148.0,122.0,198.0,9.0,156.0,66.0)));
		collection.toArray(new Double[] {194.0,35.0,161.0,169.0,113.0,5.0,31.0,111.0,86.0});
		collection.toArray(new Double[] {175.0,134.0,76.0,36.0,170.0,114.0,187.0,38.0});
		collection.toArray(new Double[] {32.0,176.0,145.0,95.0,154.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,28.0,150.0,64.0,113.0,83.0,12.0,149.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(164.0,146.0,75.0,177.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,97.0,125.0,47.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(156.0,1.0,127.0,187.0,130.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,1.0,134.0,12.0,124.0,138.0,75.0,42.0,195.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,54.0,111.0,114.0,75.0,67.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,89.0,158.0,58.0,39.0)));
		bh.consume(collection.contains(151.0));
		collection.toArray(new Double[] {52.0,78.0,185.0,64.0,154.0,64.0,146.0,24.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,163.0,96.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,195.0,51.0,167.0,38.0,26.0,85.0,52.0,154.0)));
		bh.consume(collection.add(22.0));
		collection.toArray(new Double[] {70.0,135.0,151.0,51.0,79.0,46.0,148.0});
		bh.consume(collection.contains(158.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(170.0,62.0,98.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(160.0,28.0,39.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(122.0,66.0,173.0,111.0)));
		collection.toArray(new Double[] {58.0,86.0,61.0});
		collection.toArray(new Double[] {118.0,57.0,58.0,106.0,119.0,191.0,111.0,177.0,58.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,56.0,16.0,145.0,94.0,124.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,191.0,127.0,54.0,71.0,67.0,104.0)));
		bh.consume(collection.add(200.0));
		bh.consume(collection.remove(158.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(127.0,165.0,54.0,50.0,87.0,129.0,52.0,129.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,191.0,173.0,61.0,134.0,43.0,165.0)));
		collection.toArray(new Double[] {155.0,52.0,11.0,47.0,147.0,23.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(186.0,172.0,30.0,200.0,194.0,13.0,12.0,126.0,127.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,73.0,171.0,156.0,198.0,50.0,13.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,134.0,123.0,80.0,122.0,147.0,34.0,9.0,15.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,66.0,4.0,88.0,105.0)));
		collection.toArray(new Double[] {152.0,119.0,126.0,135.0,160.0,74.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(175.0,77.0,15.0,180.0,136.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,109.0,11.0,176.0,141.0,21.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,80.0,57.0,174.0,26.0,131.0,113.0,147.0,193.0)));
		bh.consume(collection.remove(181.0));
		bh.consume(collection.contains(99.0));
		collection.toArray(new Double[] {121.0,133.0,170.0,17.0,40.0,41.0,171.0,146.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,83.0,18.0,43.0,18.0,67.0,20.0,142.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(193.0,37.0,67.0,143.0,186.0,44.0,116.0,131.0,33.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,64.0,191.0)));
		collection.toArray(new Double[] {99.0,126.0,17.0,92.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(149.0,153.0,2.0,48.0,22.0)));
		bh.consume(collection.contains(5.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,178.0,30.0)));
		bh.consume(collection.add(42.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(18.0,27.0,177.0,170.0,24.0,122.0,145.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,199.0,179.0,122.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,103.0,153.0,168.0,167.0,190.0,194.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,111.0,129.0,151.0)));
		collection.toArray(new Double[] {170.0,199.0,20.0,137.0,93.0,43.0});
		bh.consume(collection.remove(61.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(106.0,125.0,18.0,142.0,185.0,89.0,184.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(142.0,55.0,35.0,8.0,171.0,24.0,135.0)));
		bh.consume(collection.contains(74.0));
		bh.consume(collection.remove(7.0));
		bh.consume(collection.remove(197.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,138.0,49.0,19.0,48.0,49.0,30.0,81.0,120.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(62.0,104.0,77.0)));
		bh.consume(collection.add(57.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(127.0,18.0,56.0,170.0,159.0)));
		collection.toArray(new Double[] {125.0,53.0,32.0,41.0});
		bh.consume(collection.remove(151.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,165.0,94.0,3.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(6.0,77.0,6.0,125.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(133.0,150.0,68.0,32.0,78.0,139.0,31.0,159.0,174.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,42.0,72.0,19.0)));
		bh.consume(collection.remove(189.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(147.0,124.0,18.0,43.0,177.0,166.0)));
		collection.toArray(new Double[] {175.0,81.0,148.0,171.0,132.0,50.0,188.0,82.0});
		collection.toArray(new Double[] {188.0,50.0,48.0,134.0});
		bh.consume(collection.remove(154.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(85.0,156.0,12.0,97.0)));
		collection.toArray(new Double[] {137.0,179.0,99.0,27.0,180.0,45.0,2.0,34.0,89.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(107.0,123.0,194.0)));
		bh.consume(collection.remove(139.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,146.0,4.0,68.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(4.0,158.0,45.0,65.0,189.0,55.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(34.0,123.0,105.0)));
		collection.toArray(new Double[] {2.0,193.0,8.0,142.0,77.0,80.0,59.0,82.0,171.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,174.0,82.0,78.0,14.0)));
		bh.consume(collection.add(135.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(194.0,138.0,164.0,35.0,143.0,119.0,3.0,122.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(120.0,176.0,86.0,48.0,148.0,176.0,89.0,144.0,126.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,133.0,63.0,187.0,79.0,134.0,109.0)));
		collection.toArray(new Double[] {61.0,102.0,74.0,34.0});
		collection.toArray(new Double[] {137.0,106.0,109.0,148.0});
		collection.toArray(new Double[] {49.0,134.0,81.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,68.0,78.0,193.0,99.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,113.0,76.0,170.0,122.0,130.0)));
		collection.toArray(new Double[] {149.0,75.0,127.0,29.0,14.0});
		collection.toArray(new Double[] {155.0,28.0,158.0});
		collection.toArray(new Double[] {23.0,12.0,180.0,172.0,74.0,114.0,101.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(174.0,45.0,160.0,81.0,137.0,163.0,19.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,171.0,31.0,143.0,177.0,188.0,71.0)));
		bh.consume(collection.contains(61.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(194.0,18.0,196.0,101.0,62.0,50.0,57.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,18.0,124.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(96.0,150.0,132.0,93.0,89.0,26.0)));
		bh.consume(collection.contains(8.0));
		collection.toArray(new Double[] {64.0,21.0,188.0});
		bh.consume(collection.remove(8.0));
		collection.toArray(new Double[] {39.0,69.0,5.0,37.0,13.0});
		bh.consume(collection.remove(31.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(141.0,77.0,135.0)));
		bh.consume(collection.contains(92.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(103.0,98.0,200.0,191.0,38.0,99.0,28.0)));
		bh.consume(collection.contains(154.0));
		collection.toArray(new Double[] {180.0,174.0,184.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(116.0,152.0,14.0,107.0,147.0,125.0,176.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(95.0,95.0,27.0,12.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(118.0,173.0,48.0,41.0,74.0,95.0,97.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(98.0,49.0,18.0,109.0,91.0,29.0,36.0,126.0)));
	}
}
