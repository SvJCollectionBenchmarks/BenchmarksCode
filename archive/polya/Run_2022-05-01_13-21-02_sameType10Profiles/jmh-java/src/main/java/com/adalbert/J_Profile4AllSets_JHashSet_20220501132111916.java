package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile4AllSets_JHashSet_20220501132111916 {
	java.util.HashSet<Double> collection = new java.util.HashSet<>();
	@Setup(Level.Invocation)
	public void setupJHashSet() {
		collection = new java.util.HashSet<>();
		collection.add(149.0);
		collection.add(155.0);
		collection.add(74.0);
		collection.add(77.0);
		collection.add(17.0);
		collection.add(173.0);
		collection.add(175.0);
		collection.add(55.0);
		collection.add(105.0);
		collection.add(92.0);
		collection.add(26.0);
		collection.add(30.0);
		collection.add(42.0);
		collection.add(47.0);
		collection.add(63.0);
		collection.add(84.0);
		collection.add(128.0);
		collection.add(83.0);
		collection.add(70.0);
		collection.add(151.0);
		collection.add(115.0);
		collection.add(5.0);
		collection.add(169.0);
		collection.add(109.0);
		collection.add(7.0);
		collection.add(192.0);
		collection.add(50.0);
		collection.add(55.0);
		collection.add(132.0);
		collection.add(179.0);
		collection.add(129.0);
		collection.add(104.0);
		collection.add(105.0);
		collection.add(68.0);
		collection.add(109.0);
		collection.add(8.0);
		collection.add(176.0);
		collection.add(99.0);
		collection.add(52.0);
		collection.add(176.0);
		collection.add(96.0);
		collection.add(12.0);
		collection.add(5.0);
		collection.add(188.0);
		collection.add(158.0);
		collection.add(133.0);
		collection.add(3.0);
		collection.add(181.0);
		collection.add(77.0);
		collection.add(162.0);
		collection.add(26.0);
		collection.add(137.0);
		collection.add(120.0);
		collection.add(176.0);
		collection.add(21.0);
		collection.add(147.0);
		collection.add(104.0);
		collection.add(164.0);
		collection.add(94.0);
		collection.add(154.0);
		collection.add(114.0);
		collection.add(4.0);
		collection.add(103.0);
		collection.add(139.0);
		collection.add(133.0);
		collection.add(181.0);
		collection.add(4.0);
		collection.add(56.0);
		collection.add(87.0);
		collection.add(83.0);
		collection.add(158.0);
		collection.add(13.0);
		collection.add(139.0);
		collection.add(29.0);
		collection.add(183.0);
		collection.add(79.0);
		collection.add(3.0);
		collection.add(18.0);
		collection.add(13.0);
		collection.add(193.0);
		collection.add(94.0);
		collection.add(29.0);
		collection.add(107.0);
		collection.add(120.0);
		collection.add(87.0);
		collection.add(139.0);
		collection.add(151.0);
		collection.add(120.0);
		collection.add(140.0);
		collection.add(187.0);
		collection.add(140.0);
		collection.add(122.0);
		collection.add(167.0);
		collection.add(43.0);
		collection.add(188.0);
		collection.add(31.0);
		collection.add(69.0);
		collection.add(27.0);
		collection.add(199.0);
		collection.add(52.0);
		collection.add(14.0);
		collection.add(76.0);
		collection.add(136.0);
		collection.add(15.0);
		collection.add(16.0);
		collection.add(30.0);
		collection.add(80.0);
		collection.add(174.0);
		collection.add(1.0);
		collection.add(31.0);
		collection.add(88.0);
		collection.add(199.0);
		collection.add(59.0);
		collection.add(41.0);
		collection.add(43.0);
		collection.add(22.0);
		collection.add(196.0);
		collection.add(146.0);
		collection.add(77.0);
		collection.add(94.0);
		collection.add(198.0);
		collection.add(56.0);
		collection.add(147.0);
		collection.add(149.0);
		collection.add(32.0);
		collection.add(88.0);
		collection.add(18.0);
		collection.add(88.0);
		collection.add(120.0);
		collection.add(23.0);
		collection.add(35.0);
		collection.add(12.0);
		collection.add(11.0);
		collection.add(135.0);
		collection.add(58.0);
		collection.add(122.0);
		collection.add(174.0);
		collection.add(59.0);
		collection.add(89.0);
		collection.add(54.0);
		collection.add(170.0);
		collection.add(179.0);
		collection.add(195.0);
		collection.add(102.0);
		collection.add(183.0);
		collection.add(152.0);
		collection.add(65.0);
		collection.add(140.0);
		collection.add(184.0);
		collection.add(101.0);
		collection.add(20.0);
		collection.add(172.0);
		collection.add(138.0);
		collection.add(53.0);
		collection.add(125.0);
		collection.add(200.0);
		collection.add(178.0);
		collection.add(70.0);
		collection.add(73.0);
		collection.add(14.0);
		collection.add(43.0);
		collection.add(42.0);
		collection.add(136.0);
		collection.add(187.0);
		collection.add(89.0);
		collection.add(31.0);
		collection.add(120.0);
		collection.add(67.0);
		collection.add(140.0);
		collection.add(158.0);
		collection.add(168.0);
		collection.add(21.0);
		collection.add(133.0);
		collection.add(182.0);
		collection.add(112.0);
		collection.add(25.0);
		collection.add(71.0);
		collection.add(101.0);
		collection.add(123.0);
		collection.add(120.0);
		collection.add(100.0);
		collection.add(175.0);
		collection.add(177.0);
		collection.add(165.0);
		collection.add(197.0);
		collection.add(113.0);
		collection.add(54.0);
		collection.add(65.0);
		collection.add(82.0);
		collection.add(20.0);
		collection.add(195.0);
		collection.add(109.0);
		collection.add(163.0);
		collection.add(68.0);
		collection.add(74.0);
		collection.add(161.0);
		collection.add(192.0);
		collection.add(52.0);
		collection.add(79.0);
		collection.add(22.0);
		collection.add(4.0);
		collection.add(110.0);
		collection.add(1.0);
		collection.add(54.0);
		collection.add(114.0);
		collection.add(24.0);
		collection.add(142.0);
		collection.add(180.0);
		collection.add(37.0);
		collection.add(111.0);
		collection.add(192.0);
		collection.add(159.0);
		collection.add(24.0);
		collection.add(162.0);
		collection.add(197.0);
		collection.add(113.0);
		collection.add(180.0);
		collection.add(37.0);
		collection.add(144.0);
		collection.add(109.0);
		collection.add(18.0);
		collection.add(94.0);
		collection.add(55.0);
		collection.add(173.0);
		collection.add(90.0);
		collection.add(163.0);
		collection.add(7.0);
		collection.add(147.0);
		collection.add(10.0);
		collection.add(41.0);
		collection.add(76.0);
		collection.add(176.0);
		collection.add(4.0);
		collection.add(98.0);
		collection.add(24.0);
		collection.add(164.0);
		collection.add(73.0);
		collection.add(67.0);
		collection.add(119.0);
		collection.add(51.0);
		collection.add(142.0);
		collection.add(141.0);
		collection.add(31.0);
		collection.add(56.0);
		collection.add(13.0);
		collection.add(169.0);
		collection.add(91.0);
		collection.add(195.0);
		collection.add(69.0);
		collection.add(31.0);
		collection.add(144.0);
		collection.add(197.0);
		collection.add(64.0);
		collection.add(171.0);
		collection.add(8.0);
		collection.add(54.0);
		collection.add(148.0);
		collection.add(189.0);
		collection.add(91.0);
		collection.add(160.0);
		collection.add(82.0);
		collection.add(154.0);
		collection.add(41.0);
		collection.add(16.0);
		collection.add(37.0);
		collection.add(87.0);
		collection.add(6.0);
		collection.add(179.0);
		collection.add(32.0);
		collection.add(52.0);
		collection.add(191.0);
		collection.add(178.0);
		collection.add(66.0);
		collection.add(148.0);
		collection.add(96.0);
		collection.add(154.0);
		collection.add(90.0);
		collection.add(128.0);
		collection.add(167.0);
		collection.add(98.0);
		collection.add(178.0);
		collection.add(161.0);
		collection.add(142.0);
		collection.add(133.0);
		collection.add(139.0);
		collection.add(26.0);
		collection.add(169.0);
		collection.add(108.0);
		collection.add(111.0);
		collection.add(186.0);
		collection.add(20.0);
		collection.add(131.0);
		collection.add(98.0);
		collection.add(67.0);
		collection.add(191.0);
		collection.add(116.0);
		collection.add(68.0);
		collection.add(157.0);
		collection.add(17.0);
		collection.add(198.0);
		collection.add(96.0);
		collection.add(66.0);
		collection.add(120.0);
		collection.add(54.0);
		collection.add(41.0);
		collection.add(48.0);
		collection.add(137.0);
		collection.add(117.0);
		collection.add(197.0);
		collection.add(101.0);
		collection.add(91.0);
		collection.add(26.0);
		collection.add(118.0);
		collection.add(155.0);
		collection.add(165.0);
		collection.add(173.0);
		collection.add(86.0);
		collection.add(62.0);
		collection.add(37.0);
		collection.add(151.0);
		collection.add(65.0);
		collection.add(83.0);
		collection.add(98.0);
		collection.add(92.0);
		collection.add(60.0);
		collection.add(88.0);
		collection.add(42.0);
		collection.add(82.0);
		collection.add(87.0);
		collection.add(67.0);
		collection.add(146.0);
		collection.add(141.0);
		collection.add(100.0);
		collection.add(138.0);
		collection.add(194.0);
		collection.add(129.0);
		collection.add(114.0);
		collection.add(125.0);
		collection.add(130.0);
		collection.add(140.0);
		collection.add(139.0);
		collection.add(175.0);
		collection.add(108.0);
		collection.add(77.0);
		collection.add(68.0);
		collection.add(15.0);
		collection.add(34.0);
		collection.add(47.0);
		collection.add(135.0);
		collection.add(105.0);
		collection.add(1.0);
		collection.add(75.0);
		collection.add(183.0);
		collection.add(60.0);
		collection.add(71.0);
		collection.add(179.0);
		collection.add(90.0);
		collection.add(38.0);
		collection.add(70.0);
		collection.add(41.0);
		collection.add(132.0);
		collection.add(129.0);
		collection.add(90.0);
		collection.add(49.0);
		collection.add(189.0);
		collection.add(43.0);
		collection.add(174.0);
		collection.add(110.0);
		collection.add(52.0);
		collection.add(190.0);
		collection.add(149.0);
		collection.add(27.0);
		collection.add(186.0);
		collection.add(98.0);
		collection.add(133.0);
		collection.add(163.0);
		collection.add(3.0);
		collection.add(129.0);
		collection.add(145.0);
		collection.add(119.0);
		collection.add(57.0);
		collection.add(22.0);
		collection.add(189.0);
		collection.add(95.0);
		collection.add(32.0);
		collection.add(197.0);
		collection.add(103.0);
		collection.add(16.0);
		collection.add(163.0);
		collection.add(120.0);
		collection.add(22.0);
		collection.add(16.0);
		collection.add(149.0);
		collection.add(111.0);
		collection.add(94.0);
		collection.add(17.0);
		collection.add(148.0);
		collection.add(91.0);
		collection.add(175.0);
		collection.add(48.0);
		collection.add(194.0);
		collection.add(54.0);
		collection.add(17.0);
		collection.add(198.0);
		collection.add(13.0);
		collection.add(9.0);
		collection.add(13.0);
		collection.add(195.0);
		collection.add(91.0);
		collection.add(79.0);
		collection.add(11.0);
		collection.add(72.0);
		collection.add(36.0);
		collection.add(138.0);
		collection.add(40.0);
		collection.add(193.0);
		collection.add(166.0);
		collection.add(145.0);
		collection.add(149.0);
		collection.add(29.0);
		collection.add(102.0);
		collection.add(10.0);
		collection.add(168.0);
		collection.add(53.0);
		collection.add(180.0);
		collection.add(32.0);
		collection.add(168.0);
		collection.add(156.0);
		collection.add(122.0);
		collection.add(98.0);
		collection.add(64.0);
		collection.add(146.0);
		collection.add(130.0);
		collection.add(72.0);
		collection.add(11.0);
		collection.add(96.0);
		collection.add(140.0);
		collection.add(173.0);
		collection.add(5.0);
		collection.add(110.0);
		collection.add(73.0);
		collection.add(102.0);
		collection.add(106.0);
		collection.add(18.0);
		collection.add(3.0);
		collection.add(169.0);
		collection.add(68.0);
		collection.add(191.0);
		collection.add(147.0);
		collection.add(159.0);
		collection.add(155.0);
		collection.add(69.0);
		collection.add(160.0);
		collection.add(16.0);
		collection.add(84.0);
		collection.add(180.0);
		collection.add(167.0);
		collection.add(19.0);
		collection.add(142.0);
		collection.add(17.0);
		collection.add(154.0);
		collection.add(173.0);
		collection.add(175.0);
		collection.add(138.0);
		collection.add(92.0);
		collection.add(5.0);
		collection.add(27.0);
		collection.add(63.0);
		collection.add(131.0);
		collection.add(15.0);
		collection.add(103.0);
		collection.add(107.0);
		collection.add(17.0);
		collection.add(200.0);
		collection.add(162.0);
		collection.add(61.0);
		collection.add(29.0);
		collection.add(146.0);
		collection.add(92.0);
		collection.add(181.0);
		collection.add(64.0);
		collection.add(133.0);
		collection.add(12.0);
		collection.add(94.0);
		collection.add(189.0);
		collection.add(46.0);
		collection.add(65.0);
		collection.add(94.0);
		collection.add(93.0);
		collection.add(200.0);
		collection.add(195.0);
		collection.add(10.0);
		collection.add(182.0);
		collection.add(44.0);
		collection.add(107.0);
		collection.add(6.0);
		collection.add(82.0);
		collection.add(53.0);
		collection.add(113.0);
		collection.add(6.0);
		collection.add(95.0);
		collection.add(121.0);
		collection.add(15.0);
		collection.add(40.0);
		collection.add(145.0);
		collection.add(151.0);
		collection.add(31.0);
		collection.add(194.0);
		collection.add(16.0);
		collection.add(184.0);
		collection.add(189.0);
		collection.add(24.0);
		collection.add(76.0);
		collection.add(74.0);
		collection.add(166.0);
		collection.add(51.0);
		collection.add(11.0);
		collection.add(151.0);
		collection.add(16.0);
		collection.add(74.0);
		collection.add(27.0);
		collection.add(163.0);
		collection.add(122.0);
		collection.add(110.0);
		collection.add(101.0);
		collection.add(146.0);
		collection.add(146.0);
		collection.add(39.0);
		collection.add(150.0);
		collection.add(141.0);
		collection.add(52.0);
		collection.add(96.0);
		collection.add(42.0);
		collection.add(160.0);
		collection.add(120.0);
		collection.add(23.0);
		collection.add(172.0);
		collection.add(25.0);
		collection.add(139.0);
		collection.add(192.0);
		collection.add(165.0);
		collection.add(3.0);
		collection.add(120.0);
		collection.add(10.0);
		collection.add(82.0);
		collection.add(85.0);
		collection.add(178.0);
		collection.add(84.0);
		collection.add(153.0);
		collection.add(116.0);
		collection.add(25.0);
		collection.add(47.0);
		collection.add(197.0);
		collection.add(70.0);
		collection.add(124.0);
		collection.add(185.0);
		collection.add(45.0);
		collection.add(50.0);
		collection.add(154.0);
		collection.add(180.0);
		collection.add(120.0);
		collection.add(15.0);
		collection.add(60.0);
		collection.add(68.0);
		collection.add(71.0);
		collection.add(85.0);
		collection.add(111.0);
		collection.add(20.0);
		collection.add(121.0);
		collection.add(85.0);
		collection.add(53.0);
		collection.add(29.0);
		collection.add(28.0);
		collection.add(146.0);
		collection.add(171.0);
		collection.add(133.0);
		collection.add(38.0);
		collection.add(48.0);
		collection.add(64.0);
		collection.add(48.0);
		collection.add(95.0);
		collection.add(157.0);
		collection.add(174.0);
		collection.add(125.0);
		collection.add(115.0);
		collection.add(198.0);
		collection.add(8.0);
		collection.add(105.0);
		collection.add(143.0);
		collection.add(162.0);
		collection.add(11.0);
		collection.add(25.0);
		collection.add(186.0);
		collection.add(103.0);
		collection.add(148.0);
		collection.add(4.0);
		collection.add(119.0);
		collection.add(102.0);
		collection.add(184.0);
		collection.add(8.0);
		collection.add(8.0);
		collection.add(114.0);
		collection.add(10.0);
		collection.add(51.0);
		collection.add(54.0);
		collection.add(194.0);
		collection.add(141.0);
		collection.add(95.0);
		collection.add(155.0);
		collection.add(166.0);
		collection.add(150.0);
		collection.add(37.0);
		collection.add(76.0);
		collection.add(93.0);
		collection.add(78.0);
		collection.add(33.0);
		collection.add(181.0);
		collection.add(92.0);
		collection.add(158.0);
		collection.add(163.0);
		collection.add(168.0);
		collection.add(47.0);
		collection.add(153.0);
		collection.add(56.0);
		collection.add(162.0);
		collection.add(27.0);
		collection.add(20.0);
		collection.add(122.0);
		collection.add(35.0);
		collection.add(169.0);
		collection.add(53.0);
		collection.add(169.0);
		collection.add(70.0);
		collection.add(22.0);
		collection.add(94.0);
		collection.add(114.0);
		collection.add(129.0);
		collection.add(82.0);
		collection.add(19.0);
		collection.add(169.0);
		collection.add(13.0);
		collection.add(116.0);
		collection.add(19.0);
		collection.add(78.0);
		collection.add(147.0);
		collection.add(199.0);
		collection.add(115.0);
		collection.add(162.0);
		collection.add(21.0);
		collection.add(91.0);
		collection.add(56.0);
		collection.add(185.0);
		collection.add(124.0);
		collection.add(186.0);
		collection.add(69.0);
		collection.add(28.0);
		collection.add(131.0);
		collection.add(45.0);
		collection.add(41.0);
		collection.add(7.0);
		collection.add(61.0);
		collection.add(107.0);
		collection.add(174.0);
		collection.add(58.0);
		collection.add(156.0);
		collection.add(144.0);
		collection.add(107.0);
		collection.add(172.0);
		collection.add(46.0);
		collection.add(167.0);
		collection.add(113.0);
		collection.add(12.0);
		collection.add(165.0);
		collection.add(184.0);
		collection.add(39.0);
		collection.add(95.0);
		collection.add(21.0);
		collection.add(110.0);
		collection.add(78.0);
		collection.add(103.0);
		collection.add(162.0);
		collection.add(146.0);
		collection.add(173.0);
		collection.add(97.0);
		collection.add(185.0);
		collection.add(92.0);
		collection.add(100.0);
		collection.add(64.0);
		collection.add(186.0);
		collection.add(177.0);
		collection.add(169.0);
		collection.add(185.0);
		collection.add(145.0);
		collection.add(9.0);
		collection.add(1.0);
		collection.add(74.0);
		collection.add(39.0);
		collection.add(79.0);
		collection.add(102.0);
		collection.add(27.0);
		collection.add(42.0);
		collection.add(97.0);
		collection.add(18.0);
		collection.add(80.0);
		collection.add(115.0);
		collection.add(181.0);
		collection.add(82.0);
		collection.add(56.0);
		collection.add(82.0);
		collection.add(190.0);
		collection.add(116.0);
		collection.add(67.0);
		collection.add(120.0);
		collection.add(55.0);
		collection.add(38.0);
		collection.add(106.0);
		collection.add(166.0);
		collection.add(35.0);
		collection.add(23.0);
		collection.add(30.0);
		collection.add(141.0);
		collection.add(57.0);
		collection.add(17.0);
		collection.add(16.0);
		collection.add(78.0);
		collection.add(136.0);
		collection.add(167.0);
		collection.add(178.0);
		collection.add(188.0);
		collection.add(1.0);
		collection.add(70.0);
		collection.add(117.0);
		collection.add(53.0);
		collection.add(15.0);
		collection.add(141.0);
		collection.add(191.0);
		collection.add(141.0);
		collection.add(148.0);
		collection.add(11.0);
		collection.add(24.0);
		collection.add(60.0);
		collection.add(67.0);
		collection.add(197.0);
		collection.add(34.0);
		collection.add(2.0);
		collection.add(164.0);
		collection.add(156.0);
		collection.add(31.0);
		collection.add(158.0);
		collection.add(64.0);
		collection.add(104.0);
		collection.add(88.0);
		collection.add(47.0);
		collection.add(126.0);
		collection.add(97.0);
		collection.add(9.0);
		collection.add(75.0);
		collection.add(156.0);
		collection.add(10.0);
		collection.add(34.0);
		collection.add(35.0);
		collection.add(50.0);
		collection.add(2.0);
		collection.add(172.0);
		collection.add(10.0);
		collection.add(30.0);
		collection.add(115.0);
		collection.add(26.0);
		collection.add(76.0);
		collection.add(54.0);
		collection.add(47.0);
		collection.add(149.0);
		collection.add(26.0);
		collection.add(176.0);
		collection.add(160.0);
		collection.add(139.0);
		collection.add(191.0);
		collection.add(174.0);
		collection.add(101.0);
		collection.add(20.0);
		collection.add(37.0);
		collection.add(157.0);
		collection.add(28.0);
		collection.add(120.0);
		collection.add(76.0);
		collection.add(130.0);
		collection.add(186.0);
		collection.add(57.0);
		collection.add(100.0);
		collection.add(84.0);
		collection.add(26.0);
		collection.add(72.0);
		collection.add(170.0);
		collection.add(58.0);
		collection.add(145.0);
		collection.add(176.0);
		collection.add(19.0);
		collection.add(27.0);
		collection.add(45.0);
		collection.add(112.0);
		collection.add(61.0);
		collection.add(188.0);
		collection.add(83.0);
		collection.add(154.0);
		collection.add(198.0);
		collection.add(1.0);
		collection.add(78.0);
		collection.add(98.0);
		collection.add(29.0);
		collection.add(123.0);
		collection.add(95.0);
		collection.add(30.0);
		collection.add(143.0);
		collection.add(29.0);
		collection.add(119.0);
		collection.add(155.0);
		collection.add(28.0);
		collection.add(161.0);
		collection.add(29.0);
		collection.add(26.0);
		collection.add(149.0);
		collection.add(26.0);
		collection.add(9.0);
		collection.add(12.0);
		collection.add(87.0);
		collection.add(175.0);
		collection.add(147.0);
		collection.add(191.0);
		collection.add(3.0);
		collection.add(28.0);
		collection.add(168.0);
		collection.add(52.0);
		collection.add(152.0);
		collection.add(86.0);
		collection.add(123.0);
		collection.add(2.0);
		collection.add(173.0);
		collection.add(93.0);
		collection.add(174.0);
		collection.add(196.0);
		collection.add(199.0);
		collection.add(95.0);
		collection.add(60.0);
		collection.add(94.0);
		collection.add(42.0);
		collection.add(184.0);
		collection.add(24.0);
		collection.add(175.0);
		collection.add(184.0);
		collection.add(56.0);
		collection.add(26.0);
		collection.add(181.0);
		collection.add(190.0);
		collection.add(122.0);
		collection.add(150.0);
		collection.add(195.0);
		collection.add(112.0);
		collection.add(69.0);
		collection.add(81.0);
		collection.add(145.0);
		collection.add(1.0);
		collection.add(25.0);
		collection.add(180.0);
		collection.add(65.0);
		collection.add(157.0);
		collection.add(70.0);
		collection.add(194.0);
		collection.add(94.0);
		collection.add(4.0);
		collection.add(114.0);
		collection.add(98.0);
		collection.add(170.0);
		collection.add(156.0);
		collection.add(11.0);
		collection.add(172.0);
		collection.add(104.0);
		collection.add(174.0);
		collection.add(113.0);
		collection.add(140.0);
		collection.add(83.0);
		collection.add(153.0);
		collection.add(12.0);
		collection.add(143.0);
		collection.add(135.0);
		collection.add(103.0);
		collection.add(135.0);
		collection.add(14.0);
		collection.add(29.0);
		collection.add(154.0);
		collection.add(162.0);
		collection.add(119.0);
		collection.add(40.0);
		collection.add(176.0);
		collection.add(118.0);
		collection.add(70.0);
		collection.add(187.0);
		collection.add(135.0);
		collection.add(25.0);
		collection.add(98.0);
		collection.add(16.0);
		collection.add(183.0);
		collection.add(136.0);
		collection.add(114.0);
		collection.add(57.0);
		collection.add(63.0);
		collection.add(51.0);
		collection.add(76.0);
		collection.add(177.0);
		collection.add(78.0);
		collection.add(90.0);
		collection.add(64.0);
		collection.add(85.0);
		collection.add(56.0);
		collection.add(9.0);
		collection.add(38.0);
		collection.add(99.0);
		collection.add(161.0);
		collection.add(14.0);
		collection.add(161.0);
		collection.add(3.0);
		collection.add(101.0);
		collection.add(7.0);
		collection.add(177.0);
		collection.add(78.0);
		collection.add(194.0);
		collection.add(65.0);
		collection.add(186.0);
		collection.add(107.0);
		collection.add(97.0);
		collection.add(65.0);
		collection.add(115.0);
		collection.add(36.0);
		collection.add(177.0);
		collection.add(86.0);
		collection.add(21.0);
		collection.add(108.0);
		collection.add(72.0);
		collection.add(38.0);
		collection.add(121.0);
		collection.add(194.0);
		collection.add(44.0);
		collection.add(77.0);
		collection.add(36.0);
		collection.add(120.0);
		collection.add(53.0);
		collection.add(34.0);
		collection.add(181.0);
		collection.add(168.0);
		collection.add(21.0);
		collection.add(47.0);
		collection.add(121.0);
		collection.add(161.0);
		collection.add(86.0);
		collection.add(199.0);
		collection.add(142.0);
		collection.add(15.0);
		collection.add(96.0);
		collection.add(186.0);
		collection.add(31.0);
		collection.add(60.0);
		collection.add(10.0);
		collection.add(74.0);
		collection.add(101.0);
		collection.add(89.0);
		collection.add(180.0);
		collection.add(156.0);
		collection.add(196.0);
		collection.add(26.0);
		collection.add(116.0);
		collection.add(57.0);
		collection.add(122.0);
		collection.add(105.0);
		collection.add(38.0);
		collection.add(7.0);
		collection.add(159.0);
		collection.add(28.0);
		collection.add(109.0);
		collection.add(154.0);
		collection.add(173.0);
		collection.add(60.0);
		collection.add(199.0);
		collection.add(48.0);
		collection.add(130.0);
		collection.add(200.0);
		collection.add(11.0);
		collection.add(127.0);
		collection.add(49.0);
		collection.add(180.0);
		collection.add(142.0);
		collection.add(152.0);
		collection.add(113.0);
		collection.add(155.0);
		collection.add(137.0);
		collection.add(140.0);
		collection.add(115.0);
		collection.add(78.0);
		collection.add(125.0);
		collection.add(179.0);
		collection.add(147.0);
		collection.add(71.0);
		collection.add(11.0);
		collection.add(87.0);
		collection.add(170.0);
		collection.add(175.0);
		collection.add(137.0);
		collection.add(130.0);
		collection.add(183.0);
		collection.add(88.0);
		collection.add(176.0);
		collection.add(163.0);
		collection.add(172.0);
		collection.add(94.0);
		collection.add(182.0);
		collection.add(12.0);
		collection.add(126.0);
		collection.add(77.0);
		collection.add(18.0);
		collection.add(43.0);
		collection.add(7.0);
		collection.add(18.0);
		collection.add(157.0);
		collection.add(46.0);
		collection.add(7.0);
		collection.add(34.0);
		collection.add(40.0);
		collection.add(58.0);
		collection.add(187.0);
		collection.add(180.0);
		collection.add(30.0);
		collection.add(168.0);
		collection.add(91.0);
		collection.add(84.0);
		collection.add(78.0);
		collection.add(135.0);
		collection.add(193.0);
		collection.add(186.0);
		collection.add(100.0);
		collection.add(35.0);
		collection.add(152.0);
		collection.add(59.0);
		collection.add(88.0);
		collection.add(164.0);
		collection.add(119.0);
		collection.add(10.0);
		collection.add(58.0);
		collection.add(1.0);
		collection.add(62.0);
		collection.add(44.0);
		collection.add(96.0);
		collection.add(144.0);
		collection.add(175.0);
		collection.add(149.0);
		collection.add(12.0);
		collection.add(162.0);
		collection.add(138.0);
		collection.add(51.0);
		collection.add(111.0);
		collection.add(166.0);
		collection.add(105.0);
		collection.add(167.0);
		collection.add(144.0);
		collection.add(48.0);
		collection.add(11.0);
		collection.add(99.0);
		collection.add(4.0);
		collection.add(197.0);
		collection.add(76.0);
		collection.add(115.0);
		collection.add(129.0);
		collection.add(60.0);
		collection.add(161.0);
		collection.add(48.0);
		collection.add(70.0);
		collection.add(178.0);
		collection.add(142.0);
		collection.add(92.0);
		collection.add(118.0);
		collection.add(3.0);
		collection.add(200.0);
		collection.add(171.0);
		collection.add(83.0);
		collection.add(25.0);
		collection.add(196.0);
		collection.add(70.0);
		collection.add(175.0);
		collection.add(77.0);
		collection.add(130.0);
		collection.add(130.0);
		collection.add(185.0);
		collection.add(170.0);
		collection.add(111.0);
		collection.add(132.0);
		collection.add(1.0);
		collection.add(174.0);
		collection.add(158.0);
		collection.add(199.0);
		collection.add(138.0);
		collection.add(84.0);
		collection.add(148.0);
		collection.add(36.0);
		collection.add(35.0);
		collection.add(8.0);
		collection.add(200.0);
		collection.add(104.0);
		collection.add(192.0);
		collection.add(145.0);
		collection.add(56.0);
		collection.add(51.0);
		collection.add(156.0);
		collection.add(123.0);
		collection.add(44.0);
		collection.add(181.0);
		collection.add(171.0);
		collection.add(167.0);
		collection.add(150.0);
		collection.add(194.0);
		collection.add(47.0);
		collection.add(44.0);
		collection.add(146.0);
		collection.add(179.0);
		collection.add(129.0);
		collection.add(107.0);
		collection.add(16.0);
		collection.add(68.0);
		collection.add(68.0);
		collection.add(196.0);
		collection.add(39.0);
		collection.add(22.0);
		collection.add(135.0);
		collection.add(52.0);
		collection.add(145.0);
		collection.add(117.0);
		collection.add(31.0);
		collection.add(16.0);
		collection.add(102.0);
		collection.add(128.0);
		collection.add(96.0);
		collection.add(21.0);
		collection.add(49.0);
		collection.add(9.0);
		collection.add(66.0);
		collection.add(159.0);
		collection.add(51.0);
		collection.add(21.0);
		collection.add(179.0);
		collection.add(121.0);
		collection.add(25.0);
		collection.add(182.0);
		collection.add(68.0);
		collection.add(59.0);
		collection.add(19.0);
		collection.add(105.0);
		collection.add(44.0);
		collection.add(70.0);
		collection.add(35.0);
		collection.add(52.0);
		collection.add(10.0);
		collection.add(104.0);
		collection.add(125.0);
		collection.add(102.0);
		collection.add(67.0);
		collection.add(97.0);
		collection.add(120.0);
		collection.add(158.0);
		collection.add(192.0);
		collection.add(79.0);
		collection.add(49.0);
		collection.add(68.0);
		collection.add(1.0);
		collection.add(155.0);
		collection.add(103.0);
		collection.add(79.0);
		collection.add(24.0);
		collection.add(43.0);
		collection.add(73.0);
		collection.add(73.0);
		collection.add(188.0);
		collection.add(146.0);
		collection.add(90.0);
		collection.add(178.0);
		collection.add(154.0);
		collection.add(70.0);
		collection.add(107.0);
		collection.add(65.0);
		collection.add(141.0);
		collection.add(78.0);
		collection.add(191.0);
		collection.add(188.0);
		collection.add(20.0);
		collection.add(136.0);
		collection.add(109.0);
		collection.add(37.0);
		collection.add(101.0);
		collection.add(151.0);
		collection.add(168.0);
		collection.add(43.0);
		collection.add(94.0);
		collection.add(190.0);
		collection.add(135.0);
		collection.add(158.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JHashSet(Blackhole bh) {
		bh.consume(collection.remove(112.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,74.0,77.0,102.0,180.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,122.0,37.0)));
		bh.consume(collection.remove(42.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,25.0,114.0,110.0,166.0,83.0,135.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,28.0,32.0,146.0,13.0,95.0,64.0,175.0,155.0)));
		bh.consume(collection.add(98.0));
		bh.consume(collection.add(116.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,23.0,194.0,154.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(19.0,150.0,42.0,3.0,113.0,109.0,168.0,108.0,200.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(36.0,39.0,150.0,49.0,102.0,178.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(47.0,6.0,17.0,11.0,56.0)));
		collection.toArray(new Double[] {58.0,80.0,84.0,72.0,138.0,69.0,44.0,20.0,38.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(162.0,124.0,11.0,129.0,22.0)));
		bh.consume(collection.remove(14.0));
		bh.consume(collection.add(164.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(136.0,163.0,139.0,190.0,140.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,155.0,61.0,83.0,171.0,148.0,131.0,2.0,64.0)));
		bh.consume(collection.contains(93.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(94.0,200.0,162.0,88.0,19.0,167.0,197.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(46.0,79.0,95.0,198.0,108.0)));
		bh.consume(collection.add(6.0));
		bh.consume(collection.contains(121.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(104.0,199.0,11.0,18.0,157.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,29.0,109.0,12.0,56.0)));
		bh.consume(collection.contains(156.0));
		collection.toArray(new Double[] {109.0,61.0,130.0,123.0,127.0,45.0,147.0});
		bh.consume(collection.add(74.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(27.0,83.0,84.0)));
		bh.consume(collection.contains(35.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(97.0,18.0,15.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(51.0,146.0,189.0,130.0,78.0,43.0,170.0)));
		bh.consume(collection.add(83.0));
		bh.consume(collection.remove(20.0));
		bh.consume(collection.add(78.0));
		bh.consume(collection.remove(137.0));
		bh.consume(collection.contains(48.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,164.0,5.0,171.0)));
		bh.consume(collection.contains(86.0));
		bh.consume(collection.add(182.0));
		collection.toArray(new Double[] {10.0,109.0,110.0,88.0,149.0,175.0,33.0});
		bh.consume(collection.contains(153.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,79.0,64.0,6.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(12.0,122.0,36.0)));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.remove(94.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,148.0,114.0,181.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,106.0,156.0,184.0,186.0)));
		bh.consume(collection.contains(73.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(180.0,192.0,160.0)));
		bh.consume(collection.add(56.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,50.0,32.0,194.0,39.0)));
		bh.consume(collection.add(83.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,61.0,87.0,106.0,125.0,185.0,185.0,58.0,145.0)));
		bh.consume(collection.add(145.0));
		bh.consume(collection.add(61.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(106.0,28.0,41.0,147.0,39.0,161.0,87.0,89.0)));
		bh.consume(collection.remove(148.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(180.0,46.0,34.0,97.0,123.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,170.0,110.0,36.0,45.0,85.0,125.0,156.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(29.0,104.0,200.0,101.0,161.0,172.0,188.0,181.0,37.0)));
		bh.consume(collection.remove(181.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,13.0,133.0,36.0,111.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(52.0,9.0,66.0,108.0,77.0,164.0,143.0,73.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,20.0,174.0,24.0,141.0,104.0)));
		bh.consume(collection.contains(127.0));
		bh.consume(collection.add(95.0));
		bh.consume(collection.add(126.0));
		bh.consume(collection.remove(78.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(66.0,20.0,98.0,98.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(26.0,21.0,108.0,183.0,15.0)));
		bh.consume(collection.add(76.0));
		bh.consume(collection.add(25.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(165.0,59.0,67.0,2.0,106.0,62.0)));
		bh.consume(collection.contains(90.0));
		bh.consume(collection.add(120.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,149.0,173.0,157.0,95.0,66.0,101.0,24.0,193.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(199.0,27.0,102.0,55.0,56.0,99.0,22.0)));
		bh.consume(collection.remove(102.0));
		collection.toArray(new Double[] {28.0,154.0,37.0,124.0,73.0,47.0,1.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(160.0,190.0,176.0,78.0,71.0,106.0,199.0,91.0)));
		bh.consume(collection.remove(141.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(52.0,37.0,94.0,116.0,15.0,75.0,192.0,97.0,17.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(1.0,4.0,79.0,101.0,49.0,167.0,165.0,71.0,187.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(147.0,28.0,51.0,72.0,184.0,7.0,187.0,100.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(60.0,166.0,77.0,86.0,134.0,104.0,158.0,184.0,31.0)));
		bh.consume(collection.add(193.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(104.0,169.0,164.0,74.0,138.0,76.0,106.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(14.0,178.0,114.0,25.0,50.0,49.0,181.0,183.0)));
		bh.consume(collection.add(80.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,150.0,181.0,176.0,181.0,154.0,2.0,49.0)));
		bh.consume(collection.remove(97.0));
		bh.consume(collection.remove(163.0));
		bh.consume(collection.contains(151.0));
		bh.consume(collection.remove(159.0));
		bh.consume(collection.add(176.0));
		bh.consume(collection.contains(189.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(131.0,28.0,178.0,104.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(168.0,50.0,182.0,33.0,121.0,39.0,88.0,26.0)));
		bh.consume(collection.add(18.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,36.0,179.0,150.0,11.0,70.0,189.0,142.0,21.0)));
		bh.consume(collection.contains(65.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(85.0,169.0,199.0,108.0,157.0,181.0,85.0,63.0)));
		bh.consume(collection.remove(120.0));
		bh.consume(collection.add(159.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(132.0,47.0,35.0,43.0,98.0,185.0,90.0,39.0)));
		bh.consume(collection.add(49.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(186.0,81.0,29.0,16.0,134.0,71.0,114.0,131.0,46.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(182.0,192.0,36.0,176.0,51.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(95.0,162.0,159.0,28.0,31.0,32.0,136.0,112.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(99.0,68.0,96.0,70.0,26.0,128.0,166.0)));
		bh.consume(collection.add(115.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,171.0,181.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,131.0,120.0,60.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(74.0,125.0,88.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,69.0,24.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(167.0,106.0,156.0,81.0,77.0,21.0)));
		bh.consume(collection.remove(134.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(129.0,163.0,78.0,158.0,42.0,199.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,198.0,33.0,13.0)));
		bh.consume(collection.remove(169.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,89.0,3.0)));
		bh.consume(collection.add(131.0));
		bh.consume(collection.contains(120.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,110.0,196.0,67.0,182.0,42.0,65.0,125.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,176.0,168.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(158.0,191.0,79.0,149.0,86.0,174.0,129.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(147.0,25.0,194.0,45.0,167.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(124.0,50.0,8.0,24.0,113.0,183.0,182.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,128.0,11.0,93.0)));
		bh.consume(collection.remove(24.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(22.0,193.0,105.0,44.0,188.0,52.0,28.0,65.0)));
		bh.consume(collection.remove(7.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,198.0,53.0)));
		bh.consume(collection.add(104.0));
		bh.consume(collection.contains(47.0));
		collection.toArray(new Double[] {69.0,31.0,16.0,177.0,29.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,116.0,129.0,110.0,82.0,114.0,183.0,84.0,81.0)));
		bh.consume(collection.add(197.0));
		bh.consume(collection.add(8.0));
		bh.consume(collection.add(90.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,133.0,107.0,145.0,67.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,25.0,170.0,54.0,24.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(23.0,123.0,117.0,146.0,109.0,195.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,193.0,9.0,133.0,8.0,32.0)));
		collection.toArray(new Double[] {131.0,59.0,59.0,49.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(144.0,99.0,56.0,57.0,14.0,132.0,145.0,172.0,97.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(107.0,82.0,172.0)));
		bh.consume(collection.remove(3.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,59.0,79.0,150.0,1.0,118.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,170.0,113.0,157.0,131.0,105.0,136.0,12.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,175.0,4.0,190.0,86.0,88.0,83.0,1.0,166.0)));
		bh.consume(collection.remove(76.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(78.0,128.0,80.0,94.0,174.0,75.0,98.0,181.0)));
		collection.toArray(new Double[] {72.0,10.0,11.0,29.0,73.0,103.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(162.0,192.0,122.0,117.0,71.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,166.0,88.0)));
		bh.consume(collection.contains(132.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(59.0,107.0,198.0,144.0,14.0)));
		bh.consume(collection.add(148.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,83.0,7.0,157.0,101.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,119.0,35.0)));
		bh.consume(collection.remove(140.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,7.0,6.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(96.0,11.0,15.0,127.0,127.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,117.0,185.0,48.0)));
		bh.consume(collection.remove(155.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(109.0,158.0,19.0,35.0,26.0,50.0,110.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(163.0,74.0,78.0,22.0,125.0,20.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,191.0,78.0,62.0,121.0)));
		bh.consume(collection.contains(140.0));
		bh.consume(collection.remove(52.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,183.0,138.0,4.0)));
		bh.consume(collection.add(1.0));
		bh.consume(collection.remove(186.0));
		bh.consume(collection.contains(182.0));
		bh.consume(collection.contains(141.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(88.0,84.0,57.0,107.0,109.0,106.0,20.0,94.0,135.0)));
		bh.consume(collection.remove(92.0));
		bh.consume(collection.add(70.0));
		bh.consume(collection.contains(94.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(39.0,101.0,163.0,113.0,182.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(53.0,60.0,162.0,143.0,184.0,197.0,34.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(73.0,70.0,161.0,154.0,76.0,144.0,147.0,160.0,43.0)));
		bh.consume(collection.add(182.0));
		bh.consume(collection.contains(17.0));
		bh.consume(collection.remove(184.0));
		bh.consume(collection.remove(1.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,153.0,34.0,182.0,190.0,153.0,110.0,173.0,162.0)));
		bh.consume(collection.remove(171.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(193.0,118.0,36.0,188.0,82.0,66.0,124.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(25.0,155.0,36.0,13.0,37.0,147.0,5.0,104.0)));
		bh.consume(collection.remove(126.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(57.0,158.0,179.0,101.0,110.0,172.0,135.0,18.0,177.0)));
		bh.consume(collection.remove(108.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(197.0,126.0,45.0,1.0,74.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(12.0,5.0,136.0,56.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(61.0,196.0,27.0,193.0,170.0)));
		bh.consume(collection.remove(11.0));
		bh.consume(collection.remove(118.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(114.0,99.0,126.0,62.0,146.0,156.0,27.0,149.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(149.0,90.0,159.0,142.0,34.0,100.0,134.0,157.0,82.0)));
		bh.consume(collection.remove(137.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,167.0,117.0)));
		collection.toArray(new Double[] {63.0,67.0,103.0,125.0});
		bh.consume(collection.remove(54.0));
		bh.consume(collection.remove(51.0));
		bh.consume(collection.remove(198.0));
		bh.consume(collection.add(67.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(180.0,185.0,71.0)));
		bh.consume(collection.remove(162.0));
		bh.consume(collection.remove(104.0));
		bh.consume(collection.remove(161.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(46.0,53.0,30.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,70.0,136.0,167.0,34.0,50.0,111.0,172.0,63.0)));
		bh.consume(collection.remove(115.0));
		bh.consume(collection.remove(107.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(54.0,150.0,26.0)));
		bh.consume(collection.add(30.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,96.0,112.0,104.0,143.0,73.0)));
		bh.consume(collection.add(53.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,167.0,15.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(84.0,108.0,194.0,28.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,132.0,146.0,74.0)));
		collection.toArray(new Double[] {47.0,9.0,150.0,73.0,41.0,167.0,156.0});
		bh.consume(collection.add(60.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(167.0,86.0,1.0,13.0,116.0,27.0,66.0,91.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(191.0,135.0,19.0,81.0,168.0,76.0,93.0,94.0,80.0)));
		bh.consume(collection.remove(96.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(25.0,157.0,156.0,73.0,171.0,145.0,181.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(54.0,179.0,180.0,51.0,104.0)));
		bh.consume(collection.remove(52.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(157.0,145.0,12.0,199.0,3.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,196.0,18.0,156.0)));
		bh.consume(collection.add(180.0));
		bh.consume(collection.remove(182.0));
		bh.consume(collection.contains(103.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(137.0,51.0,194.0,121.0,175.0,54.0,43.0,50.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(121.0,61.0,134.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,175.0,99.0,135.0,70.0,180.0)));
		bh.consume(collection.add(196.0));
		bh.consume(collection.remove(134.0));
		collection.toArray(new Double[] {53.0,54.0,169.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(154.0,168.0,89.0,73.0)));
		bh.consume(collection.remove(169.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(32.0,62.0,193.0,158.0,153.0,112.0)));
		bh.consume(collection.add(51.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(94.0,178.0,150.0,40.0,168.0,156.0,196.0,117.0,125.0)));
		bh.consume(collection.contains(174.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(138.0,33.0,166.0,84.0,27.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(190.0,101.0,184.0,148.0,117.0,61.0,160.0)));
		bh.consume(collection.add(78.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(16.0,106.0,52.0,60.0,152.0,142.0)));
		bh.consume(collection.contains(77.0));
		bh.consume(collection.add(4.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,193.0,82.0,35.0,44.0,43.0,118.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,34.0,183.0,90.0,115.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(19.0,46.0,174.0,101.0,171.0,23.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,8.0,112.0,87.0,60.0,169.0,65.0,32.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(90.0,45.0,115.0,110.0,132.0,49.0)));
		bh.consume(collection.add(59.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,80.0,169.0,20.0,179.0,105.0,71.0,7.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,62.0,107.0,45.0,46.0,77.0)));
		bh.consume(collection.remove(74.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,129.0,102.0,178.0,87.0,155.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(148.0,30.0,57.0,35.0,138.0,27.0)));
		collection.toArray(new Double[] {72.0,182.0,129.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(135.0,84.0,76.0,187.0,16.0,52.0,29.0,2.0,104.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(83.0,170.0,55.0,56.0,73.0)));
		bh.consume(collection.remove(197.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,116.0,162.0)));
		bh.consume(collection.remove(48.0));
		bh.consume(collection.contains(71.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(107.0,132.0,5.0,72.0,35.0,131.0,140.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,135.0,21.0,16.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(31.0,116.0,61.0,170.0,189.0,10.0)));
		bh.consume(collection.remove(109.0));
		bh.consume(collection.remove(118.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,156.0,125.0,95.0,31.0)));
		bh.consume(collection.remove(155.0));
		bh.consume(collection.contains(159.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(38.0,83.0,170.0,18.0,182.0,72.0)));
		bh.consume(collection.contains(132.0));
		bh.consume(collection.add(16.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,162.0,194.0,159.0,181.0)));
		bh.consume(collection.remove(4.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,146.0,120.0,150.0,106.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,194.0,195.0,192.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,9.0,140.0)));
		bh.consume(collection.add(9.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(75.0,153.0,52.0,59.0,115.0,174.0,71.0,168.0,39.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,126.0,67.0,128.0,20.0,138.0,70.0,29.0,71.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(126.0,32.0,3.0,1.0,173.0)));
		bh.consume(collection.remove(148.0));
		bh.consume(collection.add(185.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(151.0,72.0,130.0,170.0,54.0,88.0,149.0,154.0,77.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,4.0,184.0,191.0,146.0,49.0,40.0,130.0,155.0)));
		bh.consume(collection.add(174.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,111.0,200.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(130.0,84.0,174.0,165.0,158.0,125.0,61.0)));
		collection.toArray(new Double[] {119.0,111.0,127.0,139.0});
		bh.consume(collection.remove(166.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(93.0,52.0,188.0,92.0,75.0,10.0,147.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(73.0,101.0,106.0,182.0,114.0,28.0,94.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,75.0,130.0,185.0,105.0,63.0,37.0,169.0,133.0)));
		bh.consume(collection.remove(93.0));
		bh.consume(collection.remove(56.0));
		bh.consume(collection.add(16.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(34.0,37.0,21.0,111.0,191.0,187.0,188.0,19.0,19.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(170.0,163.0,130.0,187.0,15.0,172.0,144.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(188.0,22.0,130.0)));
		bh.consume(collection.remove(65.0));
		bh.consume(collection.remove(155.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(141.0,126.0,54.0,27.0,104.0)));
		bh.consume(collection.remove(79.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(130.0,163.0,92.0,185.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(146.0,93.0,59.0,55.0,148.0,15.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,9.0,114.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,140.0,47.0,190.0,21.0,123.0,48.0)));
		bh.consume(collection.add(135.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(134.0,190.0,186.0,114.0,12.0)));
		collection.toArray(new Double[] {65.0,12.0,177.0,33.0,99.0,37.0});
		bh.consume(collection.add(119.0));
		bh.consume(collection.remove(167.0));
		bh.consume(collection.remove(2.0));
		bh.consume(collection.remove(197.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,144.0,88.0,20.0,198.0,46.0,11.0,87.0)));
		bh.consume(collection.remove(76.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(80.0,15.0,117.0)));
		bh.consume(collection.remove(156.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(140.0,102.0,177.0,22.0,7.0,197.0)));
		bh.consume(collection.add(191.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,189.0,117.0,171.0,41.0,6.0,171.0)));
		bh.consume(collection.add(147.0));
		bh.consume(collection.contains(200.0));
		bh.consume(collection.add(123.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(178.0,164.0,91.0,105.0,66.0,143.0,172.0,59.0,31.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(51.0,62.0,96.0,37.0,166.0,60.0,169.0,95.0,88.0)));
		bh.consume(collection.add(194.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(150.0,17.0,77.0,176.0,193.0,116.0,124.0,116.0,85.0)));
		bh.consume(collection.add(199.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(99.0,137.0,181.0,1.0,100.0,165.0,39.0,86.0,165.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,129.0,69.0,31.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(45.0,47.0,161.0,174.0,74.0,115.0,185.0,22.0)));
		collection.toArray(new Double[] {132.0,63.0,100.0,133.0,128.0,127.0,70.0,92.0,157.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(103.0,184.0,113.0,179.0)));
		bh.consume(collection.remove(144.0));
		bh.consume(collection.remove(122.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(195.0,54.0,55.0,3.0,151.0,138.0,127.0,149.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(122.0,132.0,16.0,9.0,60.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(37.0,29.0,93.0,178.0,6.0,57.0,46.0)));
		bh.consume(collection.remove(163.0));
		bh.consume(collection.contains(38.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(14.0,143.0,29.0,53.0,152.0,83.0,40.0,76.0,71.0)));
		bh.consume(collection.remove(165.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(2.0,152.0,97.0)));
		bh.consume(collection.remove(67.0));
		collection.toArray(new Double[] {194.0,30.0,5.0,141.0,183.0,134.0,56.0});
		bh.consume(collection.remove(128.0));
		bh.consume(collection.remove(135.0));
		bh.consume(collection.remove(25.0));
		bh.consume(collection.contains(152.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,122.0,158.0,6.0,97.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(134.0,1.0,191.0,79.0,165.0,112.0,108.0,180.0,76.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(140.0,41.0,43.0,10.0,117.0,109.0)));
		bh.consume(collection.remove(118.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(178.0,37.0,56.0,160.0,20.0,120.0,178.0,42.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,84.0,41.0,163.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(138.0,134.0,148.0,64.0,155.0,145.0,115.0,124.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(79.0,195.0,46.0,14.0,72.0,140.0,189.0,138.0,185.0)));
		bh.consume(collection.remove(127.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,171.0,182.0,163.0,114.0,61.0)));
		bh.consume(collection.contains(158.0));
		bh.consume(collection.remove(114.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(71.0,178.0,139.0,53.0,107.0,124.0,132.0,200.0)));
		bh.consume(collection.add(3.0));
		bh.consume(collection.remove(45.0));
		bh.consume(collection.remove(36.0));
		bh.consume(collection.remove(191.0));
		bh.consume(collection.contains(120.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(106.0,67.0,178.0,128.0,46.0,138.0,49.0,86.0,110.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(92.0,49.0,163.0,103.0,158.0,43.0)));
		bh.consume(collection.add(59.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(199.0,14.0,57.0,76.0,132.0,197.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(123.0,183.0,96.0,144.0,59.0,51.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,131.0,72.0)));
		bh.consume(collection.remove(80.0));
		bh.consume(collection.add(131.0));
		bh.consume(collection.add(67.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(173.0,112.0,47.0)));
		bh.consume(collection.remove(21.0));
		bh.consume(collection.remove(57.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(77.0,80.0,186.0,58.0,68.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(85.0,69.0,98.0,123.0,73.0,114.0,90.0,70.0,39.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(120.0,190.0,135.0,74.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,72.0,190.0,153.0,129.0,78.0)));
		bh.consume(collection.remove(89.0));
		bh.consume(collection.contains(93.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(72.0,132.0,44.0,175.0,122.0,94.0,84.0,103.0)));
		bh.consume(collection.remove(6.0));
		bh.consume(collection.remove(48.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,59.0,78.0,111.0,23.0,105.0)));
		bh.consume(collection.add(162.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,53.0,59.0,45.0,47.0,149.0,44.0,41.0,135.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(43.0,177.0,158.0,199.0,142.0,156.0,3.0,48.0,133.0)));
		bh.consume(collection.add(55.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(83.0,53.0,140.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,187.0,40.0,23.0)));
		bh.consume(collection.contains(197.0));
		bh.consume(collection.contains(8.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(38.0,66.0,10.0,127.0,185.0,33.0,89.0,188.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,74.0,9.0,200.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(82.0,107.0,79.0,111.0,103.0,138.0,103.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,84.0,179.0,91.0,182.0)));
		bh.consume(collection.remove(189.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(157.0,133.0,59.0,199.0,76.0,153.0,197.0,12.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(73.0,94.0,73.0,171.0,76.0,196.0,21.0,124.0,154.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(113.0,34.0,15.0,177.0,35.0,135.0,76.0)));
		bh.consume(collection.remove(36.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(164.0,142.0,37.0,139.0,50.0,196.0,83.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,148.0,39.0,75.0,121.0,158.0,169.0,151.0,43.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(140.0,135.0,92.0,58.0,91.0,7.0,154.0,38.0)));
		bh.consume(collection.remove(17.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(184.0,180.0,58.0,91.0,29.0,161.0,113.0,44.0,115.0)));
		bh.consume(collection.remove(62.0));
		bh.consume(collection.add(119.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(105.0,91.0,70.0,148.0,124.0,88.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(86.0,133.0,197.0,112.0,159.0)));
		bh.consume(collection.contains(9.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,46.0,51.0,194.0,158.0,128.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,191.0,126.0,109.0,13.0,82.0,72.0,84.0,199.0)));
		bh.consume(collection.remove(104.0));
		bh.consume(collection.remove(17.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(149.0,44.0,99.0,171.0,5.0,74.0,113.0,195.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(30.0,147.0,141.0)));
		bh.consume(collection.remove(144.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(139.0,87.0,97.0,34.0,195.0,10.0,11.0)));
		bh.consume(collection.add(81.0));
		bh.consume(collection.add(150.0));
		bh.consume(collection.contains(179.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(69.0,98.0,68.0,164.0,196.0,18.0,59.0,74.0,172.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(189.0,125.0,95.0,151.0,60.0,46.0,79.0,177.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,26.0,164.0,183.0,174.0,73.0,33.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(162.0,103.0,168.0,199.0,22.0,40.0,1.0)));
		bh.consume(collection.remove(37.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(167.0,188.0,41.0)));
		bh.consume(collection.remove(16.0));
		bh.consume(collection.add(122.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(26.0,89.0,147.0,79.0,93.0)));
		bh.consume(collection.remove(187.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,60.0,186.0,14.0,182.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(149.0,185.0,108.0,138.0,95.0,181.0,160.0,92.0,87.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,27.0,69.0)));
		bh.consume(collection.add(105.0));
		bh.consume(collection.remove(191.0));
		bh.consume(collection.remove(43.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,61.0,87.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,107.0,2.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(183.0,81.0,131.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(55.0,122.0,105.0,66.0,187.0,168.0,179.0)));
		bh.consume(collection.contains(67.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(190.0,55.0,173.0,178.0,191.0,77.0,104.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,76.0,177.0,166.0,4.0,65.0,19.0,47.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(10.0,23.0,113.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(81.0,41.0,10.0,135.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,117.0,156.0,162.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(64.0,70.0,143.0,2.0,124.0)));
		bh.consume(collection.remove(36.0));
		bh.consume(collection.add(57.0));
		bh.consume(collection.remove(130.0));
		bh.consume(collection.contains(139.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(124.0,125.0,168.0,104.0)));
		bh.consume(collection.add(185.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(9.0,67.0,35.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(104.0,136.0,130.0,66.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(119.0,86.0,26.0,28.0,98.0,67.0,38.0,133.0,139.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(185.0,167.0,183.0,96.0,73.0,74.0)));
		bh.consume(collection.remove(39.0));
		bh.consume(collection.remove(183.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(21.0,44.0,83.0,157.0,103.0,25.0,108.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(74.0,38.0,35.0,80.0,176.0,139.0,198.0)));
		bh.consume(collection.contains(178.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,182.0,135.0,43.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,122.0,191.0,13.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,102.0,165.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(118.0,34.0,67.0,33.0,188.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(74.0,9.0,42.0,2.0,73.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(175.0,149.0,94.0,82.0,84.0,181.0,71.0,200.0,148.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,108.0,96.0,60.0,44.0)));
		bh.consume(collection.contains(65.0));
		bh.consume(collection.add(54.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(108.0,44.0,57.0,66.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(89.0,166.0,94.0,88.0,131.0,143.0,52.0,146.0)));
		bh.consume(collection.add(94.0));
		bh.consume(collection.remove(14.0));
		bh.consume(collection.add(163.0));
		bh.consume(collection.remove(17.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(91.0,27.0,108.0,133.0)));
		bh.consume(collection.remove(171.0));
		bh.consume(collection.add(119.0));
	}
}
