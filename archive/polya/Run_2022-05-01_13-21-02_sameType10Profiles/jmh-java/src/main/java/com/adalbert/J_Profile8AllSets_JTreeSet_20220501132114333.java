package com.adalbert;
import java.util.*;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.*;

@State(Scope.Benchmark)
public class J_Profile8AllSets_JTreeSet_20220501132114333 {
	java.util.TreeSet<Double> collection = new java.util.TreeSet<>();
	@Setup(Level.Invocation)
	public void setupJTreeSet() {
		collection = new java.util.TreeSet<>();
		collection.add(154.0);
		collection.add(200.0);
		collection.add(82.0);
		collection.add(26.0);
		collection.add(104.0);
		collection.add(11.0);
		collection.add(86.0);
		collection.add(90.0);
		collection.add(4.0);
		collection.add(42.0);
		collection.add(77.0);
		collection.add(76.0);
		collection.add(71.0);
		collection.add(28.0);
		collection.add(4.0);
		collection.add(105.0);
		collection.add(77.0);
		collection.add(5.0);
		collection.add(184.0);
		collection.add(158.0);
		collection.add(152.0);
		collection.add(91.0);
		collection.add(197.0);
		collection.add(53.0);
		collection.add(138.0);
		collection.add(105.0);
		collection.add(29.0);
		collection.add(73.0);
		collection.add(184.0);
		collection.add(86.0);
		collection.add(52.0);
		collection.add(11.0);
		collection.add(5.0);
		collection.add(11.0);
		collection.add(168.0);
		collection.add(120.0);
		collection.add(182.0);
		collection.add(102.0);
		collection.add(200.0);
		collection.add(141.0);
		collection.add(5.0);
		collection.add(101.0);
		collection.add(1.0);
		collection.add(114.0);
		collection.add(77.0);
		collection.add(146.0);
		collection.add(161.0);
		collection.add(33.0);
		collection.add(85.0);
		collection.add(92.0);
		collection.add(155.0);
		collection.add(186.0);
		collection.add(64.0);
		collection.add(140.0);
		collection.add(34.0);
		collection.add(130.0);
		collection.add(36.0);
		collection.add(152.0);
		collection.add(41.0);
		collection.add(66.0);
		collection.add(128.0);
		collection.add(127.0);
		collection.add(65.0);
		collection.add(149.0);
		collection.add(79.0);
		collection.add(168.0);
		collection.add(78.0);
		collection.add(183.0);
		collection.add(58.0);
		collection.add(149.0);
		collection.add(124.0);
		collection.add(188.0);
		collection.add(158.0);
		collection.add(99.0);
		collection.add(33.0);
		collection.add(107.0);
		collection.add(80.0);
		collection.add(151.0);
		collection.add(95.0);
		collection.add(149.0);
		collection.add(187.0);
		collection.add(89.0);
		collection.add(33.0);
		collection.add(130.0);
		collection.add(118.0);
		collection.add(143.0);
		collection.add(178.0);
		collection.add(128.0);
		collection.add(56.0);
		collection.add(105.0);
		collection.add(25.0);
		collection.add(155.0);
		collection.add(114.0);
		collection.add(11.0);
		collection.add(174.0);
		collection.add(40.0);
		collection.add(31.0);
		collection.add(131.0);
		collection.add(36.0);
		collection.add(17.0);
		collection.add(121.0);
		collection.add(5.0);
		collection.add(18.0);
		collection.add(198.0);
		collection.add(95.0);
		collection.add(122.0);
		collection.add(4.0);
		collection.add(115.0);
		collection.add(124.0);
		collection.add(55.0);
		collection.add(26.0);
		collection.add(47.0);
		collection.add(112.0);
		collection.add(57.0);
		collection.add(180.0);
		collection.add(113.0);
		collection.add(179.0);
		collection.add(46.0);
		collection.add(185.0);
		collection.add(32.0);
		collection.add(156.0);
		collection.add(39.0);
		collection.add(157.0);
		collection.add(150.0);
		collection.add(81.0);
		collection.add(138.0);
		collection.add(88.0);
		collection.add(124.0);
		collection.add(159.0);
		collection.add(40.0);
		collection.add(195.0);
		collection.add(180.0);
		collection.add(91.0);
		collection.add(68.0);
		collection.add(187.0);
		collection.add(18.0);
		collection.add(182.0);
		collection.add(21.0);
		collection.add(54.0);
		collection.add(83.0);
		collection.add(48.0);
		collection.add(149.0);
		collection.add(75.0);
		collection.add(8.0);
		collection.add(80.0);
		collection.add(39.0);
		collection.add(141.0);
		collection.add(94.0);
		collection.add(136.0);
		collection.add(153.0);
		collection.add(94.0);
		collection.add(13.0);
		collection.add(200.0);
		collection.add(69.0);
		collection.add(46.0);
		collection.add(105.0);
		collection.add(90.0);
		collection.add(74.0);
		collection.add(157.0);
		collection.add(103.0);
		collection.add(45.0);
		collection.add(78.0);
		collection.add(67.0);
		collection.add(189.0);
		collection.add(150.0);
		collection.add(20.0);
		collection.add(152.0);
		collection.add(162.0);
		collection.add(150.0);
		collection.add(160.0);
		collection.add(65.0);
		collection.add(97.0);
		collection.add(5.0);
		collection.add(91.0);
		collection.add(99.0);
		collection.add(63.0);
		collection.add(90.0);
		collection.add(22.0);
		collection.add(58.0);
		collection.add(131.0);
		collection.add(168.0);
		collection.add(130.0);
		collection.add(118.0);
		collection.add(173.0);
		collection.add(128.0);
		collection.add(77.0);
		collection.add(115.0);
		collection.add(166.0);
		collection.add(102.0);
		collection.add(116.0);
		collection.add(73.0);
		collection.add(187.0);
		collection.add(50.0);
		collection.add(28.0);
		collection.add(73.0);
		collection.add(32.0);
		collection.add(196.0);
		collection.add(101.0);
		collection.add(186.0);
		collection.add(103.0);
		collection.add(66.0);
		collection.add(25.0);
		collection.add(21.0);
		collection.add(20.0);
		collection.add(11.0);
		collection.add(146.0);
		collection.add(157.0);
		collection.add(131.0);
		collection.add(100.0);
		collection.add(44.0);
		collection.add(194.0);
		collection.add(81.0);
		collection.add(196.0);
		collection.add(2.0);
		collection.add(78.0);
		collection.add(103.0);
		collection.add(70.0);
		collection.add(51.0);
		collection.add(191.0);
		collection.add(141.0);
		collection.add(48.0);
		collection.add(12.0);
		collection.add(169.0);
		collection.add(4.0);
		collection.add(93.0);
		collection.add(39.0);
		collection.add(179.0);
		collection.add(10.0);
		collection.add(72.0);
		collection.add(87.0);
		collection.add(29.0);
		collection.add(142.0);
		collection.add(57.0);
		collection.add(12.0);
		collection.add(69.0);
		collection.add(163.0);
		collection.add(122.0);
		collection.add(25.0);
		collection.add(76.0);
		collection.add(132.0);
		collection.add(173.0);
		collection.add(48.0);
		collection.add(11.0);
		collection.add(161.0);
		collection.add(29.0);
		collection.add(66.0);
		collection.add(144.0);
		collection.add(120.0);
		collection.add(96.0);
		collection.add(72.0);
		collection.add(110.0);
		collection.add(147.0);
		collection.add(126.0);
		collection.add(35.0);
		collection.add(20.0);
		collection.add(71.0);
		collection.add(105.0);
		collection.add(43.0);
		collection.add(57.0);
		collection.add(65.0);
		collection.add(42.0);
		collection.add(85.0);
		collection.add(2.0);
		collection.add(103.0);
		collection.add(145.0);
		collection.add(180.0);
		collection.add(161.0);
		collection.add(77.0);
		collection.add(33.0);
		collection.add(97.0);
		collection.add(14.0);
		collection.add(174.0);
		collection.add(56.0);
		collection.add(172.0);
		collection.add(65.0);
		collection.add(175.0);
		collection.add(181.0);
		collection.add(38.0);
		collection.add(64.0);
		collection.add(67.0);
		collection.add(122.0);
		collection.add(56.0);
		collection.add(38.0);
		collection.add(172.0);
		collection.add(182.0);
		collection.add(195.0);
		collection.add(188.0);
		collection.add(46.0);
		collection.add(65.0);
		collection.add(192.0);
		collection.add(74.0);
		collection.add(91.0);
		collection.add(62.0);
		collection.add(167.0);
		collection.add(106.0);
		collection.add(83.0);
		collection.add(27.0);
		collection.add(137.0);
		collection.add(167.0);
		collection.add(18.0);
		collection.add(81.0);
		collection.add(133.0);
		collection.add(14.0);
		collection.add(130.0);
		collection.add(149.0);
		collection.add(189.0);
		collection.add(163.0);
		collection.add(150.0);
		collection.add(102.0);
		collection.add(152.0);
		collection.add(88.0);
		collection.add(50.0);
		collection.add(191.0);
		collection.add(152.0);
		collection.add(150.0);
		collection.add(114.0);
		collection.add(173.0);
		collection.add(33.0);
		collection.add(83.0);
		collection.add(20.0);
		collection.add(32.0);
		collection.add(20.0);
		collection.add(39.0);
		collection.add(40.0);
		collection.add(82.0);
		collection.add(142.0);
		collection.add(197.0);
		collection.add(51.0);
		collection.add(11.0);
		collection.add(173.0);
		collection.add(140.0);
		collection.add(110.0);
		collection.add(27.0);
		collection.add(157.0);
		collection.add(80.0);
		collection.add(186.0);
		collection.add(90.0);
		collection.add(118.0);
		collection.add(72.0);
		collection.add(88.0);
		collection.add(46.0);
		collection.add(104.0);
		collection.add(27.0);
		collection.add(119.0);
		collection.add(89.0);
		collection.add(193.0);
		collection.add(9.0);
		collection.add(178.0);
		collection.add(53.0);
		collection.add(99.0);
		collection.add(199.0);
		collection.add(158.0);
		collection.add(177.0);
		collection.add(182.0);
		collection.add(183.0);
		collection.add(61.0);
		collection.add(157.0);
		collection.add(31.0);
		collection.add(92.0);
		collection.add(185.0);
		collection.add(111.0);
		collection.add(58.0);
		collection.add(95.0);
		collection.add(26.0);
		collection.add(169.0);
		collection.add(35.0);
		collection.add(158.0);
		collection.add(84.0);
		collection.add(29.0);
		collection.add(8.0);
		collection.add(59.0);
		collection.add(60.0);
		collection.add(38.0);
		collection.add(96.0);
		collection.add(163.0);
		collection.add(10.0);
		collection.add(45.0);
		collection.add(43.0);
		collection.add(27.0);
		collection.add(78.0);
		collection.add(4.0);
		collection.add(73.0);
		collection.add(142.0);
		collection.add(43.0);
		collection.add(116.0);
		collection.add(2.0);
		collection.add(124.0);
		collection.add(142.0);
		collection.add(97.0);
		collection.add(52.0);
		collection.add(125.0);
		collection.add(133.0);
		collection.add(139.0);
		collection.add(49.0);
		collection.add(39.0);
		collection.add(45.0);
		collection.add(176.0);
		collection.add(142.0);
		collection.add(56.0);
		collection.add(138.0);
		collection.add(63.0);
		collection.add(20.0);
		collection.add(140.0);
		collection.add(91.0);
		collection.add(70.0);
		collection.add(109.0);
		collection.add(31.0);
		collection.add(176.0);
		collection.add(195.0);
		collection.add(194.0);
		collection.add(59.0);
		collection.add(121.0);
		collection.add(84.0);
		collection.add(82.0);
		collection.add(39.0);
		collection.add(114.0);
		collection.add(17.0);
		collection.add(162.0);
		collection.add(160.0);
		collection.add(110.0);
		collection.add(13.0);
		collection.add(149.0);
		collection.add(160.0);
		collection.add(73.0);
		collection.add(31.0);
		collection.add(18.0);
		collection.add(67.0);
		collection.add(104.0);
		collection.add(85.0);
		collection.add(1.0);
		collection.add(183.0);
		collection.add(163.0);
		collection.add(183.0);
		collection.add(85.0);
		collection.add(82.0);
		collection.add(185.0);
		collection.add(148.0);
		collection.add(67.0);
		collection.add(145.0);
		collection.add(87.0);
		collection.add(16.0);
		collection.add(69.0);
		collection.add(118.0);
		collection.add(159.0);
		collection.add(60.0);
		collection.add(4.0);
		collection.add(75.0);
		collection.add(5.0);
		collection.add(32.0);
		collection.add(100.0);
		collection.add(191.0);
		collection.add(4.0);
		collection.add(52.0);
		collection.add(30.0);
		collection.add(60.0);
		collection.add(41.0);
		collection.add(110.0);
		collection.add(79.0);
		collection.add(21.0);
		collection.add(148.0);
		collection.add(102.0);
		collection.add(185.0);
		collection.add(86.0);
		collection.add(61.0);
		collection.add(18.0);
		collection.add(154.0);
		collection.add(168.0);
		collection.add(30.0);
		collection.add(186.0);
		collection.add(172.0);
		collection.add(26.0);
		collection.add(76.0);
		collection.add(84.0);
		collection.add(185.0);
		collection.add(153.0);
		collection.add(78.0);
		collection.add(183.0);
		collection.add(131.0);
		collection.add(153.0);
		collection.add(14.0);
		collection.add(161.0);
		collection.add(43.0);
		collection.add(41.0);
		collection.add(189.0);
		collection.add(166.0);
		collection.add(132.0);
		collection.add(195.0);
		collection.add(183.0);
		collection.add(84.0);
		collection.add(102.0);
		collection.add(146.0);
		collection.add(71.0);
		collection.add(69.0);
		collection.add(16.0);
		collection.add(12.0);
		collection.add(167.0);
		collection.add(181.0);
		collection.add(83.0);
		collection.add(185.0);
		collection.add(3.0);
		collection.add(113.0);
		collection.add(104.0);
		collection.add(165.0);
		collection.add(71.0);
		collection.add(188.0);
		collection.add(46.0);
		collection.add(5.0);
		collection.add(116.0);
		collection.add(61.0);
		collection.add(7.0);
		collection.add(106.0);
		collection.add(141.0);
		collection.add(137.0);
		collection.add(189.0);
		collection.add(198.0);
		collection.add(25.0);
		collection.add(53.0);
		collection.add(14.0);
		collection.add(192.0);
		collection.add(38.0);
		collection.add(63.0);
		collection.add(30.0);
		collection.add(2.0);
		collection.add(81.0);
		collection.add(89.0);
		collection.add(167.0);
		collection.add(159.0);
		collection.add(81.0);
		collection.add(169.0);
		collection.add(158.0);
		collection.add(70.0);
		collection.add(179.0);
		collection.add(198.0);
		collection.add(92.0);
		collection.add(89.0);
		collection.add(176.0);
		collection.add(147.0);
		collection.add(199.0);
		collection.add(71.0);
		collection.add(10.0);
		collection.add(174.0);
		collection.add(90.0);
		collection.add(11.0);
		collection.add(54.0);
		collection.add(59.0);
		collection.add(22.0);
		collection.add(147.0);
		collection.add(76.0);
		collection.add(51.0);
		collection.add(132.0);
		collection.add(94.0);
		collection.add(30.0);
		collection.add(16.0);
		collection.add(147.0);
		collection.add(105.0);
		collection.add(83.0);
		collection.add(84.0);
		collection.add(16.0);
		collection.add(159.0);
		collection.add(69.0);
		collection.add(87.0);
		collection.add(87.0);
		collection.add(19.0);
		collection.add(187.0);
		collection.add(124.0);
		collection.add(11.0);
		collection.add(105.0);
		collection.add(188.0);
		collection.add(4.0);
		collection.add(140.0);
		collection.add(190.0);
		collection.add(194.0);
		collection.add(126.0);
		collection.add(73.0);
		collection.add(8.0);
		collection.add(134.0);
		collection.add(117.0);
		collection.add(88.0);
		collection.add(82.0);
		collection.add(85.0);
		collection.add(198.0);
		collection.add(153.0);
		collection.add(43.0);
		collection.add(69.0);
		collection.add(198.0);
		collection.add(10.0);
		collection.add(195.0);
		collection.add(51.0);
		collection.add(153.0);
		collection.add(96.0);
		collection.add(23.0);
		collection.add(65.0);
		collection.add(78.0);
		collection.add(73.0);
		collection.add(118.0);
		collection.add(85.0);
		collection.add(2.0);
		collection.add(41.0);
		collection.add(139.0);
		collection.add(83.0);
		collection.add(108.0);
		collection.add(18.0);
		collection.add(142.0);
		collection.add(117.0);
		collection.add(111.0);
		collection.add(66.0);
		collection.add(166.0);
		collection.add(135.0);
		collection.add(134.0);
		collection.add(60.0);
		collection.add(45.0);
		collection.add(109.0);
		collection.add(26.0);
		collection.add(189.0);
		collection.add(29.0);
		collection.add(131.0);
		collection.add(131.0);
		collection.add(58.0);
		collection.add(59.0);
		collection.add(142.0);
		collection.add(1.0);
		collection.add(71.0);
		collection.add(96.0);
		collection.add(33.0);
		collection.add(86.0);
		collection.add(119.0);
		collection.add(186.0);
		collection.add(68.0);
		collection.add(86.0);
		collection.add(33.0);
		collection.add(138.0);
		collection.add(58.0);
		collection.add(199.0);
		collection.add(22.0);
		collection.add(51.0);
		collection.add(113.0);
		collection.add(98.0);
		collection.add(194.0);
		collection.add(186.0);
		collection.add(37.0);
		collection.add(46.0);
		collection.add(86.0);
		collection.add(89.0);
		collection.add(112.0);
		collection.add(19.0);
		collection.add(106.0);
		collection.add(38.0);
		collection.add(69.0);
		collection.add(194.0);
		collection.add(117.0);
		collection.add(155.0);
		collection.add(169.0);
		collection.add(71.0);
		collection.add(7.0);
		collection.add(48.0);
		collection.add(51.0);
		collection.add(180.0);
		collection.add(43.0);
		collection.add(151.0);
		collection.add(38.0);
		collection.add(52.0);
		collection.add(87.0);
		collection.add(137.0);
		collection.add(79.0);
		collection.add(93.0);
		collection.add(171.0);
		collection.add(90.0);
		collection.add(108.0);
		collection.add(42.0);
		collection.add(12.0);
		collection.add(161.0);
		collection.add(53.0);
		collection.add(63.0);
		collection.add(74.0);
		collection.add(112.0);
		collection.add(96.0);
		collection.add(103.0);
		collection.add(100.0);
		collection.add(92.0);
		collection.add(8.0);
		collection.add(103.0);
		collection.add(1.0);
		collection.add(139.0);
		collection.add(77.0);
		collection.add(154.0);
		collection.add(135.0);
		collection.add(71.0);
		collection.add(182.0);
		collection.add(145.0);
		collection.add(141.0);
		collection.add(79.0);
		collection.add(50.0);
		collection.add(127.0);
		collection.add(98.0);
		collection.add(106.0);
		collection.add(195.0);
		collection.add(36.0);
		collection.add(181.0);
		collection.add(80.0);
		collection.add(7.0);
		collection.add(150.0);
		collection.add(77.0);
		collection.add(26.0);
		collection.add(77.0);
		collection.add(73.0);
		collection.add(30.0);
		collection.add(152.0);
		collection.add(34.0);
		collection.add(30.0);
		collection.add(186.0);
		collection.add(9.0);
		collection.add(34.0);
		collection.add(4.0);
		collection.add(127.0);
		collection.add(198.0);
		collection.add(149.0);
		collection.add(85.0);
		collection.add(110.0);
		collection.add(113.0);
		collection.add(69.0);
		collection.add(135.0);
		collection.add(126.0);
		collection.add(61.0);
		collection.add(35.0);
		collection.add(90.0);
		collection.add(6.0);
		collection.add(20.0);
		collection.add(100.0);
		collection.add(43.0);
		collection.add(96.0);
		collection.add(102.0);
		collection.add(152.0);
		collection.add(149.0);
		collection.add(25.0);
		collection.add(117.0);
		collection.add(54.0);
		collection.add(37.0);
		collection.add(97.0);
		collection.add(164.0);
		collection.add(59.0);
		collection.add(135.0);
		collection.add(2.0);
		collection.add(53.0);
		collection.add(115.0);
		collection.add(53.0);
		collection.add(114.0);
		collection.add(76.0);
		collection.add(36.0);
		collection.add(196.0);
		collection.add(175.0);
		collection.add(19.0);
		collection.add(139.0);
		collection.add(32.0);
		collection.add(37.0);
		collection.add(94.0);
		collection.add(18.0);
		collection.add(54.0);
		collection.add(52.0);
		collection.add(91.0);
		collection.add(184.0);
		collection.add(151.0);
		collection.add(167.0);
		collection.add(44.0);
		collection.add(95.0);
		collection.add(177.0);
		collection.add(134.0);
		collection.add(90.0);
		collection.add(78.0);
		collection.add(72.0);
		collection.add(19.0);
		collection.add(16.0);
		collection.add(20.0);
		collection.add(175.0);
		collection.add(24.0);
		collection.add(20.0);
		collection.add(145.0);
		collection.add(196.0);
		collection.add(32.0);
		collection.add(16.0);
		collection.add(146.0);
		collection.add(106.0);
		collection.add(82.0);
		collection.add(127.0);
		collection.add(148.0);
		collection.add(112.0);
		collection.add(141.0);
		collection.add(6.0);
		collection.add(122.0);
		collection.add(121.0);
		collection.add(123.0);
		collection.add(87.0);
		collection.add(10.0);
		collection.add(108.0);
		collection.add(22.0);
		collection.add(93.0);
		collection.add(178.0);
		collection.add(108.0);
		collection.add(135.0);
		collection.add(161.0);
		collection.add(81.0);
		collection.add(67.0);
		collection.add(162.0);
		collection.add(171.0);
		collection.add(110.0);
		collection.add(40.0);
		collection.add(116.0);
		collection.add(66.0);
		collection.add(93.0);
		collection.add(182.0);
		collection.add(135.0);
		collection.add(35.0);
		collection.add(192.0);
		collection.add(171.0);
		collection.add(46.0);
		collection.add(78.0);
		collection.add(128.0);
		collection.add(162.0);
		collection.add(131.0);
		collection.add(198.0);
		collection.add(39.0);
		collection.add(20.0);
		collection.add(178.0);
		collection.add(50.0);
		collection.add(184.0);
		collection.add(26.0);
		collection.add(13.0);
		collection.add(90.0);
		collection.add(191.0);
		collection.add(163.0);
		collection.add(141.0);
		collection.add(162.0);
		collection.add(146.0);
		collection.add(84.0);
		collection.add(188.0);
		collection.add(59.0);
		collection.add(25.0);
		collection.add(196.0);
		collection.add(49.0);
		collection.add(175.0);
		collection.add(16.0);
		collection.add(87.0);
		collection.add(162.0);
		collection.add(200.0);
		collection.add(22.0);
		collection.add(148.0);
		collection.add(62.0);
		collection.add(122.0);
		collection.add(97.0);
		collection.add(63.0);
		collection.add(192.0);
		collection.add(116.0);
		collection.add(106.0);
		collection.add(190.0);
		collection.add(30.0);
		collection.add(34.0);
		collection.add(172.0);
		collection.add(94.0);
		collection.add(12.0);
		collection.add(117.0);
		collection.add(95.0);
		collection.add(112.0);
		collection.add(193.0);
		collection.add(49.0);
		collection.add(196.0);
		collection.add(61.0);
		collection.add(60.0);
		collection.add(34.0);
		collection.add(192.0);
		collection.add(192.0);
		collection.add(151.0);
		collection.add(106.0);
		collection.add(144.0);
		collection.add(140.0);
		collection.add(99.0);
		collection.add(198.0);
		collection.add(102.0);
		collection.add(88.0);
		collection.add(170.0);
		collection.add(180.0);
		collection.add(149.0);
		collection.add(4.0);
		collection.add(118.0);
		collection.add(108.0);
		collection.add(179.0);
		collection.add(115.0);
		collection.add(41.0);
		collection.add(84.0);
		collection.add(80.0);
		collection.add(84.0);
		collection.add(12.0);
		collection.add(6.0);
		collection.add(31.0);
		collection.add(77.0);
		collection.add(159.0);
		collection.add(137.0);
		collection.add(42.0);
		collection.add(89.0);
		collection.add(169.0);
		collection.add(82.0);
		collection.add(70.0);
		collection.add(37.0);
		collection.add(24.0);
		collection.add(68.0);
		collection.add(88.0);
		collection.add(172.0);
		collection.add(64.0);
		collection.add(15.0);
		collection.add(109.0);
		collection.add(71.0);
		collection.add(108.0);
		collection.add(28.0);
		collection.add(127.0);
		collection.add(100.0);
		collection.add(184.0);
		collection.add(46.0);
		collection.add(97.0);
		collection.add(18.0);
		collection.add(72.0);
		collection.add(114.0);
		collection.add(89.0);
		collection.add(152.0);
		collection.add(73.0);
		collection.add(78.0);
		collection.add(152.0);
		collection.add(196.0);
		collection.add(50.0);
		collection.add(48.0);
		collection.add(147.0);
		collection.add(14.0);
		collection.add(15.0);
		collection.add(13.0);
		collection.add(15.0);
		collection.add(65.0);
		collection.add(145.0);
		collection.add(132.0);
		collection.add(126.0);
		collection.add(142.0);
		collection.add(37.0);
		collection.add(8.0);
		collection.add(164.0);
		collection.add(161.0);
		collection.add(196.0);
		collection.add(62.0);
		collection.add(105.0);
		collection.add(107.0);
		collection.add(141.0);
		collection.add(82.0);
		collection.add(6.0);
		collection.add(89.0);
		collection.add(119.0);
		collection.add(22.0);
		collection.add(10.0);
		collection.add(133.0);
		collection.add(38.0);
		collection.add(4.0);
		collection.add(4.0);
		collection.add(24.0);
		collection.add(3.0);
		collection.add(196.0);
		collection.add(124.0);
		collection.add(51.0);
		collection.add(191.0);
		collection.add(106.0);
		collection.add(98.0);
		collection.add(59.0);
		collection.add(173.0);
		collection.add(58.0);
		collection.add(190.0);
		collection.add(142.0);
		collection.add(21.0);
		collection.add(119.0);
		collection.add(118.0);
		collection.add(184.0);
		collection.add(6.0);
		collection.add(197.0);
		collection.add(9.0);
		collection.add(174.0);
		collection.add(3.0);
		collection.add(105.0);
		collection.add(122.0);
		collection.add(80.0);
		collection.add(69.0);
		collection.add(91.0);
		collection.add(15.0);
		collection.add(197.0);
		collection.add(197.0);
		collection.add(177.0);
		collection.add(106.0);
		collection.add(8.0);
		collection.add(75.0);
		collection.add(61.0);
		collection.add(176.0);
		collection.add(82.0);
		collection.add(65.0);
		collection.add(155.0);
		collection.add(2.0);
		collection.add(173.0);
		collection.add(40.0);
		collection.add(154.0);
		collection.add(1.0);
		collection.add(198.0);
		collection.add(146.0);
		collection.add(3.0);
		collection.add(69.0);
		collection.add(52.0);
		collection.add(71.0);
		collection.add(180.0);
		collection.add(93.0);
		collection.add(42.0);
		collection.add(114.0);
		collection.add(35.0);
		collection.add(133.0);
		collection.add(7.0);
		collection.add(18.0);
		collection.add(81.0);
		collection.add(57.0);
		collection.add(76.0);
		collection.add(93.0);
		collection.add(4.0);
		collection.add(11.0);
		collection.add(151.0);
		collection.add(175.0);
		collection.add(146.0);
		collection.add(162.0);
		collection.add(155.0);
		collection.add(147.0);
		collection.add(187.0);
		collection.add(108.0);
		collection.add(111.0);
		collection.add(129.0);
		collection.add(6.0);
		collection.add(38.0);
		collection.add(89.0);
		collection.add(48.0);
		collection.add(98.0);
		collection.add(126.0);
		collection.add(44.0);
		collection.add(123.0);
		collection.add(72.0);
		collection.add(102.0);
		collection.add(185.0);
		collection.add(42.0);
		collection.add(114.0);
		collection.add(92.0);
		collection.add(190.0);
		collection.add(56.0);
		collection.add(160.0);
		collection.add(3.0);
		collection.add(49.0);
		collection.add(14.0);
		collection.add(165.0);
		collection.add(171.0);
		collection.add(13.0);
		collection.add(29.0);
		collection.add(18.0);
		collection.add(61.0);
		collection.add(101.0);
		collection.add(64.0);
		collection.add(41.0);
		collection.add(28.0);
		collection.add(42.0);
		collection.add(106.0);
		collection.add(91.0);
		collection.add(183.0);
		collection.add(127.0);
		collection.add(55.0);
		collection.add(79.0);
		collection.add(18.0);
		collection.add(164.0);
		collection.add(93.0);
		collection.add(15.0);
		collection.add(77.0);
		collection.add(10.0);
		collection.add(54.0);
		collection.add(40.0);
		collection.add(194.0);
		collection.add(172.0);
		collection.add(177.0);
		collection.add(33.0);
		collection.add(111.0);
		collection.add(156.0);
		collection.add(63.0);
		collection.add(30.0);
		collection.add(155.0);
		collection.add(147.0);
		collection.add(94.0);
		collection.add(40.0);
		collection.add(153.0);
		collection.add(157.0);
		collection.add(174.0);
		collection.add(120.0);
		collection.add(174.0);
		collection.add(4.0);
		collection.add(9.0);
		collection.add(50.0);
		collection.add(104.0);
		collection.add(193.0);
		collection.add(98.0);
		collection.add(36.0);
		collection.add(56.0);
		collection.add(167.0);
		collection.add(102.0);
		collection.add(195.0);
		collection.add(15.0);
		collection.add(59.0);
		collection.add(119.0);
		collection.add(82.0);
		collection.add(167.0);
		collection.add(179.0);
		collection.add(122.0);
		collection.add(195.0);
		collection.add(13.0);
		collection.add(70.0);
		collection.add(178.0);
		collection.add(128.0);
		collection.add(30.0);
		collection.add(37.0);
		collection.add(190.0);
		collection.add(54.0);
		collection.add(142.0);
		collection.add(7.0);
		collection.add(144.0);
		collection.add(95.0);
		collection.add(96.0);
		collection.add(47.0);
		collection.add(143.0);
		collection.add(64.0);
		collection.add(10.0);
		collection.add(115.0);
		collection.add(94.0);
		collection.add(102.0);
		collection.add(108.0);
		collection.add(60.0);
		collection.add(97.0);
		collection.add(13.0);
		collection.add(99.0);
		collection.add(29.0);
		collection.add(64.0);
		collection.add(156.0);
		collection.add(12.0);
		collection.add(47.0);
		collection.add(154.0);
		collection.add(23.0);
		collection.add(79.0);
		collection.add(188.0);
		collection.add(74.0);
		collection.add(147.0);
		collection.add(49.0);
		collection.add(102.0);
		collection.add(116.0);
		collection.add(102.0);
		collection.add(67.0);
		collection.add(188.0);
		collection.add(44.0);
		collection.add(118.0);
		collection.add(142.0);
		collection.add(90.0);
		collection.add(119.0);
		collection.add(119.0);
		collection.add(64.0);
		collection.add(46.0);
		collection.add(121.0);
		collection.add(144.0);
		collection.add(185.0);
		collection.add(97.0);
		collection.add(2.0);
		collection.add(188.0);
		collection.add(161.0);
		collection.add(179.0);
		collection.add(175.0);
		collection.add(6.0);
		collection.add(62.0);
		collection.add(134.0);
		collection.add(83.0);
		collection.add(143.0);
		collection.add(68.0);
		collection.add(115.0);
		collection.add(104.0);
		collection.add(107.0);
		collection.add(3.0);
		collection.add(20.0);
		collection.add(173.0);
		collection.add(69.0);
		collection.add(175.0);
		collection.add(147.0);
		collection.add(159.0);
		collection.add(72.0);
		collection.add(76.0);
		collection.add(7.0);
		collection.add(1.0);
		collection.add(120.0);
		collection.add(177.0);
		collection.add(169.0);
		collection.add(39.0);
		collection.add(90.0);
		collection.add(167.0);
		collection.add(193.0);
		collection.add(35.0);
		collection.add(189.0);
		collection.add(159.0);
	}
	@Benchmark
	@Fork(1)
	@Warmup(time=3)
	@Measurement(time=1,iterations=10)
	public void JTreeSet(Blackhole bh) {
		bh.consume(collection.addAll(java.util.Arrays.asList(68.0,108.0,179.0,80.0,104.0,192.0,134.0)));
		collection.toArray(new Double[] {35.0,60.0,168.0,200.0,137.0,94.0,137.0});
		bh.consume(collection.contains(134.0));
		bh.consume(collection.remove(129.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,196.0,139.0,70.0,109.0,183.0,123.0,33.0,34.0)));
		bh.consume(collection.contains(169.0));
		collection.toArray(new Double[] {15.0,58.0,31.0,66.0,105.0,186.0,169.0,111.0,113.0});
		bh.consume(collection.contains(196.0));
		bh.consume(collection.contains(180.0));
		bh.consume(collection.contains(1.0));
		bh.consume(collection.add(145.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(163.0,96.0,54.0,112.0)));
		bh.consume(collection.remove(22.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,106.0,46.0,95.0)));
		bh.consume(collection.contains(77.0));
		bh.consume(collection.add(121.0));
		collection.toArray(new Double[] {57.0,23.0,144.0});
		bh.consume(collection.remove(148.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(3.0,157.0,81.0,6.0,44.0,180.0,8.0,144.0,98.0)));
		collection.toArray(new Double[] {15.0,193.0,63.0,27.0,111.0,191.0,63.0,155.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(65.0,12.0,74.0,17.0,97.0,38.0,92.0,10.0)));
		bh.consume(collection.remove(7.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(52.0,41.0,71.0,38.0)));
		bh.consume(collection.contains(70.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(35.0,4.0,99.0,105.0,101.0,191.0,32.0,39.0,11.0)));
		bh.consume(collection.contains(56.0));
		bh.consume(collection.contains(87.0));
		collection.toArray(new Double[] {174.0,128.0,25.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(133.0,125.0,20.0,63.0,147.0,115.0,169.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(1.0,70.0,21.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(90.0,76.0,138.0)));
		bh.consume(collection.add(199.0));
		bh.consume(collection.contains(120.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(57.0,40.0,147.0,23.0,143.0,19.0,90.0,123.0)));
		bh.consume(collection.contains(168.0));
		collection.toArray(new Double[] {171.0,157.0,119.0,128.0,83.0,16.0,25.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(63.0,59.0,103.0,27.0)));
		bh.consume(collection.contains(97.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(133.0,188.0,71.0,128.0,172.0,116.0,31.0,49.0,138.0)));
		bh.consume(collection.contains(198.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(48.0,23.0,145.0,134.0,92.0,151.0)));
		bh.consume(collection.add(100.0));
		bh.consume(collection.contains(33.0));
		collection.toArray(new Double[] {150.0,134.0,57.0,120.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(58.0,172.0,118.0,51.0,150.0,174.0,69.0,106.0,55.0)));
		bh.consume(collection.contains(179.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(118.0,192.0,59.0,155.0,178.0,91.0,17.0,1.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(81.0,6.0,93.0,105.0,81.0,165.0,2.0)));
		bh.consume(collection.remove(66.0));
		bh.consume(collection.contains(127.0));
		bh.consume(collection.add(7.0));
		collection.toArray(new Double[] {67.0,53.0,178.0,89.0,28.0});
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(161.0,144.0,86.0,173.0,162.0,8.0)));
		bh.consume(collection.remove(95.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(172.0,84.0,181.0,40.0,42.0,79.0)));
		bh.consume(collection.contains(52.0));
		bh.consume(collection.contains(144.0));
		bh.consume(collection.remove(103.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(40.0,157.0,34.0)));
		bh.consume(collection.remove(16.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(17.0,130.0,48.0,57.0)));
		bh.consume(collection.add(148.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(42.0,193.0,57.0)));
		collection.toArray(new Double[] {173.0,34.0,182.0,41.0,46.0,112.0,154.0,78.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(65.0,11.0,187.0,51.0,117.0,62.0)));
		bh.consume(collection.remove(139.0));
		collection.toArray(new Double[] {54.0,182.0,43.0,15.0,197.0,87.0,114.0});
		bh.consume(collection.remove(86.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(200.0,120.0,34.0,10.0,133.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(65.0,125.0,131.0)));
		bh.consume(collection.remove(8.0));
		bh.consume(collection.contains(151.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(141.0,71.0,35.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(152.0,193.0,63.0,11.0,18.0,190.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(163.0,199.0,47.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(60.0,117.0,31.0)));
		bh.consume(collection.contains(137.0));
		collection.toArray(new Double[] {188.0,135.0,24.0,19.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(43.0,29.0,95.0,143.0,167.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(66.0,142.0,15.0,2.0,125.0,109.0,102.0)));
		collection.toArray(new Double[] {128.0,148.0,75.0,155.0,195.0});
		bh.consume(collection.remove(53.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(98.0,98.0,193.0,16.0,153.0)));
		bh.consume(collection.contains(100.0));
		bh.consume(collection.remove(98.0));
		bh.consume(collection.add(140.0));
		bh.consume(collection.contains(196.0));
		bh.consume(collection.add(44.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(56.0,80.0,84.0,123.0,122.0,90.0,148.0,91.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(41.0,120.0,196.0,168.0,61.0,25.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,114.0,37.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(110.0,181.0,170.0,126.0,85.0,87.0,75.0)));
		bh.consume(collection.remove(102.0));
		collection.toArray(new Double[] {103.0,178.0,181.0,90.0,42.0,18.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(58.0,189.0,137.0,197.0,45.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(106.0,87.0,23.0,163.0,67.0,68.0,67.0)));
		collection.toArray(new Double[] {126.0,177.0,11.0,80.0,108.0,59.0});
		bh.consume(collection.add(89.0));
		bh.consume(collection.contains(81.0));
		bh.consume(collection.contains(188.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(104.0,66.0,60.0,139.0,152.0,77.0)));
		bh.consume(collection.contains(97.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(115.0,76.0,175.0,190.0,146.0,185.0,61.0)));
		bh.consume(collection.add(61.0));
		bh.consume(collection.contains(187.0));
		bh.consume(collection.contains(163.0));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.contains(138.0));
		bh.consume(collection.add(187.0));
		bh.consume(collection.remove(92.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,192.0,147.0,56.0,95.0,82.0,199.0)));
		bh.consume(collection.contains(63.0));
		bh.consume(collection.add(150.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(59.0,158.0,24.0,188.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(79.0,142.0,47.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(122.0,92.0,155.0)));
		bh.consume(collection.remove(83.0));
		collection.toArray(new Double[] {17.0,19.0,112.0,130.0,78.0,53.0,195.0,142.0});
		bh.consume(collection.add(84.0));
		bh.consume(collection.add(194.0));
		collection.toArray(new Double[] {145.0,78.0,42.0,125.0,48.0,140.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(199.0,23.0,105.0)));
		bh.consume(collection.remove(1.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(124.0,12.0,115.0,48.0,131.0,142.0,9.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(164.0,160.0,106.0,189.0,132.0)));
		bh.consume(collection.contains(164.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(165.0,83.0,33.0,87.0,27.0,68.0,163.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(166.0,8.0,50.0,71.0,122.0,100.0)));
		bh.consume(collection.contains(19.0));
		bh.consume(collection.remove(72.0));
		bh.consume(collection.remove(83.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(48.0,43.0,30.0,185.0,106.0,57.0,112.0,70.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(16.0,107.0,154.0,146.0,183.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,63.0,41.0,76.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(169.0,152.0,108.0,34.0,145.0,84.0,121.0,85.0,92.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(15.0,85.0,130.0)));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(74.0,151.0,146.0,171.0,133.0,180.0,21.0,122.0,101.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(158.0,28.0,19.0,62.0,170.0)));
		bh.consume(collection.add(196.0));
		bh.consume(collection.add(138.0));
		bh.consume(collection.add(27.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(191.0,61.0,30.0,60.0)));
		bh.consume(collection.contains(11.0));
		bh.consume(collection.add(21.0));
		bh.consume(collection.remove(112.0));
		bh.consume(collection.contains(43.0));
		collection.toArray(new Double[] {91.0,102.0,106.0,169.0,145.0,168.0,94.0});
		bh.consume(collection.contains(55.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(172.0,61.0,114.0,66.0,73.0,137.0,44.0,4.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,163.0,11.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(192.0,76.0,84.0,32.0,161.0,125.0)));
		bh.consume(collection.add(75.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(100.0,136.0,58.0,166.0,56.0,24.0,108.0,25.0)));
		bh.consume(collection.contains(200.0));
		bh.consume(collection.contains(128.0));
		bh.consume(collection.remove(179.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(148.0,145.0,173.0,6.0,92.0,2.0,40.0)));
		bh.consume(collection.contains(129.0));
		collection.toArray(new Double[] {123.0,144.0,69.0,103.0,25.0,176.0,74.0,55.0});
		collection.toArray(new Double[] {150.0,114.0,41.0,199.0,199.0});
		bh.consume(collection.remove(69.0));
		bh.consume(collection.contains(56.0));
		bh.consume(collection.remove(65.0));
		bh.consume(collection.remove(66.0));
		bh.consume(collection.remove(105.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(147.0,183.0,86.0)));
		collection.toArray(new Double[] {198.0,29.0,30.0,86.0,69.0,200.0,20.0,156.0,23.0});
		bh.consume(collection.contains(93.0));
		bh.consume(collection.contains(40.0));
		collection.toArray(new Double[] {99.0,195.0,139.0});
		bh.consume(collection.add(191.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(39.0,182.0,45.0,100.0,1.0,83.0,159.0,97.0)));
		bh.consume(collection.remove(140.0));
		collection.toArray(new Double[] {162.0,182.0,90.0,105.0});
		collection.toArray(new Double[] {53.0,44.0,143.0,128.0,173.0,109.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(82.0,159.0,12.0,78.0)));
		collection.toArray(new Double[] {81.0,77.0,185.0,167.0,101.0});
		bh.consume(collection.remove(22.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(142.0,168.0,94.0,29.0,126.0,48.0)));
		bh.consume(collection.contains(20.0));
		bh.consume(collection.remove(81.0));
		bh.consume(collection.remove(181.0));
		bh.consume(collection.add(167.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(98.0,139.0,17.0,164.0,65.0,115.0,75.0,174.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(2.0,18.0,56.0,17.0,130.0,145.0,177.0)));
		bh.consume(collection.contains(48.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(101.0,130.0,55.0,97.0,167.0,125.0)));
		bh.consume(collection.remove(124.0));
		bh.consume(collection.contains(92.0));
		bh.consume(collection.contains(5.0));
		bh.consume(collection.add(188.0));
		bh.consume(collection.remove(73.0));
		bh.consume(collection.contains(166.0));
		bh.consume(collection.remove(68.0));
		bh.consume(collection.contains(183.0));
		bh.consume(collection.contains(127.0));
		collection.toArray(new Double[] {184.0,169.0,47.0,194.0,104.0,162.0});
		bh.consume(collection.remove(133.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(153.0,94.0,18.0,183.0,125.0,126.0,93.0)));
		bh.consume(collection.add(19.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(13.0,132.0,124.0,71.0,49.0,91.0,11.0,150.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(66.0,190.0,155.0,7.0,197.0)));
		bh.consume(collection.contains(11.0));
		bh.consume(collection.add(35.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(167.0,24.0,19.0,85.0,65.0,176.0,121.0)));
		collection.toArray(new Double[] {176.0,64.0,1.0,159.0,124.0,132.0,193.0,193.0,9.0});
		bh.consume(collection.remove(139.0));
		bh.consume(collection.add(85.0));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(160.0,163.0,18.0,60.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(55.0,109.0,152.0,61.0,7.0,12.0,126.0,76.0,49.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(132.0,32.0,149.0,195.0)));
		bh.consume(collection.remove(20.0));
		bh.consume(collection.add(174.0));
		bh.consume(collection.add(24.0));
		bh.consume(collection.contains(170.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,71.0,174.0,61.0,12.0,93.0,25.0,121.0,5.0)));
		bh.consume(collection.remove(168.0));
		bh.consume(collection.add(145.0));
		bh.consume(collection.contains(116.0));
		collection.toArray(new Double[] {7.0,50.0,96.0,3.0,15.0,69.0,15.0,22.0});
		collection.toArray(new Double[] {22.0,3.0,119.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(51.0,158.0,73.0,99.0)));
		bh.consume(collection.contains(170.0));
		bh.consume(collection.remove(99.0));
		bh.consume(collection.remove(81.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(16.0,137.0,12.0,10.0,176.0,134.0,94.0,55.0)));
		collection.addAll(new java.util.HashSet<Double>(java.util.Arrays.asList(159.0,83.0,163.0,78.0,124.0,107.0,88.0,133.0)));
		collection.toArray(new Double[] {68.0,56.0,50.0,89.0,13.0});
		collection.toArray(new Double[] {105.0,32.0,93.0,69.0,38.0,132.0,130.0,57.0,23.0});
		bh.consume(collection.remove(84.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(82.0,180.0,69.0,122.0,62.0,141.0)));
		bh.consume(collection.contains(33.0));
		collection.toArray(new Double[] {151.0,75.0,150.0,10.0,37.0,46.0,126.0,115.0});
		collection.toArray(new Double[] {114.0,92.0,143.0,123.0});
		collection.toArray(new Double[] {22.0,99.0,83.0,157.0,2.0,52.0,126.0,47.0});
		bh.consume(collection.contains(148.0));
		bh.consume(collection.remove(89.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(99.0,18.0,176.0,185.0,193.0,139.0,44.0,183.0,121.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(18.0,49.0,115.0,15.0,97.0,3.0)));
		bh.consume(collection.add(130.0));
		bh.consume(collection.contains(101.0));
		bh.consume(collection.remove(62.0));
		bh.consume(collection.remove(195.0));
		bh.consume(collection.contains(5.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(139.0,129.0,177.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(142.0,27.0,174.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(57.0,54.0,22.0,128.0,154.0,177.0)));
		bh.consume(collection.contains(108.0));
		bh.consume(collection.contains(127.0));
		bh.consume(collection.contains(194.0));
		collection.toArray(new Double[] {42.0,112.0,65.0,32.0,32.0,146.0,112.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(28.0,63.0,3.0,65.0,21.0,150.0,193.0)));
		bh.consume(collection.contains(76.0));
		bh.consume(collection.remove(115.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(14.0,75.0,124.0,58.0,99.0,161.0,151.0)));
		collection.toArray(new Double[] {47.0,27.0,97.0,101.0,109.0,126.0});
		bh.consume(collection.contains(126.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(153.0,3.0,173.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(108.0,81.0,79.0,145.0,146.0,133.0,32.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(86.0,125.0,7.0,156.0,136.0,199.0,149.0,41.0,158.0)));
		bh.consume(collection.remove(149.0));
		collection.toArray(new Double[] {60.0,25.0,158.0,126.0,10.0,162.0,3.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(145.0,170.0,46.0,135.0,112.0,188.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(117.0,144.0,5.0,138.0,186.0,20.0,181.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(20.0,73.0,106.0)));
		collection.toArray(new Double[] {113.0,150.0,132.0});
		bh.consume(collection.contains(126.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(95.0,38.0,150.0,56.0,26.0,68.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(86.0,66.0,157.0,124.0,72.0)));
		bh.consume(collection.remove(151.0));
		bh.consume(collection.contains(98.0));
		bh.consume(collection.remove(102.0));
		bh.consume(collection.remove(128.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(9.0,71.0,14.0,196.0,129.0)));
		bh.consume(collection.contains(147.0));
		bh.consume(collection.remove(117.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(37.0,169.0,115.0,125.0,197.0)));
		bh.consume(collection.contains(81.0));
		collection.toArray(new Double[] {165.0,133.0,53.0});
		bh.consume(collection.contains(44.0));
		collection.toArray(new Double[] {64.0,122.0,152.0,181.0,123.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(5.0,42.0,167.0,124.0,144.0,82.0,135.0,169.0,196.0)));
		bh.consume(collection.contains(18.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(53.0,111.0,126.0,84.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(124.0,24.0,7.0,56.0,23.0,188.0,18.0,30.0,84.0)));
		bh.consume(collection.contains(90.0));
		bh.consume(collection.remove(73.0));
		bh.consume(collection.add(84.0));
		bh.consume(collection.contains(54.0));
		bh.consume(collection.contains(59.0));
		bh.consume(collection.add(173.0));
		bh.consume(collection.remove(127.0));
		bh.consume(collection.add(181.0));
		bh.consume(collection.contains(119.0));
		bh.consume(collection.contains(175.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(197.0,40.0,66.0,73.0,120.0,158.0,123.0,121.0,16.0)));
		collection.toArray(new Double[] {152.0,66.0,33.0,73.0,77.0,67.0});
		bh.consume(collection.remove(117.0));
		bh.consume(collection.remove(89.0));
		collection.toArray(new Double[] {121.0,151.0,87.0,163.0,65.0});
		bh.consume(collection.remove(30.0));
		collection.toArray(new Double[] {182.0,170.0,108.0,74.0,70.0,49.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(111.0,87.0,138.0,108.0,136.0,127.0)));
		bh.consume(collection.remove(74.0));
		bh.consume(collection.contains(105.0));
		bh.consume(collection.contains(8.0));
		bh.consume(collection.remove(71.0));
		collection.toArray(new Double[] {41.0,43.0,174.0,92.0,9.0,36.0,75.0});
		bh.consume(collection.contains(153.0));
		bh.consume(collection.remove(8.0));
		collection.toArray(new Double[] {189.0,89.0,8.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(46.0,115.0,30.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(11.0,89.0,4.0,25.0,124.0)));
		bh.consume(collection.add(198.0));
		collection.toArray(new Double[] {180.0,138.0,24.0,47.0,28.0,173.0,84.0});
		bh.consume(collection.contains(151.0));
		bh.consume(collection.contains(22.0));
		bh.consume(collection.add(61.0));
		bh.consume(collection.contains(145.0));
		bh.consume(collection.remove(82.0));
		collection.toArray(new Double[] {34.0,57.0,20.0,2.0,174.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(62.0,4.0,5.0,78.0,60.0,41.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(101.0,97.0,5.0,41.0)));
		collection.toArray(new Double[] {24.0,40.0,175.0});
		bh.consume(collection.remove(126.0));
		bh.consume(collection.add(191.0));
		bh.consume(collection.remove(150.0));
		bh.consume(collection.remove(181.0));
		collection.toArray(new Double[] {125.0,136.0,18.0,40.0,107.0,81.0,51.0,58.0,152.0});
		bh.consume(collection.contains(184.0));
		bh.consume(collection.remove(151.0));
		bh.consume(collection.contains(47.0));
		bh.consume(collection.add(192.0));
		collection.toArray(new Double[] {132.0,103.0,36.0,156.0,113.0,29.0,118.0,28.0,121.0});
		collection.toArray(new Double[] {10.0,62.0,83.0,58.0,129.0,25.0,180.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(5.0,18.0,194.0,132.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(68.0,19.0,173.0,82.0,129.0,13.0,142.0)));
		bh.consume(collection.remove(181.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(16.0,153.0,149.0,191.0,94.0,112.0)));
		bh.consume(collection.contains(84.0));
		bh.consume(collection.contains(79.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(101.0,24.0,170.0,174.0,2.0,176.0,115.0,148.0,139.0)));
		bh.consume(collection.add(73.0));
		bh.consume(collection.contains(16.0));
		collection.toArray(new Double[] {33.0,40.0,56.0,101.0});
		bh.consume(collection.contains(77.0));
		collection.toArray(new Double[] {50.0,162.0,50.0,197.0,129.0,104.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(106.0,60.0,52.0,8.0,74.0,20.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(171.0,84.0,64.0,166.0,159.0,87.0,35.0,76.0,190.0)));
		bh.consume(collection.contains(131.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(141.0,101.0,93.0)));
		collection.toArray(new Double[] {37.0,156.0,139.0,28.0,5.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(87.0,6.0,16.0,11.0,147.0,178.0,64.0,190.0,2.0)));
		bh.consume(collection.contains(171.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(34.0,5.0,72.0,34.0)));
		bh.consume(collection.add(69.0));
		bh.consume(collection.contains(23.0));
		bh.consume(collection.contains(6.0));
		bh.consume(collection.remove(182.0));
		collection.toArray(new Double[] {98.0,51.0,7.0,157.0,28.0,51.0,33.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(67.0,98.0,109.0,174.0)));
		bh.consume(collection.contains(188.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(66.0,117.0,89.0,35.0,162.0)));
		bh.consume(collection.remove(137.0));
		bh.consume(collection.contains(99.0));
		bh.consume(collection.contains(151.0));
		bh.consume(collection.remove(178.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(169.0,159.0,148.0,190.0,192.0,167.0,141.0,142.0,186.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(106.0,51.0,20.0,191.0,170.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,154.0,54.0,43.0,2.0)));
		bh.consume(collection.contains(198.0));
		bh.consume(collection.add(93.0));
		bh.consume(collection.contains(28.0));
		bh.consume(collection.remove(8.0));
		collection.toArray(new Double[] {167.0,112.0,104.0,27.0,105.0,49.0,132.0,129.0,135.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(110.0,39.0,136.0,18.0,85.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(45.0,71.0,159.0,120.0,31.0,34.0,125.0)));
		collection.toArray(new Double[] {48.0,97.0,123.0,95.0,109.0,168.0,25.0});
		bh.consume(collection.contains(25.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(186.0,195.0,24.0,55.0,179.0,1.0)));
		bh.consume(collection.remove(68.0));
		collection.toArray(new Double[] {14.0,103.0,186.0,161.0,30.0,139.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(123.0,91.0,47.0)));
		bh.consume(collection.contains(26.0));
		collection.toArray(new Double[] {120.0,27.0,126.0,145.0,19.0});
		bh.consume(collection.add(43.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(128.0,29.0,154.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(46.0,147.0,111.0,98.0,127.0,79.0,103.0,70.0)));
		bh.consume(collection.remove(137.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(119.0,21.0,4.0)));
		bh.consume(collection.remove(127.0));
		bh.consume(collection.remove(177.0));
		bh.consume(collection.contains(174.0));
		bh.consume(collection.remove(182.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(152.0,89.0,122.0,135.0,187.0,142.0)));
		collection.toArray(new Double[] {117.0,158.0,131.0,68.0,105.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(94.0,87.0,28.0)));
		bh.consume(collection.remove(26.0));
		bh.consume(collection.contains(140.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(11.0,192.0,57.0,186.0)));
		bh.consume(collection.contains(67.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(29.0,138.0,41.0,14.0,191.0,33.0,86.0,156.0)));
		bh.consume(collection.contains(18.0));
		collection.toArray(new Double[] {173.0,53.0,82.0,83.0,185.0,125.0});
		bh.consume(collection.removeAll(java.util.Arrays.asList(84.0,18.0,46.0,121.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(62.0,30.0,97.0,64.0,58.0,85.0,4.0,3.0,48.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(178.0,12.0,12.0,93.0,118.0,25.0,191.0,54.0)));
		bh.consume(collection.remove(161.0));
		bh.consume(collection.removeAll(java.util.Arrays.asList(114.0,138.0,22.0,181.0,5.0,197.0,22.0,171.0)));
		bh.consume(collection.removeAll(java.util.Arrays.asList(50.0,9.0,88.0,187.0,78.0)));
		bh.consume(collection.contains(1.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(8.0,37.0,140.0,141.0,189.0,124.0,71.0,104.0)));
		bh.consume(collection.remove(84.0));
		bh.consume(collection.remove(50.0));
		collection.toArray(new Double[] {42.0,162.0,74.0});
		bh.consume(collection.remove(142.0));
		bh.consume(collection.remove(98.0));
		bh.consume(collection.contains(108.0));
		collection.toArray(new Double[] {199.0,161.0,184.0,196.0});
		collection.toArray(new Double[] {24.0,25.0,190.0,137.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(53.0,74.0,176.0,182.0,64.0,19.0,116.0,144.0,88.0)));
		bh.consume(collection.contains(114.0));
		bh.consume(collection.contains(160.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(78.0,44.0,128.0)));
		bh.consume(collection.remove(179.0));
		collection.toArray(new Double[] {133.0,141.0,131.0});
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(143.0,187.0,51.0,181.0,56.0,124.0,192.0,170.0)));
		bh.consume(collection.remove(71.0));
		bh.consume(collection.contains(42.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(65.0,134.0,5.0)));
		collection.toArray(new Double[] {100.0,154.0,98.0,135.0});
		bh.consume(collection.add(24.0));
		bh.consume(collection.contains(10.0));
		bh.consume(collection.contains(172.0));
		collection.toArray(new Double[] {72.0,174.0,61.0,96.0});
		bh.consume(collection.remove(39.0));
		bh.consume(collection.contains(167.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(125.0,42.0,67.0,67.0,68.0,41.0,101.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(42.0,60.0,111.0)));
		bh.consume(collection.add(150.0));
		bh.consume(collection.contains(168.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(176.0,102.0,98.0,132.0,120.0,70.0,92.0,108.0,188.0)));
		bh.consume(collection.contains(85.0));
		bh.consume(collection.remove(61.0));
		bh.consume(collection.contains(115.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(179.0,148.0,46.0,17.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(145.0,177.0,71.0,177.0)));
		bh.consume(collection.remove(155.0));
		bh.consume(collection.remove(162.0));
		bh.consume(collection.contains(27.0));
		bh.consume(collection.remove(115.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(56.0,174.0,101.0,155.0)));
		bh.consume(collection.add(81.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(187.0,101.0,147.0,149.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(120.0,82.0,72.0,121.0,11.0,106.0)));
		bh.consume(collection.remove(151.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(28.0,180.0,87.0,66.0)));
		collection.toArray(new Double[] {97.0,19.0,167.0,110.0});
		bh.consume(collection.add(187.0));
		bh.consume(collection.contains(155.0));
		bh.consume(collection.remove(87.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(115.0,68.0,78.0,81.0,66.0,163.0,128.0,158.0,117.0)));
		bh.consume(collection.contains(16.0));
		collection.toArray(new Double[] {95.0,4.0,59.0,125.0});
		bh.consume(collection.contains(109.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(36.0,84.0,104.0,88.0,21.0,13.0,4.0,92.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(65.0,127.0,101.0,66.0,66.0,173.0,19.0)));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(155.0,112.0,153.0,30.0)));
		bh.consume(collection.contains(58.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(180.0,110.0,137.0,91.0,200.0)));
		collection.toArray(new Double[] {112.0,167.0,128.0,199.0,102.0,165.0,64.0,177.0});
		collection.toArray(new Double[] {150.0,178.0,18.0,146.0,189.0,21.0});
		bh.consume(collection.remove(133.0));
		bh.consume(collection.remove(154.0));
		bh.consume(collection.remove(21.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(99.0,106.0,120.0,27.0,92.0,189.0,176.0,197.0)));
		collection.toArray(new Double[] {139.0,148.0,93.0,175.0,73.0,200.0});
		bh.consume(collection.add(102.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(181.0,57.0,28.0,142.0)));
		bh.consume(collection.addAll(java.util.Arrays.asList(194.0,195.0,189.0,132.0,179.0,184.0,161.0)));
		bh.consume(collection.contains(73.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(43.0,123.0,75.0,9.0,121.0,14.0,31.0,171.0)));
		bh.consume(collection.add(160.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(44.0,140.0,23.0,119.0)));
		bh.consume(collection.add(128.0));
		bh.consume(collection.contains(93.0));
		bh.consume(collection.contains(19.0));
		bh.consume(collection.addAll(java.util.Arrays.asList(63.0,120.0,13.0,165.0,77.0,85.0)));
		bh.consume(collection.remove(121.0));
		bh.consume(collection.contains(105.0));
		collection.removeAll(new java.util.HashSet<Double>(java.util.Arrays.asList(16.0,48.0,14.0,58.0,89.0,189.0,108.0,92.0)));
		collection.toArray(new Double[] {128.0,21.0,56.0,59.0,177.0,105.0});
		collection.toArray(new Double[] {57.0,25.0,127.0,99.0,59.0,96.0,42.0,65.0});
		bh.consume(collection.remove(116.0));
		collection.toArray(new Double[] {22.0,61.0,37.0});
		collection.toArray(new Double[] {84.0,198.0,8.0,154.0,80.0,130.0,64.0});
		bh.consume(collection.addAll(java.util.Arrays.asList(170.0,108.0,61.0,5.0,10.0,8.0,131.0,128.0,199.0)));
		bh.consume(collection.remove(195.0));
		bh.consume(collection.add(4.0));
	}
}
